{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nconst schema = require('@graphql-tools/schema');\nconst applicator = require('./applicator.js');\nconst validation = require('./validation.js');\nconst fragments = require('./fragments.js');\nconst utils = require('./utils.js');\nfunction addMiddlewareToSchema(schema$1, options, middleware) {\n  const validMiddleware = validation.validateMiddleware(schema$1, middleware);\n  const resolvers = applicator.generateResolverFromSchemaAndMiddleware(schema$1, options, validMiddleware);\n  const fragmentReplacements = fragments.extractFragmentReplacements(resolvers);\n  const newSchema = schema.addResolversToSchema({\n    schema: schema$1,\n    resolvers,\n    updateResolversInPlace: false,\n    resolverValidationOptions: {\n      requireResolversForResolveType: \"ignore\"\n    }\n  });\n  return {\n    schema: newSchema,\n    fragmentReplacements\n  };\n}\nfunction applyMiddlewareWithOptions(schema, options, ...middlewares) {\n  const normalisedMiddlewares = middlewares.map(middleware => {\n    if (utils.isMiddlewareGenerator(middleware)) {\n      return middleware.generate(schema);\n    } else {\n      return middleware;\n    }\n  });\n  const schemaWithMiddlewareAndFragmentReplacements = normalisedMiddlewares.reduceRight(({\n    schema: currentSchema,\n    fragmentReplacements: currentFragmentReplacements\n  }, middleware) => {\n    const {\n      schema: newSchema,\n      fragmentReplacements: newFragmentReplacements\n    } = addMiddlewareToSchema(currentSchema, options, middleware);\n    return {\n      schema: newSchema,\n      fragmentReplacements: [...currentFragmentReplacements, ...newFragmentReplacements]\n    };\n  }, {\n    schema,\n    fragmentReplacements: []\n  });\n  const schemaWithMiddleware = schemaWithMiddlewareAndFragmentReplacements.schema;\n  schemaWithMiddleware.schema = schemaWithMiddlewareAndFragmentReplacements.schema;\n  schemaWithMiddleware.fragmentReplacements = schemaWithMiddlewareAndFragmentReplacements.fragmentReplacements;\n  return schemaWithMiddleware;\n}\nfunction applyMiddleware(schema, ...middlewares) {\n  return applyMiddlewareWithOptions(schema, {\n    onlyDeclaredResolvers: false\n  }, ...middlewares);\n}\nfunction applyMiddlewareToDeclaredResolvers(schema, ...middlewares) {\n  return applyMiddlewareWithOptions(schema, {\n    onlyDeclaredResolvers: true\n  }, ...middlewares);\n}\nexports.addMiddlewareToSchema = addMiddlewareToSchema;\nexports.applyMiddleware = applyMiddleware;\nexports.applyMiddlewareToDeclaredResolvers = applyMiddlewareToDeclaredResolvers;","map":{"version":3,"names":["Object","defineProperty","exports","value","schema","require","applicator","validation","fragments","utils","addMiddlewareToSchema","schema$1","options","middleware","validMiddleware","validateMiddleware","resolvers","generateResolverFromSchemaAndMiddleware","fragmentReplacements","extractFragmentReplacements","newSchema","addResolversToSchema","updateResolversInPlace","resolverValidationOptions","requireResolversForResolveType","applyMiddlewareWithOptions","middlewares","normalisedMiddlewares","map","isMiddlewareGenerator","generate","schemaWithMiddlewareAndFragmentReplacements","reduceRight","currentSchema","currentFragmentReplacements","newFragmentReplacements","schemaWithMiddleware","applyMiddleware","onlyDeclaredResolvers","applyMiddlewareToDeclaredResolvers"],"sources":["/Users/pom/Code/serverless-ts-yarn-pnp/.yarn/__virtual__/graphql-middleware-virtual-8e3b5d6992/0/cache/graphql-middleware-npm-6.1.21-7377367d5a-e7172dbe7c.zip/node_modules/graphql-middleware/dist/middleware.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nconst schema = require('@graphql-tools/schema');\nconst applicator = require('./applicator.js');\nconst validation = require('./validation.js');\nconst fragments = require('./fragments.js');\nconst utils = require('./utils.js');\n\nfunction addMiddlewareToSchema(schema$1, options, middleware) {\n  const validMiddleware = validation.validateMiddleware(schema$1, middleware);\n  const resolvers = applicator.generateResolverFromSchemaAndMiddleware(schema$1, options, validMiddleware);\n  const fragmentReplacements = fragments.extractFragmentReplacements(resolvers);\n  const newSchema = schema.addResolversToSchema({\n    schema: schema$1,\n    resolvers,\n    updateResolversInPlace: false,\n    resolverValidationOptions: {\n      requireResolversForResolveType: \"ignore\"\n    }\n  });\n  return { schema: newSchema, fragmentReplacements };\n}\nfunction applyMiddlewareWithOptions(schema, options, ...middlewares) {\n  const normalisedMiddlewares = middlewares.map((middleware) => {\n    if (utils.isMiddlewareGenerator(middleware)) {\n      return middleware.generate(schema);\n    } else {\n      return middleware;\n    }\n  });\n  const schemaWithMiddlewareAndFragmentReplacements = normalisedMiddlewares.reduceRight(({\n    schema: currentSchema,\n    fragmentReplacements: currentFragmentReplacements\n  }, middleware) => {\n    const {\n      schema: newSchema,\n      fragmentReplacements: newFragmentReplacements\n    } = addMiddlewareToSchema(currentSchema, options, middleware);\n    return {\n      schema: newSchema,\n      fragmentReplacements: [\n        ...currentFragmentReplacements,\n        ...newFragmentReplacements\n      ]\n    };\n  }, { schema, fragmentReplacements: [] });\n  const schemaWithMiddleware = schemaWithMiddlewareAndFragmentReplacements.schema;\n  schemaWithMiddleware.schema = schemaWithMiddlewareAndFragmentReplacements.schema;\n  schemaWithMiddleware.fragmentReplacements = schemaWithMiddlewareAndFragmentReplacements.fragmentReplacements;\n  return schemaWithMiddleware;\n}\nfunction applyMiddleware(schema, ...middlewares) {\n  return applyMiddlewareWithOptions(schema, { onlyDeclaredResolvers: false }, ...middlewares);\n}\nfunction applyMiddlewareToDeclaredResolvers(schema, ...middlewares) {\n  return applyMiddlewareWithOptions(schema, { onlyDeclaredResolvers: true }, ...middlewares);\n}\n\nexports.addMiddlewareToSchema = addMiddlewareToSchema;\nexports.applyMiddleware = applyMiddleware;\nexports.applyMiddlewareToDeclaredResolvers = applyMiddlewareToDeclaredResolvers;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}