{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.transformSchema = void 0;\nconst graphql_1 = require(\"graphql\");\nfunction mapValues(object, callback) {\n  const result = Object.create(null);\n  for (const [key, value] of Object.entries(object)) {\n    result[key] = callback(value);\n  }\n  return result;\n}\nfunction transformSchema(schema, transformType) {\n  const typeMap = Object.create(null);\n  for (const oldType of Object.values(schema.getTypeMap())) {\n    if ((0, graphql_1.isIntrospectionType)(oldType)) continue;\n    const result = transformType(oldType);\n    if (result === null) continue;\n    const newType = result || oldType;\n    typeMap[newType.name] = recreateNamedType(newType);\n  }\n  const schemaConfig = schema.toConfig();\n  return new graphql_1.GraphQLSchema({\n    ...schemaConfig,\n    types: Object.values(typeMap),\n    query: replaceMaybeType(schemaConfig.query),\n    mutation: replaceMaybeType(schemaConfig.mutation),\n    subscription: replaceMaybeType(schemaConfig.subscription),\n    directives: replaceDirectives(schemaConfig.directives)\n  });\n  function recreateNamedType(type) {\n    if ((0, graphql_1.isObjectType)(type)) {\n      const config = type.toConfig();\n      return new graphql_1.GraphQLObjectType({\n        ...config,\n        interfaces: () => config.interfaces.map(replaceNamedType),\n        fields: () => replaceFields(config.fields)\n      });\n    } else if ((0, graphql_1.isInterfaceType)(type)) {\n      const config = type.toConfig();\n      return new graphql_1.GraphQLInterfaceType({\n        ...config,\n        interfaces: () => config.interfaces.map(replaceNamedType),\n        fields: () => replaceFields(config.fields)\n      });\n    } else if ((0, graphql_1.isUnionType)(type)) {\n      const config = type.toConfig();\n      return new graphql_1.GraphQLUnionType({\n        ...config,\n        types: () => config.types.map(replaceNamedType)\n      });\n    } else if ((0, graphql_1.isInputObjectType)(type)) {\n      const config = type.toConfig();\n      return new graphql_1.GraphQLInputObjectType({\n        ...config,\n        fields: () => replaceInputFields(config.fields)\n      });\n    }\n    return type;\n  }\n  function replaceType(type) {\n    if ((0, graphql_1.isListType)(type)) {\n      return new graphql_1.GraphQLList(replaceType(type.ofType));\n    } else if ((0, graphql_1.isNonNullType)(type)) {\n      return new graphql_1.GraphQLNonNull(replaceType(type.ofType));\n    }\n    return replaceNamedType(type);\n  }\n  function replaceNamedType(type) {\n    const newType = typeMap[type.name];\n    return newType ? newType : type;\n  }\n  function replaceMaybeType(type) {\n    return type ? replaceNamedType(type) : undefined;\n  }\n  function replaceFields(fieldsMap) {\n    return mapValues(fieldsMap, field => ({\n      ...field,\n      type: replaceType(field.type),\n      args: field.args ? replaceArgs(field.args) : undefined\n    }));\n  }\n  function replaceInputFields(fieldsMap) {\n    return mapValues(fieldsMap, field => ({\n      ...field,\n      type: replaceType(field.type)\n    }));\n  }\n  function replaceArgs(args) {\n    return mapValues(args, arg => ({\n      ...arg,\n      type: replaceType(arg.type)\n    }));\n  }\n  function replaceDirectives(directives) {\n    return directives.map(directive => {\n      const config = directive.toConfig();\n      return new graphql_1.GraphQLDirective({\n        ...config,\n        args: replaceArgs(config.args)\n      });\n    });\n  }\n}\nexports.transformSchema = transformSchema;","map":{"version":3,"mappings":"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","names":["graphql_1","require","mapValues","object","callback","result","Object","create","key","value","entries","transformSchema","schema","transformType","typeMap","oldType","values","getTypeMap","isIntrospectionType","newType","name","recreateNamedType","schemaConfig","toConfig","GraphQLSchema","types","query","replaceMaybeType","mutation","subscription","directives","replaceDirectives","type","isObjectType","config","GraphQLObjectType","interfaces","map","replaceNamedType","fields","replaceFields","isInterfaceType","GraphQLInterfaceType","isUnionType","GraphQLUnionType","isInputObjectType","GraphQLInputObjectType","replaceInputFields","replaceType","isListType","GraphQLList","ofType","isNonNullType","GraphQLNonNull","undefined","fieldsMap","field","args","replaceArgs","arg","directive","GraphQLDirective","exports"],"sourceRoot":"","sources":["../../src/schema-helper/transformSchema.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}