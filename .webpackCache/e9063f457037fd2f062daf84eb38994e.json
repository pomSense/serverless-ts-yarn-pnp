{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.graphQLJSDirectiveToAST = exports.graphQLJSNamedTypeToAST = exports.graphQLJSSchemaToAST = void 0;\nconst graphql_1 = require(\"graphql\");\nconst definitions_1 = require(\"./definitions\");\nconst allOperationTypeNode = [graphql_1.OperationTypeNode.QUERY, graphql_1.OperationTypeNode.MUTATION, graphql_1.OperationTypeNode.SUBSCRIPTION];\nfunction graphQLJSSchemaToAST(schema) {\n  const types = Object.values(schema.getTypeMap()).filter(type => !(0, graphql_1.isIntrospectionType)(type) && !(0, graphql_1.isSpecifiedScalarType)(type));\n  const directives = schema.getDirectives().filter(directive => !(0, graphql_1.isSpecifiedDirective)(directive));\n  const schemaASTs = toNodeArray(graphQLJSSchemaToSchemaDefinitionAST(schema));\n  const typesASTs = types.map(type => toNodeArray(graphQLJSNamedTypeToAST(type))).flat();\n  const directivesASTs = directives.map(directive => graphQLJSDirectiveToAST(directive));\n  return {\n    kind: graphql_1.Kind.DOCUMENT,\n    definitions: [...schemaASTs, ...typesASTs, ...directivesASTs]\n  };\n}\nexports.graphQLJSSchemaToAST = graphQLJSSchemaToAST;\nfunction toNodeArray({\n  definition,\n  extensions\n}) {\n  return definition ? [definition, ...extensions] : extensions;\n}\nfunction maybe(v) {\n  return v ? v : undefined;\n}\nfunction graphQLJSSchemaToSchemaDefinitionAST(schema) {\n  if (schema.astNode || schema.extensionASTNodes.length > 0) {\n    return {\n      definition: maybe(schema.astNode),\n      extensions: schema.extensionASTNodes\n    };\n  } else {\n    let definition = undefined;\n    if (hasNonDefaultRootNames(schema)) {\n      const operationTypes = [];\n      for (const operation of allOperationTypeNode) {\n        const type = schema.getRootType(operation);\n        if (type) {\n          operationTypes.push({\n            kind: graphql_1.Kind.OPERATION_TYPE_DEFINITION,\n            operation,\n            type: {\n              kind: graphql_1.Kind.NAMED_TYPE,\n              name: {\n                kind: graphql_1.Kind.NAME,\n                value: type.name\n              }\n            }\n          });\n        }\n      }\n      definition = {\n        kind: graphql_1.Kind.SCHEMA_DEFINITION,\n        description: schema.description ? {\n          kind: graphql_1.Kind.STRING,\n          value: schema.description\n        } : undefined,\n        operationTypes\n      };\n    }\n    return {\n      definition,\n      extensions: []\n    };\n  }\n}\nfunction hasNonDefaultRootNames(schema) {\n  return allOperationTypeNode.some(t => isNonDefaultRootName(schema.getRootType(t), t));\n}\nfunction isNonDefaultRootName(type, operation) {\n  return !!type && type.name !== (0, definitions_1.defaultRootName)(operation);\n}\nfunction graphQLJSNamedTypeToAST(type) {\n  if (type.astNode || type.extensionASTNodes.length > 0) {\n    return {\n      definition: maybe(type.astNode),\n      extensions: type.extensionASTNodes\n    };\n  } else {\n    return {\n      definition: (0, graphql_1.parse)((0, graphql_1.printType)(type)).definitions[0],\n      extensions: []\n    };\n  }\n}\nexports.graphQLJSNamedTypeToAST = graphQLJSNamedTypeToAST;\nfunction graphQLJSDirectiveToAST(directive) {\n  if (directive.astNode) {\n    return directive.astNode;\n  } else {\n    const fakeSchema = new graphql_1.GraphQLSchema({\n      directives: [directive],\n      assumeValid: true\n    });\n    const reparsed = (0, graphql_1.parse)((0, graphql_1.printSchema)(fakeSchema));\n    return reparsed.definitions.find(def => def.kind === graphql_1.Kind.DIRECTIVE_DEFINITION);\n  }\n}\nexports.graphQLJSDirectiveToAST = graphQLJSDirectiveToAST;","map":{"version":3,"mappings":"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","names":["graphql_1","require","definitions_1","allOperationTypeNode","OperationTypeNode","QUERY","MUTATION","SUBSCRIPTION","graphQLJSSchemaToAST","schema","types","Object","values","getTypeMap","filter","type","isIntrospectionType","isSpecifiedScalarType","directives","getDirectives","directive","isSpecifiedDirective","schemaASTs","toNodeArray","graphQLJSSchemaToSchemaDefinitionAST","typesASTs","map","graphQLJSNamedTypeToAST","flat","directivesASTs","graphQLJSDirectiveToAST","kind","Kind","DOCUMENT","definitions","exports","definition","extensions","maybe","v","undefined","astNode","extensionASTNodes","length","hasNonDefaultRootNames","operationTypes","operation","getRootType","push","OPERATION_TYPE_DEFINITION","NAMED_TYPE","name","NAME","value","SCHEMA_DEFINITION","description","STRING","some","t","isNonDefaultRootName","defaultRootName","parse","printType","fakeSchema","GraphQLSchema","assumeValid","reparsed","printSchema","find","def","DIRECTIVE_DEFINITION"],"sourceRoot":"","sources":["../src/graphQLJSSchemaToAST.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}