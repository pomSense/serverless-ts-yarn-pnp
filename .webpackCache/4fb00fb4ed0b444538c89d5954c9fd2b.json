{"ast":null,"code":"\"use strict\";\n\nconst url = require('url');\nconst {\n  getEventBody\n} = require('../utils');\n\n// Lambda@Edge fails if certain headers are returned\nconst RESPONSE_HEADERS_DENY_LIST = ['content-length'];\nfunction getRequestValuesFromLambdaEdgeEvent({\n  event\n}) {\n  const cloudFrontRequest = event.Records[0].cf.request;\n  const {\n    headers: headersMap,\n    uri,\n    method,\n    querystring,\n    body: requestBodyObject = {},\n    clientIp\n  } = cloudFrontRequest;\n  let body = null;\n  const headers = {};\n  Object.entries(headersMap).forEach(([headerKey, headerValue]) => {\n    headers[headerKey] = headerValue.map(header => header.value).join(',');\n  });\n  if (requestBodyObject.data) {\n    const isBase64Encoded = requestBodyObject.encoding === 'base64';\n    body = getEventBody({\n      body: requestBodyObject.data,\n      isBase64Encoded\n    });\n    headers['content-length'] = Buffer.byteLength(body, isBase64Encoded ? 'base64' : 'utf8');\n  }\n  const path = url.format({\n    pathname: uri,\n    search: querystring\n  });\n  const {\n    host\n  } = headers;\n  return {\n    method,\n    path,\n    headers,\n    body,\n    remoteAddress: clientIp,\n    host,\n    hostname: host // Alias for host\n    // protocol: `${headers['X-Forwarded-Proto']}:`,\n    // port: headers['X-Forwarded-Port']\n  };\n}\n\nfunction getResponseToLambdaEdge({\n  statusCode,\n  body,\n  headers,\n  isBase64Encoded\n}) {\n  const headersMap = {};\n  Object.entries(headers).forEach(([headerKey, headerValue]) => {\n    const headerKeyLowerCase = headerKey.toLowerCase();\n    if (RESPONSE_HEADERS_DENY_LIST.includes(headerKeyLowerCase)) return;\n    if (!headersMap[headerKeyLowerCase]) headersMap[headerKeyLowerCase] = [];\n    if (!Array.isArray(headerValue)) {\n      headersMap[headerKeyLowerCase].push({\n        key: headerKeyLowerCase,\n        value: headerValue\n      });\n      return;\n    }\n    const headersArray = headerValue.map(v => ({\n      key: headerKeyLowerCase,\n      value: v\n    }));\n    headersMap[headerKeyLowerCase].push(...headersArray);\n  });\n  const bodyEncoding = isBase64Encoded ? 'base64' : 'text';\n  const responseToService = {\n    status: statusCode,\n    body,\n    headers: headersMap,\n    bodyEncoding\n  };\n\n  // TODO: Handle if responseToServiceBytes exceeds Lambda@Edge limits\n  // const responseToServiceBytes = (new TextEncoder().encode(JSON.stringify(responseToService))).length\n\n  return responseToService;\n}\nmodule.exports = {\n  getRequest: getRequestValuesFromLambdaEdgeEvent,\n  getResponse: getResponseToLambdaEdge\n};","map":{"version":3,"names":["url","require","getEventBody","RESPONSE_HEADERS_DENY_LIST","getRequestValuesFromLambdaEdgeEvent","event","cloudFrontRequest","Records","cf","request","headers","headersMap","uri","method","querystring","body","requestBodyObject","clientIp","Object","entries","forEach","headerKey","headerValue","map","header","value","join","data","isBase64Encoded","encoding","Buffer","byteLength","path","format","pathname","search","host","remoteAddress","hostname","getResponseToLambdaEdge","statusCode","headerKeyLowerCase","toLowerCase","includes","Array","isArray","push","key","headersArray","v","bodyEncoding","responseToService","status","module","exports","getRequest","getResponse"],"sources":["/Users/pom/Code/serverless-ts-yarn-pnp/.yarn/cache/@vendia-serverless-express-npm-4.10.4-2e67e59920-f33d3f0f08.zip/node_modules/@vendia/serverless-express/src/event-sources/aws/lambda-edge.js"],"sourcesContent":["const url = require('url')\nconst { getEventBody } = require('../utils')\n\n// Lambda@Edge fails if certain headers are returned\nconst RESPONSE_HEADERS_DENY_LIST = ['content-length']\n\nfunction getRequestValuesFromLambdaEdgeEvent ({ event }) {\n  const cloudFrontRequest = event.Records[0].cf.request\n  const {\n    headers: headersMap,\n    uri,\n    method,\n    querystring,\n    body: requestBodyObject = {},\n    clientIp\n  } = cloudFrontRequest\n  let body = null\n\n  const headers = {}\n\n  Object.entries(headersMap).forEach(([headerKey, headerValue]) => {\n    headers[headerKey] = headerValue.map(header => header.value).join(',')\n  })\n\n  if (requestBodyObject.data) {\n    const isBase64Encoded = requestBodyObject.encoding === 'base64'\n    body = getEventBody({\n      body: requestBodyObject.data,\n      isBase64Encoded\n    })\n    headers['content-length'] = Buffer.byteLength(body, isBase64Encoded ? 'base64' : 'utf8')\n  }\n\n  const path = url.format({\n    pathname: uri,\n    search: querystring\n  })\n\n  const { host } = headers\n  return {\n    method,\n    path,\n    headers,\n    body,\n    remoteAddress: clientIp,\n    host,\n    hostname: host // Alias for host\n    // protocol: `${headers['X-Forwarded-Proto']}:`,\n    // port: headers['X-Forwarded-Port']\n  }\n}\nfunction getResponseToLambdaEdge ({\n  statusCode,\n  body,\n  headers,\n  isBase64Encoded\n}) {\n  const headersMap = {}\n  Object.entries(headers).forEach(([headerKey, headerValue]) => {\n    const headerKeyLowerCase = headerKey.toLowerCase()\n    if (RESPONSE_HEADERS_DENY_LIST.includes(headerKeyLowerCase)) return\n    if (!headersMap[headerKeyLowerCase]) headersMap[headerKeyLowerCase] = []\n\n    if (!Array.isArray(headerValue)) {\n      headersMap[headerKeyLowerCase].push({\n        key: headerKeyLowerCase,\n        value: headerValue\n      })\n      return\n    }\n\n    const headersArray = headerValue.map(v => ({\n      key: headerKeyLowerCase,\n      value: v\n    }))\n    headersMap[headerKeyLowerCase].push(...headersArray)\n  })\n  const bodyEncoding = isBase64Encoded ? 'base64' : 'text'\n  const responseToService = {\n    status: statusCode,\n    body,\n    headers: headersMap,\n    bodyEncoding\n  }\n\n  // TODO: Handle if responseToServiceBytes exceeds Lambda@Edge limits\n  // const responseToServiceBytes = (new TextEncoder().encode(JSON.stringify(responseToService))).length\n\n  return responseToService\n}\n\nmodule.exports = {\n  getRequest: getRequestValuesFromLambdaEdgeEvent,\n  getResponse: getResponseToLambdaEdge\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}