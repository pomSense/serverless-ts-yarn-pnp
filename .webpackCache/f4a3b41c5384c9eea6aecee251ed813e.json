{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.shield = void 0;\nconst hash = require(\"object-hash\");\nconst graphql_middleware_1 = require(\"graphql-middleware\");\nconst validation_1 = require(\"./validation\");\nconst generator_1 = require(\"./generator\");\nconst constructors_1 = require(\"./constructors\");\nconst utils_1 = require(\"./utils\");\n/**\n *\n * @param options\n *\n * Makes sure all of defined rules are in accord with the options\n * shield can process.\n *\n */\nfunction normalizeOptions(options) {\n  if (typeof options.fallbackError === 'string') {\n    options.fallbackError = new Error(options.fallbackError);\n  }\n  return {\n    debug: options.debug !== undefined ? options.debug : false,\n    allowExternalErrors: utils_1.withDefault(false)(options.allowExternalErrors),\n    fallbackRule: utils_1.withDefault(constructors_1.allow)(options.fallbackRule),\n    fallbackError: utils_1.withDefault(new Error('Not Authorised!'))(options.fallbackError),\n    hashFunction: utils_1.withDefault(hash)(options.hashFunction)\n  };\n}\n/**\n *\n * @param ruleTree\n * @param options\n *\n * Validates rules and generates middleware from defined rule tree.\n *\n */\nfunction shield(ruleTree, options = {}) {\n  const normalizedOptions = normalizeOptions(options);\n  const ruleTreeValidity = validation_1.validateRuleTree(ruleTree);\n  if (ruleTreeValidity.status === 'ok') {\n    const generatorFunction = generator_1.generateMiddlewareGeneratorFromRuleTree(ruleTree, normalizedOptions);\n    return graphql_middleware_1.middleware(generatorFunction);\n  } else {\n    throw new validation_1.ValidationError(ruleTreeValidity.message);\n  }\n}\nexports.shield = shield;","map":{"version":3,"mappings":";;;;;;AAAA,MAAAA,IAAA,GAAAC,OAAA;AACA,MAAAC,oBAAA,GAAAD,OAAA;AACA,MAAAE,YAAA,GAAAF,OAAA;AASA,MAAAG,WAAA,GAAAH,OAAA;AACA,MAAAI,cAAA,GAAAJ,OAAA;AACA,MAAAK,OAAA,GAAAL,OAAA;AAEA;;;;;;;;AAQA,SAASM,gBAAgBA,CAACC,OAA4B;EACpD,IAAI,OAAOA,OAAO,CAACC,aAAa,KAAK,QAAQ,EAAE;IAC7CD,OAAO,CAACC,aAAa,GAAG,IAAIC,KAAK,CAACF,OAAO,CAACC,aAAa,CAAC;;EAG1D,OAAO;IACLE,KAAK,EAAEH,OAAO,CAACG,KAAK,KAAKC,SAAS,GAAGJ,OAAO,CAACG,KAAK,GAAG,KAAK;IAC1DE,mBAAmB,EAAEP,OAAA,CAAAQ,WAAW,CAAC,KAAK,CAAC,CAACN,OAAO,CAACK,mBAAmB,CAAC;IACpEE,YAAY,EAAET,OAAA,CAAAQ,WAAW,CAAaT,cAAA,CAAAW,KAAK,CAAC,CAACR,OAAO,CAACO,YAAY,CAAC;IAClEN,aAAa,EAAEH,OAAA,CAAAQ,WAAW,CACxB,IAAIJ,KAAK,CAAC,iBAAiB,CAAC,CAC7B,CAACF,OAAO,CAACC,aAAa,CAAC;IACxBQ,YAAY,EAAEX,OAAA,CAAAQ,WAAW,CAAgBd,IAAI,CAAC,CAACQ,OAAO,CAACS,YAAY;GACpE;AACH;AAEA;;;;;;;;AAQA,SAAgBC,MAAMA,CACpBC,QAAgB,EAChBX,OAAA,GAA+B,EAAE;EAEjC,MAAMY,iBAAiB,GAAGb,gBAAgB,CAACC,OAAO,CAAC;EACnD,MAAMa,gBAAgB,GAAGlB,YAAA,CAAAmB,gBAAgB,CAACH,QAAQ,CAAC;EAEnD,IAAIE,gBAAgB,CAACE,MAAM,KAAK,IAAI,EAAE;IACpC,MAAMC,iBAAiB,GAAGpB,WAAA,CAAAqB,uCAAuC,CAI/DN,QAAQ,EAAEC,iBAAiB,CAAC;IAE9B,OAAOlB,oBAAA,CAAAwB,UAAU,CAACF,iBAAiB,CAAC;GACrC,MAAM;IACL,MAAM,IAAIrB,YAAA,CAAAwB,eAAe,CAACN,gBAAgB,CAACO,OAAO,CAAC;;AAEvD;AAlBAC,OAAA,CAAAX,MAAA,GAAAA,MAAA","names":["hash","require","graphql_middleware_1","validation_1","generator_1","constructors_1","utils_1","normalizeOptions","options","fallbackError","Error","debug","undefined","allowExternalErrors","withDefault","fallbackRule","allow","hashFunction","shield","ruleTree","normalizedOptions","ruleTreeValidity","validateRuleTree","status","generatorFunction","generateMiddlewareGeneratorFromRuleTree","middleware","ValidationError","message","exports"],"sourceRoot":"","sources":["../src/shield.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}