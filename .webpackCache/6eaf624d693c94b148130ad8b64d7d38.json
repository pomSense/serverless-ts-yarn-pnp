{"ast":null,"code":"\"use strict\";\n\n// ATTRIBUTION: https://github.com/dougmoscrop/serverless-http\nconst {\n  DEFAULT_BINARY_ENCODINGS,\n  DEFAULT_BINARY_CONTENT_TYPES\n} = require('./constants');\nfunction isContentEncodingBinary({\n  headers,\n  binaryEncodingTypes\n}) {\n  const contentEncoding = headers['content-encoding'];\n  if (typeof contentEncoding !== 'string') return false;\n  return contentEncoding.split(',').some(value => binaryEncodingTypes.some(binaryEncoding => value.includes(binaryEncoding)));\n}\nfunction getContentType({\n  headers\n}) {\n  const contentTypeHeader = headers['content-type'] || '';\n\n  // only compare mime type; ignore encoding part\n  return contentTypeHeader.split(';')[0];\n}\nfunction isContentTypeBinary({\n  headers,\n  binaryContentTypes\n}) {\n  if (!binaryContentTypes || !Array.isArray(binaryContentTypes)) return false;\n  const binaryContentTypesRegexes = binaryContentTypes.map(binaryContentType => new RegExp(`^${binaryContentType.replace(/\\*/g, '.*')}$`));\n  const contentType = getContentType({\n    headers\n  });\n  if (!contentType) return false;\n  return binaryContentTypesRegexes.some(binaryContentType => binaryContentType.test(contentType));\n}\nmodule.exports = function isBinary({\n  headers,\n  binarySettings\n}) {\n  if (binarySettings.isBinary === false) {\n    return false;\n  }\n  if (typeof binarySettings.isBinary === 'function') {\n    return binarySettings.isBinary({\n      headers\n    });\n  }\n  const binaryEncodingTypes = binarySettings.contentEncodings || DEFAULT_BINARY_ENCODINGS;\n  const binaryContentTypes = binarySettings.contentTypes || DEFAULT_BINARY_CONTENT_TYPES;\n  return isContentEncodingBinary({\n    headers,\n    binaryEncodingTypes\n  }) || isContentTypeBinary({\n    headers,\n    binaryContentTypes\n  });\n};","map":{"version":3,"names":["DEFAULT_BINARY_ENCODINGS","DEFAULT_BINARY_CONTENT_TYPES","require","isContentEncodingBinary","headers","binaryEncodingTypes","contentEncoding","split","some","value","binaryEncoding","includes","getContentType","contentTypeHeader","isContentTypeBinary","binaryContentTypes","Array","isArray","binaryContentTypesRegexes","map","binaryContentType","RegExp","replace","contentType","test","module","exports","isBinary","binarySettings","contentEncodings","contentTypes"],"sources":["/Users/pom/Code/serverless-ts-yarn-pnp/.yarn/cache/@vendia-serverless-express-npm-4.10.4-2e67e59920-f33d3f0f08.zip/node_modules/@vendia/serverless-express/src/is-binary.js"],"sourcesContent":["// ATTRIBUTION: https://github.com/dougmoscrop/serverless-http\nconst { DEFAULT_BINARY_ENCODINGS, DEFAULT_BINARY_CONTENT_TYPES } = require('./constants')\n\nfunction isContentEncodingBinary ({ headers, binaryEncodingTypes }) {\n  const contentEncoding = headers['content-encoding']\n\n  if (typeof contentEncoding !== 'string') return false\n\n  return contentEncoding\n    .split(',')\n    .some(value => binaryEncodingTypes.some(binaryEncoding => value.includes(binaryEncoding)))\n}\n\nfunction getContentType ({ headers }) {\n  const contentTypeHeader = headers['content-type'] || ''\n\n  // only compare mime type; ignore encoding part\n  return contentTypeHeader.split(';')[0]\n}\n\nfunction isContentTypeBinary ({ headers, binaryContentTypes }) {\n  if (!binaryContentTypes || !Array.isArray(binaryContentTypes)) return false\n\n  const binaryContentTypesRegexes = binaryContentTypes.map(binaryContentType => new RegExp(`^${binaryContentType.replace(/\\*/g, '.*')}$`))\n  const contentType = getContentType({ headers })\n\n  if (!contentType) return false\n\n  return binaryContentTypesRegexes.some(binaryContentType => binaryContentType.test(contentType))\n}\n\nmodule.exports = function isBinary ({ headers, binarySettings }) {\n  if (binarySettings.isBinary === false) {\n    return false\n  }\n\n  if (typeof binarySettings.isBinary === 'function') {\n    return binarySettings.isBinary({ headers })\n  }\n\n  const binaryEncodingTypes = binarySettings.contentEncodings || DEFAULT_BINARY_ENCODINGS\n  const binaryContentTypes = binarySettings.contentTypes || DEFAULT_BINARY_CONTENT_TYPES\n\n  return isContentEncodingBinary({ headers, binaryEncodingTypes }) ||\n    isContentTypeBinary({ headers, binaryContentTypes })\n}\n"],"mappings":";;AAAA;AACA,MAAM;EAAEA,wBAAwB;EAAEC;AAA6B,CAAC,GAAGC,OAAO,CAAC,aAAa,CAAC;AAEzF,SAASC,uBAAuBA,CAAE;EAAEC,OAAO;EAAEC;AAAoB,CAAC,EAAE;EAClE,MAAMC,eAAe,GAAGF,OAAO,CAAC,kBAAkB,CAAC;EAEnD,IAAI,OAAOE,eAAe,KAAK,QAAQ,EAAE,OAAO,KAAK;EAErD,OAAOA,eAAe,CACnBC,KAAK,CAAC,GAAG,CAAC,CACVC,IAAI,CAACC,KAAK,IAAIJ,mBAAmB,CAACG,IAAI,CAACE,cAAc,IAAID,KAAK,CAACE,QAAQ,CAACD,cAAc,CAAC,CAAC,CAAC;AAC9F;AAEA,SAASE,cAAcA,CAAE;EAAER;AAAQ,CAAC,EAAE;EACpC,MAAMS,iBAAiB,GAAGT,OAAO,CAAC,cAAc,CAAC,IAAI,EAAE;;EAEvD;EACA,OAAOS,iBAAiB,CAACN,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACxC;AAEA,SAASO,mBAAmBA,CAAE;EAAEV,OAAO;EAAEW;AAAmB,CAAC,EAAE;EAC7D,IAAI,CAACA,kBAAkB,IAAI,CAACC,KAAK,CAACC,OAAO,CAACF,kBAAkB,CAAC,EAAE,OAAO,KAAK;EAE3E,MAAMG,yBAAyB,GAAGH,kBAAkB,CAACI,GAAG,CAACC,iBAAiB,IAAI,IAAIC,MAAM,CAAE,IAAGD,iBAAiB,CAACE,OAAO,CAAC,KAAK,EAAE,IAAI,CAAE,GAAE,CAAC,CAAC;EACxI,MAAMC,WAAW,GAAGX,cAAc,CAAC;IAAER;EAAQ,CAAC,CAAC;EAE/C,IAAI,CAACmB,WAAW,EAAE,OAAO,KAAK;EAE9B,OAAOL,yBAAyB,CAACV,IAAI,CAACY,iBAAiB,IAAIA,iBAAiB,CAACI,IAAI,CAACD,WAAW,CAAC,CAAC;AACjG;AAEAE,MAAM,CAACC,OAAO,GAAG,SAASC,QAAQA,CAAE;EAAEvB,OAAO;EAAEwB;AAAe,CAAC,EAAE;EAC/D,IAAIA,cAAc,CAACD,QAAQ,KAAK,KAAK,EAAE;IACrC,OAAO,KAAK;EACd;EAEA,IAAI,OAAOC,cAAc,CAACD,QAAQ,KAAK,UAAU,EAAE;IACjD,OAAOC,cAAc,CAACD,QAAQ,CAAC;MAAEvB;IAAQ,CAAC,CAAC;EAC7C;EAEA,MAAMC,mBAAmB,GAAGuB,cAAc,CAACC,gBAAgB,IAAI7B,wBAAwB;EACvF,MAAMe,kBAAkB,GAAGa,cAAc,CAACE,YAAY,IAAI7B,4BAA4B;EAEtF,OAAOE,uBAAuB,CAAC;IAAEC,OAAO;IAAEC;EAAoB,CAAC,CAAC,IAC9DS,mBAAmB,CAAC;IAAEV,OAAO;IAAEW;EAAmB,CAAC,CAAC;AACxD,CAAC"},"metadata":{},"sourceType":"module"}