{"ast":null,"code":"\"use strict\";\n\nconst url = require('url');\nconst {\n  getRequestValuesFromEvent,\n  getMultiValueHeaders\n} = require('../utils');\nfunction getPathWithQueryStringUseUnescapeParams({\n  event,\n  // NOTE: Use `event.pathParameters.proxy` if available ({proxy+}); fall back to `event.path`\n  path = event.pathParameters && event.pathParameters.proxy && `/${event.pathParameters.proxy}` || event.path,\n  // NOTE: Strip base path for custom domains\n  stripBasePath = '',\n  replaceRegex = new RegExp(`^${stripBasePath}`)\n}) {\n  const query = {};\n  // decode everything back into utf-8 text.\n  if (event.multiValueQueryStringParameters) {\n    for (const key in event.multiValueQueryStringParameters) {\n      const formattedKey = decodeURIComponent(key);\n      query[formattedKey] = event.multiValueQueryStringParameters[key].map(value => decodeURIComponent(value));\n    }\n  } else {\n    for (const key in event.queryStringParameters) {\n      const formattedKey = decodeURIComponent(key);\n      query[formattedKey] = decodeURIComponent(event.queryStringParameters[key]);\n    }\n  }\n  return url.format({\n    pathname: path.replace(replaceRegex, ''),\n    query\n  });\n}\nconst getRequestValuesFromAlbEvent = ({\n  event\n}) => {\n  const values = getRequestValuesFromEvent({\n    event,\n    path: getPathWithQueryStringUseUnescapeParams({\n      event\n    })\n  });\n  return values;\n};\nconst getResponseToAlb = ({\n  event,\n  statusCode,\n  body,\n  headers: responseHeaders,\n  isBase64Encoded\n}) => {\n  const multiValueHeaders = !event.headers ? getMultiValueHeaders({\n    headers: responseHeaders\n  }) : undefined;\n  const headers = event.headers ? Object.entries(responseHeaders).reduce((acc, [k, v]) => {\n    acc[k] = Array.isArray(v) ? v[0] : v;\n    return acc;\n  }, {}) : undefined;\n  return {\n    statusCode,\n    body,\n    headers,\n    multiValueHeaders,\n    isBase64Encoded\n  };\n};\nmodule.exports = {\n  getRequest: getRequestValuesFromAlbEvent,\n  getResponse: getResponseToAlb\n};","map":{"version":3,"names":["url","require","getRequestValuesFromEvent","getMultiValueHeaders","getPathWithQueryStringUseUnescapeParams","event","path","pathParameters","proxy","stripBasePath","replaceRegex","RegExp","query","multiValueQueryStringParameters","key","formattedKey","decodeURIComponent","map","value","queryStringParameters","format","pathname","replace","getRequestValuesFromAlbEvent","values","getResponseToAlb","statusCode","body","headers","responseHeaders","isBase64Encoded","multiValueHeaders","undefined","Object","entries","reduce","acc","k","v","Array","isArray","module","exports","getRequest","getResponse"],"sources":["/Users/pom/Code/serverless-ts-yarn-pnp/.yarn/cache/@vendia-serverless-express-npm-4.10.4-2e67e59920-f33d3f0f08.zip/node_modules/@vendia/serverless-express/src/event-sources/aws/alb.js"],"sourcesContent":["const url = require('url')\nconst { getRequestValuesFromEvent, getMultiValueHeaders } = require('../utils')\n\nfunction getPathWithQueryStringUseUnescapeParams ({\n  event,\n  // NOTE: Use `event.pathParameters.proxy` if available ({proxy+}); fall back to `event.path`\n  path = (event.pathParameters && event.pathParameters.proxy && `/${event.pathParameters.proxy}`) || event.path,\n  // NOTE: Strip base path for custom domains\n  stripBasePath = '',\n  replaceRegex = new RegExp(`^${stripBasePath}`)\n}) {\n  const query = {}\n  // decode everything back into utf-8 text.\n  if (event.multiValueQueryStringParameters) {\n    for (const key in event.multiValueQueryStringParameters) {\n      const formattedKey = decodeURIComponent(key)\n      query[formattedKey] = event.multiValueQueryStringParameters[key].map(value => decodeURIComponent(value))\n    }\n  } else {\n    for (const key in event.queryStringParameters) {\n      const formattedKey = decodeURIComponent(key)\n      query[formattedKey] = decodeURIComponent(event.queryStringParameters[key])\n    }\n  }\n\n  return url.format({\n    pathname: path.replace(replaceRegex, ''),\n    query\n  })\n}\n\nconst getRequestValuesFromAlbEvent = ({ event }) => {\n  const values = getRequestValuesFromEvent({\n    event,\n    path: getPathWithQueryStringUseUnescapeParams({ event })\n  })\n  return values\n}\n\nconst getResponseToAlb = ({\n  event,\n  statusCode,\n  body,\n  headers: responseHeaders,\n  isBase64Encoded\n}) => {\n  const multiValueHeaders = !event.headers ? getMultiValueHeaders({ headers: responseHeaders }) : undefined\n  const headers = event.headers\n    ? Object.entries(responseHeaders).reduce((acc, [k, v]) => {\n      acc[k] = Array.isArray(v) ? v[0] : v\n      return acc\n    }, {})\n    : undefined\n\n  return {\n    statusCode,\n    body,\n    headers,\n    multiValueHeaders,\n    isBase64Encoded\n  }\n}\n\nmodule.exports = {\n  getRequest: getRequestValuesFromAlbEvent,\n  getResponse: getResponseToAlb\n}\n"],"mappings":";;AAAA,MAAMA,GAAG,GAAGC,OAAO,CAAC,KAAK,CAAC;AAC1B,MAAM;EAAEC,yBAAyB;EAAEC;AAAqB,CAAC,GAAGF,OAAO,CAAC,UAAU,CAAC;AAE/E,SAASG,uCAAuCA,CAAE;EAChDC,KAAK;EACL;EACAC,IAAI,GAAID,KAAK,CAACE,cAAc,IAAIF,KAAK,CAACE,cAAc,CAACC,KAAK,IAAK,IAAGH,KAAK,CAACE,cAAc,CAACC,KAAM,EAAC,IAAKH,KAAK,CAACC,IAAI;EAC7G;EACAG,aAAa,GAAG,EAAE;EAClBC,YAAY,GAAG,IAAIC,MAAM,CAAE,IAAGF,aAAc,EAAC;AAC/C,CAAC,EAAE;EACD,MAAMG,KAAK,GAAG,CAAC,CAAC;EAChB;EACA,IAAIP,KAAK,CAACQ,+BAA+B,EAAE;IACzC,KAAK,MAAMC,GAAG,IAAIT,KAAK,CAACQ,+BAA+B,EAAE;MACvD,MAAME,YAAY,GAAGC,kBAAkB,CAACF,GAAG,CAAC;MAC5CF,KAAK,CAACG,YAAY,CAAC,GAAGV,KAAK,CAACQ,+BAA+B,CAACC,GAAG,CAAC,CAACG,GAAG,CAACC,KAAK,IAAIF,kBAAkB,CAACE,KAAK,CAAC,CAAC;IAC1G;EACF,CAAC,MAAM;IACL,KAAK,MAAMJ,GAAG,IAAIT,KAAK,CAACc,qBAAqB,EAAE;MAC7C,MAAMJ,YAAY,GAAGC,kBAAkB,CAACF,GAAG,CAAC;MAC5CF,KAAK,CAACG,YAAY,CAAC,GAAGC,kBAAkB,CAACX,KAAK,CAACc,qBAAqB,CAACL,GAAG,CAAC,CAAC;IAC5E;EACF;EAEA,OAAOd,GAAG,CAACoB,MAAM,CAAC;IAChBC,QAAQ,EAAEf,IAAI,CAACgB,OAAO,CAACZ,YAAY,EAAE,EAAE,CAAC;IACxCE;EACF,CAAC,CAAC;AACJ;AAEA,MAAMW,4BAA4B,GAAGA,CAAC;EAAElB;AAAM,CAAC,KAAK;EAClD,MAAMmB,MAAM,GAAGtB,yBAAyB,CAAC;IACvCG,KAAK;IACLC,IAAI,EAAEF,uCAAuC,CAAC;MAAEC;IAAM,CAAC;EACzD,CAAC,CAAC;EACF,OAAOmB,MAAM;AACf,CAAC;AAED,MAAMC,gBAAgB,GAAGA,CAAC;EACxBpB,KAAK;EACLqB,UAAU;EACVC,IAAI;EACJC,OAAO,EAAEC,eAAe;EACxBC;AACF,CAAC,KAAK;EACJ,MAAMC,iBAAiB,GAAG,CAAC1B,KAAK,CAACuB,OAAO,GAAGzB,oBAAoB,CAAC;IAAEyB,OAAO,EAAEC;EAAgB,CAAC,CAAC,GAAGG,SAAS;EACzG,MAAMJ,OAAO,GAAGvB,KAAK,CAACuB,OAAO,GACzBK,MAAM,CAACC,OAAO,CAACL,eAAe,CAAC,CAACM,MAAM,CAAC,CAACC,GAAG,EAAE,CAACC,CAAC,EAAEC,CAAC,CAAC,KAAK;IACxDF,GAAG,CAACC,CAAC,CAAC,GAAGE,KAAK,CAACC,OAAO,CAACF,CAAC,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC,GAAGA,CAAC;IACpC,OAAOF,GAAG;EACZ,CAAC,EAAE,CAAC,CAAC,CAAC,GACJJ,SAAS;EAEb,OAAO;IACLN,UAAU;IACVC,IAAI;IACJC,OAAO;IACPG,iBAAiB;IACjBD;EACF,CAAC;AACH,CAAC;AAEDW,MAAM,CAACC,OAAO,GAAG;EACfC,UAAU,EAAEpB,4BAA4B;EACxCqB,WAAW,EAAEnB;AACf,CAAC"},"metadata":{},"sourceType":"module"}