{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nconst graphql = require('graphql');\nconst utils = require('./utils.js');\nfunction wrapResolverInMiddleware(resolver, middleware) {\n  return (parent, args, ctx, info) => middleware((_parent = parent, _args = args, _ctx = ctx, _info = info) => resolver(_parent, _args, _ctx, _info), parent, args, ctx, info);\n}\nfunction parseField(field) {\n  const {\n    isDeprecated,\n    ...restData\n  } = field;\n  const argsMap = field.args.reduce((acc, cur) => ({\n    ...acc,\n    [cur.name]: cur\n  }), {});\n  return {\n    ...restData,\n    args: argsMap\n  };\n}\nfunction applyMiddlewareToField(field, options, middleware) {\n  const parsedField = parseField(field);\n  if (utils.isMiddlewareWithFragment(middleware) && parsedField.resolve && parsedField.resolve !== graphql.defaultFieldResolver) {\n    return {\n      ...parsedField,\n      fragment: middleware.fragment,\n      fragments: middleware.fragments,\n      resolve: wrapResolverInMiddleware(parsedField.resolve, middleware.resolve)\n    };\n  } else if (utils.isMiddlewareWithFragment(middleware) && parsedField.subscribe) {\n    return {\n      ...parsedField,\n      fragment: middleware.fragment,\n      fragments: middleware.fragments,\n      subscribe: wrapResolverInMiddleware(parsedField.subscribe, middleware.resolve)\n    };\n  } else if (utils.isMiddlewareResolver(middleware) && parsedField.resolve && parsedField.resolve !== graphql.defaultFieldResolver) {\n    return {\n      ...parsedField,\n      resolve: wrapResolverInMiddleware(parsedField.resolve, middleware)\n    };\n  } else if (utils.isMiddlewareResolver(middleware) && parsedField.subscribe) {\n    return {\n      ...parsedField,\n      subscribe: wrapResolverInMiddleware(parsedField.subscribe, middleware)\n    };\n  } else if (utils.isMiddlewareWithFragment(middleware) && !options.onlyDeclaredResolvers) {\n    return {\n      ...parsedField,\n      fragment: middleware.fragment,\n      fragments: middleware.fragments,\n      resolve: wrapResolverInMiddleware(graphql.defaultFieldResolver, middleware.resolve)\n    };\n  } else if (utils.isMiddlewareResolver(middleware) && !options.onlyDeclaredResolvers) {\n    return {\n      ...parsedField,\n      resolve: wrapResolverInMiddleware(graphql.defaultFieldResolver, middleware)\n    };\n  } else {\n    return {\n      ...parsedField,\n      resolve: graphql.defaultFieldResolver\n    };\n  }\n}\nfunction applyMiddlewareToType(type, options, middleware) {\n  const fieldMap = type.getFields();\n  if (utils.isMiddlewareFunction(middleware)) {\n    const resolvers = Object.keys(fieldMap).reduce((resolvers2, fieldName) => ({\n      ...resolvers2,\n      [fieldName]: applyMiddlewareToField(fieldMap[fieldName], options, middleware)\n    }), {});\n    return resolvers;\n  } else {\n    const resolvers = Object.keys(middleware).reduce((resolvers2, field) => ({\n      ...resolvers2,\n      [field]: applyMiddlewareToField(fieldMap[field], options, middleware[field])\n    }), {});\n    return resolvers;\n  }\n}\nfunction applyMiddlewareToSchema(schema, options, middleware) {\n  const typeMap = schema.getTypeMap();\n  const resolvers = Object.keys(typeMap).filter(type => utils.isGraphQLObjectType(typeMap[type]) && !graphql.isIntrospectionType(typeMap[type])).reduce((resolvers2, type) => ({\n    ...resolvers2,\n    [type]: applyMiddlewareToType(typeMap[type], options, middleware)\n  }), {});\n  return resolvers;\n}\nfunction generateResolverFromSchemaAndMiddleware(schema, options, middleware) {\n  if (utils.isMiddlewareFunction(middleware)) {\n    return applyMiddlewareToSchema(schema, options, middleware);\n  } else {\n    const typeMap = schema.getTypeMap();\n    const resolvers = Object.keys(middleware).reduce((resolvers2, type) => ({\n      ...resolvers2,\n      [type]: applyMiddlewareToType(typeMap[type], options, middleware[type])\n    }), {});\n    return resolvers;\n  }\n}\nexports.generateResolverFromSchemaAndMiddleware = generateResolverFromSchemaAndMiddleware;","map":{"version":3,"names":["Object","defineProperty","exports","value","graphql","require","utils","wrapResolverInMiddleware","resolver","middleware","parent","args","ctx","info","_parent","_args","_ctx","_info","parseField","field","isDeprecated","restData","argsMap","reduce","acc","cur","name","applyMiddlewareToField","options","parsedField","isMiddlewareWithFragment","resolve","defaultFieldResolver","fragment","fragments","subscribe","isMiddlewareResolver","onlyDeclaredResolvers","applyMiddlewareToType","type","fieldMap","getFields","isMiddlewareFunction","resolvers","keys","resolvers2","fieldName","applyMiddlewareToSchema","schema","typeMap","getTypeMap","filter","isGraphQLObjectType","isIntrospectionType","generateResolverFromSchemaAndMiddleware"],"sources":["/Users/pom/Code/serverless-ts-yarn-pnp/.yarn/__virtual__/graphql-middleware-virtual-8e3b5d6992/0/cache/graphql-middleware-npm-6.1.21-7377367d5a-e7172dbe7c.zip/node_modules/graphql-middleware/dist/applicator.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nconst graphql = require('graphql');\nconst utils = require('./utils.js');\n\nfunction wrapResolverInMiddleware(resolver, middleware) {\n  return (parent, args, ctx, info) => middleware((_parent = parent, _args = args, _ctx = ctx, _info = info) => resolver(_parent, _args, _ctx, _info), parent, args, ctx, info);\n}\nfunction parseField(field) {\n  const { isDeprecated, ...restData } = field;\n  const argsMap = field.args.reduce((acc, cur) => ({\n    ...acc,\n    [cur.name]: cur\n  }), {});\n  return {\n    ...restData,\n    args: argsMap\n  };\n}\nfunction applyMiddlewareToField(field, options, middleware) {\n  const parsedField = parseField(field);\n  if (utils.isMiddlewareWithFragment(middleware) && parsedField.resolve && parsedField.resolve !== graphql.defaultFieldResolver) {\n    return {\n      ...parsedField,\n      fragment: middleware.fragment,\n      fragments: middleware.fragments,\n      resolve: wrapResolverInMiddleware(parsedField.resolve, middleware.resolve)\n    };\n  } else if (utils.isMiddlewareWithFragment(middleware) && parsedField.subscribe) {\n    return {\n      ...parsedField,\n      fragment: middleware.fragment,\n      fragments: middleware.fragments,\n      subscribe: wrapResolverInMiddleware(parsedField.subscribe, middleware.resolve)\n    };\n  } else if (utils.isMiddlewareResolver(middleware) && parsedField.resolve && parsedField.resolve !== graphql.defaultFieldResolver) {\n    return {\n      ...parsedField,\n      resolve: wrapResolverInMiddleware(parsedField.resolve, middleware)\n    };\n  } else if (utils.isMiddlewareResolver(middleware) && parsedField.subscribe) {\n    return {\n      ...parsedField,\n      subscribe: wrapResolverInMiddleware(parsedField.subscribe, middleware)\n    };\n  } else if (utils.isMiddlewareWithFragment(middleware) && !options.onlyDeclaredResolvers) {\n    return {\n      ...parsedField,\n      fragment: middleware.fragment,\n      fragments: middleware.fragments,\n      resolve: wrapResolverInMiddleware(graphql.defaultFieldResolver, middleware.resolve)\n    };\n  } else if (utils.isMiddlewareResolver(middleware) && !options.onlyDeclaredResolvers) {\n    return {\n      ...parsedField,\n      resolve: wrapResolverInMiddleware(graphql.defaultFieldResolver, middleware)\n    };\n  } else {\n    return { ...parsedField, resolve: graphql.defaultFieldResolver };\n  }\n}\nfunction applyMiddlewareToType(type, options, middleware) {\n  const fieldMap = type.getFields();\n  if (utils.isMiddlewareFunction(middleware)) {\n    const resolvers = Object.keys(fieldMap).reduce((resolvers2, fieldName) => ({\n      ...resolvers2,\n      [fieldName]: applyMiddlewareToField(fieldMap[fieldName], options, middleware)\n    }), {});\n    return resolvers;\n  } else {\n    const resolvers = Object.keys(middleware).reduce((resolvers2, field) => ({\n      ...resolvers2,\n      [field]: applyMiddlewareToField(fieldMap[field], options, middleware[field])\n    }), {});\n    return resolvers;\n  }\n}\nfunction applyMiddlewareToSchema(schema, options, middleware) {\n  const typeMap = schema.getTypeMap();\n  const resolvers = Object.keys(typeMap).filter((type) => utils.isGraphQLObjectType(typeMap[type]) && !graphql.isIntrospectionType(typeMap[type])).reduce((resolvers2, type) => ({\n    ...resolvers2,\n    [type]: applyMiddlewareToType(typeMap[type], options, middleware)\n  }), {});\n  return resolvers;\n}\nfunction generateResolverFromSchemaAndMiddleware(schema, options, middleware) {\n  if (utils.isMiddlewareFunction(middleware)) {\n    return applyMiddlewareToSchema(schema, options, middleware);\n  } else {\n    const typeMap = schema.getTypeMap();\n    const resolvers = Object.keys(middleware).reduce((resolvers2, type) => ({\n      ...resolvers2,\n      [type]: applyMiddlewareToType(typeMap[type], options, middleware[type])\n    }), {});\n    return resolvers;\n  }\n}\n\nexports.generateResolverFromSchemaAndMiddleware = generateResolverFromSchemaAndMiddleware;\n"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAE7D,MAAMC,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,KAAK,GAAGD,OAAO,CAAC,YAAY,CAAC;AAEnC,SAASE,wBAAwBA,CAACC,QAAQ,EAAEC,UAAU,EAAE;EACtD,OAAO,CAACC,MAAM,EAAEC,IAAI,EAAEC,GAAG,EAAEC,IAAI,KAAKJ,UAAU,CAAC,CAACK,OAAO,GAAGJ,MAAM,EAAEK,KAAK,GAAGJ,IAAI,EAAEK,IAAI,GAAGJ,GAAG,EAAEK,KAAK,GAAGJ,IAAI,KAAKL,QAAQ,CAACM,OAAO,EAAEC,KAAK,EAAEC,IAAI,EAAEC,KAAK,CAAC,EAAEP,MAAM,EAAEC,IAAI,EAAEC,GAAG,EAAEC,IAAI,CAAC;AAC9K;AACA,SAASK,UAAUA,CAACC,KAAK,EAAE;EACzB,MAAM;IAAEC,YAAY;IAAE,GAAGC;EAAS,CAAC,GAAGF,KAAK;EAC3C,MAAMG,OAAO,GAAGH,KAAK,CAACR,IAAI,CAACY,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,MAAM;IAC/C,GAAGD,GAAG;IACN,CAACC,GAAG,CAACC,IAAI,GAAGD;EACd,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EACP,OAAO;IACL,GAAGJ,QAAQ;IACXV,IAAI,EAAEW;EACR,CAAC;AACH;AACA,SAASK,sBAAsBA,CAACR,KAAK,EAAES,OAAO,EAAEnB,UAAU,EAAE;EAC1D,MAAMoB,WAAW,GAAGX,UAAU,CAACC,KAAK,CAAC;EACrC,IAAIb,KAAK,CAACwB,wBAAwB,CAACrB,UAAU,CAAC,IAAIoB,WAAW,CAACE,OAAO,IAAIF,WAAW,CAACE,OAAO,KAAK3B,OAAO,CAAC4B,oBAAoB,EAAE;IAC7H,OAAO;MACL,GAAGH,WAAW;MACdI,QAAQ,EAAExB,UAAU,CAACwB,QAAQ;MAC7BC,SAAS,EAAEzB,UAAU,CAACyB,SAAS;MAC/BH,OAAO,EAAExB,wBAAwB,CAACsB,WAAW,CAACE,OAAO,EAAEtB,UAAU,CAACsB,OAAO;IAC3E,CAAC;EACH,CAAC,MAAM,IAAIzB,KAAK,CAACwB,wBAAwB,CAACrB,UAAU,CAAC,IAAIoB,WAAW,CAACM,SAAS,EAAE;IAC9E,OAAO;MACL,GAAGN,WAAW;MACdI,QAAQ,EAAExB,UAAU,CAACwB,QAAQ;MAC7BC,SAAS,EAAEzB,UAAU,CAACyB,SAAS;MAC/BC,SAAS,EAAE5B,wBAAwB,CAACsB,WAAW,CAACM,SAAS,EAAE1B,UAAU,CAACsB,OAAO;IAC/E,CAAC;EACH,CAAC,MAAM,IAAIzB,KAAK,CAAC8B,oBAAoB,CAAC3B,UAAU,CAAC,IAAIoB,WAAW,CAACE,OAAO,IAAIF,WAAW,CAACE,OAAO,KAAK3B,OAAO,CAAC4B,oBAAoB,EAAE;IAChI,OAAO;MACL,GAAGH,WAAW;MACdE,OAAO,EAAExB,wBAAwB,CAACsB,WAAW,CAACE,OAAO,EAAEtB,UAAU;IACnE,CAAC;EACH,CAAC,MAAM,IAAIH,KAAK,CAAC8B,oBAAoB,CAAC3B,UAAU,CAAC,IAAIoB,WAAW,CAACM,SAAS,EAAE;IAC1E,OAAO;MACL,GAAGN,WAAW;MACdM,SAAS,EAAE5B,wBAAwB,CAACsB,WAAW,CAACM,SAAS,EAAE1B,UAAU;IACvE,CAAC;EACH,CAAC,MAAM,IAAIH,KAAK,CAACwB,wBAAwB,CAACrB,UAAU,CAAC,IAAI,CAACmB,OAAO,CAACS,qBAAqB,EAAE;IACvF,OAAO;MACL,GAAGR,WAAW;MACdI,QAAQ,EAAExB,UAAU,CAACwB,QAAQ;MAC7BC,SAAS,EAAEzB,UAAU,CAACyB,SAAS;MAC/BH,OAAO,EAAExB,wBAAwB,CAACH,OAAO,CAAC4B,oBAAoB,EAAEvB,UAAU,CAACsB,OAAO;IACpF,CAAC;EACH,CAAC,MAAM,IAAIzB,KAAK,CAAC8B,oBAAoB,CAAC3B,UAAU,CAAC,IAAI,CAACmB,OAAO,CAACS,qBAAqB,EAAE;IACnF,OAAO;MACL,GAAGR,WAAW;MACdE,OAAO,EAAExB,wBAAwB,CAACH,OAAO,CAAC4B,oBAAoB,EAAEvB,UAAU;IAC5E,CAAC;EACH,CAAC,MAAM;IACL,OAAO;MAAE,GAAGoB,WAAW;MAAEE,OAAO,EAAE3B,OAAO,CAAC4B;IAAqB,CAAC;EAClE;AACF;AACA,SAASM,qBAAqBA,CAACC,IAAI,EAAEX,OAAO,EAAEnB,UAAU,EAAE;EACxD,MAAM+B,QAAQ,GAAGD,IAAI,CAACE,SAAS,CAAC,CAAC;EACjC,IAAInC,KAAK,CAACoC,oBAAoB,CAACjC,UAAU,CAAC,EAAE;IAC1C,MAAMkC,SAAS,GAAG3C,MAAM,CAAC4C,IAAI,CAACJ,QAAQ,CAAC,CAACjB,MAAM,CAAC,CAACsB,UAAU,EAAEC,SAAS,MAAM;MACzE,GAAGD,UAAU;MACb,CAACC,SAAS,GAAGnB,sBAAsB,CAACa,QAAQ,CAACM,SAAS,CAAC,EAAElB,OAAO,EAAEnB,UAAU;IAC9E,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACP,OAAOkC,SAAS;EAClB,CAAC,MAAM;IACL,MAAMA,SAAS,GAAG3C,MAAM,CAAC4C,IAAI,CAACnC,UAAU,CAAC,CAACc,MAAM,CAAC,CAACsB,UAAU,EAAE1B,KAAK,MAAM;MACvE,GAAG0B,UAAU;MACb,CAAC1B,KAAK,GAAGQ,sBAAsB,CAACa,QAAQ,CAACrB,KAAK,CAAC,EAAES,OAAO,EAAEnB,UAAU,CAACU,KAAK,CAAC;IAC7E,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACP,OAAOwB,SAAS;EAClB;AACF;AACA,SAASI,uBAAuBA,CAACC,MAAM,EAAEpB,OAAO,EAAEnB,UAAU,EAAE;EAC5D,MAAMwC,OAAO,GAAGD,MAAM,CAACE,UAAU,CAAC,CAAC;EACnC,MAAMP,SAAS,GAAG3C,MAAM,CAAC4C,IAAI,CAACK,OAAO,CAAC,CAACE,MAAM,CAAEZ,IAAI,IAAKjC,KAAK,CAAC8C,mBAAmB,CAACH,OAAO,CAACV,IAAI,CAAC,CAAC,IAAI,CAACnC,OAAO,CAACiD,mBAAmB,CAACJ,OAAO,CAACV,IAAI,CAAC,CAAC,CAAC,CAAChB,MAAM,CAAC,CAACsB,UAAU,EAAEN,IAAI,MAAM;IAC7K,GAAGM,UAAU;IACb,CAACN,IAAI,GAAGD,qBAAqB,CAACW,OAAO,CAACV,IAAI,CAAC,EAAEX,OAAO,EAAEnB,UAAU;EAClE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EACP,OAAOkC,SAAS;AAClB;AACA,SAASW,uCAAuCA,CAACN,MAAM,EAAEpB,OAAO,EAAEnB,UAAU,EAAE;EAC5E,IAAIH,KAAK,CAACoC,oBAAoB,CAACjC,UAAU,CAAC,EAAE;IAC1C,OAAOsC,uBAAuB,CAACC,MAAM,EAAEpB,OAAO,EAAEnB,UAAU,CAAC;EAC7D,CAAC,MAAM;IACL,MAAMwC,OAAO,GAAGD,MAAM,CAACE,UAAU,CAAC,CAAC;IACnC,MAAMP,SAAS,GAAG3C,MAAM,CAAC4C,IAAI,CAACnC,UAAU,CAAC,CAACc,MAAM,CAAC,CAACsB,UAAU,EAAEN,IAAI,MAAM;MACtE,GAAGM,UAAU;MACb,CAACN,IAAI,GAAGD,qBAAqB,CAACW,OAAO,CAACV,IAAI,CAAC,EAAEX,OAAO,EAAEnB,UAAU,CAAC8B,IAAI,CAAC;IACxE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACP,OAAOI,SAAS;EAClB;AACF;AAEAzC,OAAO,CAACoD,uCAAuC,GAAGA,uCAAuC"},"metadata":{},"sourceType":"module"}