{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = undefined && undefined.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.processGraphQLRequest = exports.APQ_CACHE_PREFIX = void 0;\nconst graphql_1 = require(\"graphql\");\nconst schemaInstrumentation_1 = require(\"./utils/schemaInstrumentation\");\nconst apollo_server_errors_1 = require(\"apollo-server-errors\");\nconst dispatcher_1 = require(\"./utils/dispatcher\");\nconst utils_keyvaluecache_1 = require(\"@apollo/utils.keyvaluecache\");\nconst createSHA_1 = __importDefault(require(\"./utils/createSHA\"));\nconst runHttpQuery_1 = require(\"./runHttpQuery\");\nconst apollo_server_env_1 = require(\"apollo-server-env\");\nexports.APQ_CACHE_PREFIX = 'apq:';\nfunction computeQueryHash(query) {\n  return (0, createSHA_1.default)('sha256').update(query).digest('hex');\n}\nfunction isBadUserInputGraphQLError(error) {\n  var _a;\n  return ((_a = error.nodes) === null || _a === void 0 ? void 0 : _a.length) === 1 && error.nodes[0].kind === graphql_1.Kind.VARIABLE_DEFINITION && (error.message.startsWith(`Variable \"$${error.nodes[0].variable.name.value}\" got invalid value `) || error.message.startsWith(`Variable \"$${error.nodes[0].variable.name.value}\" of required type `) || error.message.startsWith(`Variable \"$${error.nodes[0].variable.name.value}\" of non-null type `));\n}\nasync function processGraphQLRequest(config, requestContext) {\n  var _a, _b;\n  const logger = requestContext.logger || console;\n  const metrics = requestContext.metrics = requestContext.metrics || Object.create(null);\n  const dispatcher = await initializeRequestListenerDispatcher();\n  await initializeDataSources();\n  const request = requestContext.request;\n  let {\n    query,\n    extensions\n  } = request;\n  let queryHash;\n  let persistedQueryCache;\n  metrics.persistedQueryHit = false;\n  metrics.persistedQueryRegister = false;\n  if (extensions === null || extensions === void 0 ? void 0 : extensions.persistedQuery) {\n    if (!config.persistedQueries || !config.persistedQueries.cache) {\n      return await sendErrorResponse(new apollo_server_errors_1.PersistedQueryNotSupportedError());\n    } else if (extensions.persistedQuery.version !== 1) {\n      return await sendErrorResponse(new graphql_1.GraphQLError('Unsupported persisted query version'));\n    }\n    persistedQueryCache = config.persistedQueries.cache;\n    if (!(persistedQueryCache instanceof utils_keyvaluecache_1.PrefixingKeyValueCache)) {\n      persistedQueryCache = new utils_keyvaluecache_1.PrefixingKeyValueCache(persistedQueryCache, exports.APQ_CACHE_PREFIX);\n    }\n    queryHash = extensions.persistedQuery.sha256Hash;\n    if (query === undefined) {\n      query = await persistedQueryCache.get(queryHash);\n      if (query) {\n        metrics.persistedQueryHit = true;\n      } else {\n        return await sendErrorResponse(new apollo_server_errors_1.PersistedQueryNotFoundError());\n      }\n    } else {\n      const computedQueryHash = computeQueryHash(query);\n      if (queryHash !== computedQueryHash) {\n        return await sendErrorResponse(new graphql_1.GraphQLError('provided sha does not match query'));\n      }\n      metrics.persistedQueryRegister = true;\n    }\n  } else if (query) {\n    queryHash = computeQueryHash(query);\n  } else {\n    return await sendErrorResponse(new graphql_1.GraphQLError('GraphQL operations must contain a non-empty `query` or a `persistedQuery` extension.'));\n  }\n  requestContext.queryHash = queryHash;\n  requestContext.source = query;\n  await dispatcher.invokeHook('didResolveSource', requestContext);\n  if (config.documentStore) {\n    try {\n      requestContext.document = await config.documentStore.get(queryHash);\n    } catch (err) {\n      logger.warn('An error occurred while attempting to read from the documentStore. ' + (err === null || err === void 0 ? void 0 : err.message) || err);\n    }\n  }\n  if (!requestContext.document) {\n    const parsingDidEnd = await dispatcher.invokeDidStartHook('parsingDidStart', requestContext);\n    try {\n      requestContext.document = parse(query, config.parseOptions);\n      await parsingDidEnd();\n    } catch (syntaxError) {\n      await parsingDidEnd(syntaxError);\n      return await sendErrorResponse(syntaxError, apollo_server_errors_1.SyntaxError);\n    }\n    const validationDidEnd = await dispatcher.invokeDidStartHook('validationDidStart', requestContext);\n    const validationErrors = validate(requestContext.document);\n    if (validationErrors.length === 0) {\n      await validationDidEnd();\n    } else {\n      await validationDidEnd(validationErrors);\n      return await sendErrorResponse(validationErrors, apollo_server_errors_1.ValidationError);\n    }\n    if (config.documentStore) {\n      Promise.resolve(config.documentStore.set(queryHash, requestContext.document)).catch(err => logger.warn('Could not store validated document. ' + (err === null || err === void 0 ? void 0 : err.message) || err));\n    }\n  }\n  const operation = (0, graphql_1.getOperationAST)(requestContext.document, request.operationName);\n  requestContext.operation = operation || undefined;\n  requestContext.operationName = ((_a = operation === null || operation === void 0 ? void 0 : operation.name) === null || _a === void 0 ? void 0 : _a.value) || null;\n  try {\n    await dispatcher.invokeHook('didResolveOperation', requestContext);\n  } catch (err) {\n    return await sendErrorResponse(err);\n  }\n  if (metrics.persistedQueryRegister && persistedQueryCache) {\n    Promise.resolve(persistedQueryCache.set(queryHash, query, config.persistedQueries && typeof config.persistedQueries.ttl !== 'undefined' ? {\n      ttl: config.persistedQueries.ttl\n    } : Object.create(null))).catch(logger.warn);\n  }\n  let response = await dispatcher.invokeHooksUntilNonNull('responseForOperation', requestContext);\n  if (response == null) {\n    const executionListeners = [];\n    (await dispatcher.invokeHook('executionDidStart', requestContext)).forEach(executionListener => {\n      if (executionListener) {\n        executionListeners.push(executionListener);\n      }\n    });\n    executionListeners.reverse();\n    const executionDispatcher = new dispatcher_1.Dispatcher(executionListeners);\n    if (executionDispatcher.hasHook('willResolveField')) {\n      const invokeWillResolveField = (...args) => executionDispatcher.invokeSyncDidStartHook('willResolveField', ...args);\n      Object.defineProperty(requestContext.context, schemaInstrumentation_1.symbolExecutionDispatcherWillResolveField, {\n        value: invokeWillResolveField\n      });\n      if (config.fieldResolver) {\n        Object.defineProperty(requestContext.context, schemaInstrumentation_1.symbolUserFieldResolver, {\n          value: config.fieldResolver\n        });\n      }\n      (0, schemaInstrumentation_1.enablePluginsForSchemaResolvers)(config.schema);\n    }\n    try {\n      const result = await execute(requestContext);\n      const resultErrors = (_b = result.errors) === null || _b === void 0 ? void 0 : _b.map(e => {\n        if (isBadUserInputGraphQLError(e)) {\n          return (0, apollo_server_errors_1.fromGraphQLError)(e, {\n            errorClass: apollo_server_errors_1.UserInputError\n          });\n        }\n        return e;\n      });\n      if (resultErrors) {\n        await didEncounterErrors(resultErrors);\n      }\n      response = {\n        ...result,\n        errors: resultErrors ? formatErrors(resultErrors) : undefined\n      };\n      await executionDispatcher.invokeHook('executionDidEnd');\n    } catch (executionError) {\n      await executionDispatcher.invokeHook('executionDidEnd', executionError);\n      return await sendErrorResponse(executionError);\n    }\n  }\n  if (config.formatResponse) {\n    const formattedResponse = config.formatResponse(response, requestContext);\n    if (formattedResponse != null) {\n      response = formattedResponse;\n    }\n  }\n  return sendResponse(response);\n  function parse(query, parseOptions) {\n    return (0, graphql_1.parse)(query, parseOptions);\n  }\n  function validate(document) {\n    let rules = graphql_1.specifiedRules;\n    if (config.validationRules) {\n      rules = rules.concat(config.validationRules);\n    }\n    return (0, graphql_1.validate)(config.schema, document, rules);\n  }\n  async function execute(requestContext) {\n    const {\n      request,\n      document\n    } = requestContext;\n    const executionArgs = {\n      schema: config.schema,\n      document,\n      rootValue: typeof config.rootValue === 'function' ? config.rootValue(document) : config.rootValue,\n      contextValue: requestContext.context,\n      variableValues: request.variables,\n      operationName: request.operationName,\n      fieldResolver: config.fieldResolver\n    };\n    if (config.executor) {\n      return await config.executor(requestContext);\n    } else {\n      return await (0, graphql_1.execute)(executionArgs);\n    }\n  }\n  async function sendResponse(response) {\n    requestContext.response = {\n      ...requestContext.response,\n      errors: response.errors,\n      data: response.data,\n      extensions: response.extensions\n    };\n    if (response.http) {\n      if (!requestContext.response.http) {\n        requestContext.response.http = {\n          headers: new apollo_server_env_1.Headers()\n        };\n      }\n      if (response.http.status) {\n        requestContext.response.http.status = response.http.status;\n      }\n      for (const [name, value] of response.http.headers) {\n        requestContext.response.http.headers.set(name, value);\n      }\n    }\n    await dispatcher.invokeHook('willSendResponse', requestContext);\n    return requestContext.response;\n  }\n  async function didEncounterErrors(errors) {\n    requestContext.errors = errors;\n    return await dispatcher.invokeHook('didEncounterErrors', requestContext);\n  }\n  async function sendErrorResponse(errorOrErrors, errorClass) {\n    const errors = Array.isArray(errorOrErrors) ? errorOrErrors : [errorOrErrors];\n    await didEncounterErrors(errors);\n    const response = {\n      errors: formatErrors(errors.map(err => err instanceof apollo_server_errors_1.ApolloError && !errorClass ? err : (0, apollo_server_errors_1.fromGraphQLError)(err, errorClass && {\n        errorClass\n      })))\n    };\n    if (errors.every(err => err instanceof apollo_server_errors_1.PersistedQueryNotSupportedError || err instanceof apollo_server_errors_1.PersistedQueryNotFoundError)) {\n      response.http = {\n        status: 200,\n        headers: new apollo_server_env_1.Headers({\n          'Cache-Control': 'private, no-cache, must-revalidate'\n        })\n      };\n    } else if (errors.length === 1 && errors[0] instanceof runHttpQuery_1.HttpQueryError) {\n      response.http = {\n        status: errors[0].statusCode,\n        headers: new apollo_server_env_1.Headers(errors[0].headers)\n      };\n    }\n    return sendResponse(response);\n  }\n  function formatErrors(errors) {\n    return (0, apollo_server_errors_1.formatApolloErrors)(errors, {\n      formatter: config.formatError,\n      debug: requestContext.debug\n    });\n  }\n  async function initializeRequestListenerDispatcher() {\n    const requestListeners = [];\n    if (config.plugins) {\n      for (const plugin of config.plugins) {\n        if (!plugin.requestDidStart) continue;\n        const listener = await plugin.requestDidStart(requestContext);\n        if (listener) {\n          requestListeners.push(listener);\n        }\n      }\n    }\n    return new dispatcher_1.Dispatcher(requestListeners);\n  }\n  async function initializeDataSources() {\n    if (config.dataSources) {\n      const context = requestContext.context;\n      const dataSources = config.dataSources();\n      const initializers = [];\n      for (const dataSource of Object.values(dataSources)) {\n        if (dataSource.initialize) {\n          initializers.push(dataSource.initialize({\n            context,\n            cache: requestContext.cache\n          }));\n        }\n      }\n      await Promise.all(initializers);\n      if ('dataSources' in context) {\n        throw new Error('Please use the dataSources config option instead of putting dataSources on the context yourself.');\n      }\n      context.dataSources = dataSources;\n    }\n  }\n}\nexports.processGraphQLRequest = processGraphQLRequest;","map":{"version":3,"mappings":";;;;;;;;;;;AAAA,MAAAA,SAAA,GAAAC,OAAA;AAiBA,MAAAC,uBAAA,GAAAD,OAAA;AAKA,MAAAE,sBAAA,GAAAF,OAAA;AAiCA,MAAAG,YAAA,GAAAH,OAAA;AACA,MAAAI,qBAAA,GAAAJ,OAAA;AAOA,MAAAK,WAAA,GAAAC,eAAA,CAAAN,OAAA;AACA,MAAAO,cAAA,GAAAP,OAAA;AAEA,MAAAQ,mBAAA,GAAAR,OAAA;AAEaS,OAAA,CAAAC,gBAAgB,GAAG,MAAM;AAEtC,SAASC,gBAAgBA,CAACC,KAAa;EACrC,OAAO,IAAAP,WAAA,CAAAQ,OAAS,EAAC,QAAQ,CAAC,CAACC,MAAM,CAACF,KAAK,CAAC,CAACG,MAAM,CAAC,KAAK,CAAC;AACxD;AAgCA,SAASC,0BAA0BA,CAACC,KAAmB;;EACrD,OACE,EAAAC,EAAA,GAAAD,KAAK,CAACE,KAAK,cAAAD,EAAA,uBAAAA,EAAA,CAAEE,MAAM,MAAK,CAAC,IACzBH,KAAK,CAACE,KAAK,CAAC,CAAC,CAAC,CAACE,IAAI,KAAKtB,SAAA,CAAAuB,IAAI,CAACC,mBAAmB,KAC/CN,KAAK,CAACO,OAAO,CAACC,UAAU,CACvB,cAAcR,KAAK,CAACE,KAAK,CAAC,CAAC,CAAC,CAACO,QAAQ,CAACC,IAAI,CAACC,KAAK,sBAAsB,CACvE,IACCX,KAAK,CAACO,OAAO,CAACC,UAAU,CACtB,cAAcR,KAAK,CAACE,KAAK,CAAC,CAAC,CAAC,CAACO,QAAQ,CAACC,IAAI,CAACC,KAAK,qBAAqB,CACtE,IACDX,KAAK,CAACO,OAAO,CAACC,UAAU,CACtB,cAAcR,KAAK,CAACE,KAAK,CAAC,CAAC,CAAC,CAACO,QAAQ,CAACC,IAAI,CAACC,KAAK,qBAAqB,CACtE,CAAC;AAER;AAEO,eAAeC,qBAAqBA,CACzCC,MAA8C,EAC9CC,cAAwD;;EAKxD,MAAMC,MAAM,GAAGD,cAAc,CAACC,MAAM,IAAIC,OAAO;EAI/C,MAAMC,OAAO,GAAIH,cAAc,CAACG,OAAO,GACrCH,cAAc,CAACG,OAAO,IAAIC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAE;EAEhD,MAAMC,UAAU,GAAG,MAAMC,mCAAmC,EAAE;EAC9D,MAAMC,qBAAqB,EAAE;EAE7B,MAAMC,OAAO,GAAGT,cAAc,CAACS,OAAO;EAEtC,IAAI;IAAE5B,KAAK;IAAE6B;EAAU,CAAE,GAAGD,OAAO;EAEnC,IAAIE,SAAiB;EAErB,IAAIC,mBAA8C;EAClDT,OAAO,CAACU,iBAAiB,GAAG,KAAK;EACjCV,OAAO,CAACW,sBAAsB,GAAG,KAAK;EAEtC,IAAIJ,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEK,cAAc,EAAE;IAG9B,IAAI,CAAChB,MAAM,CAACiB,gBAAgB,IAAI,CAACjB,MAAM,CAACiB,gBAAgB,CAACC,KAAK,EAAE;MAC9D,OAAO,MAAMC,iBAAiB,CAAC,IAAI/C,sBAAA,CAAAgD,+BAA+B,EAAE,CAAC;KACtE,MAAM,IAAIT,UAAU,CAACK,cAAc,CAACK,OAAO,KAAK,CAAC,EAAE;MAClD,OAAO,MAAMF,iBAAiB,CAC5B,IAAIlD,SAAA,CAAAqD,YAAY,CAAC,qCAAqC,CAAC,CACxD;;IAKHT,mBAAmB,GAAGb,MAAM,CAACiB,gBAAgB,CAACC,KAAK;IAMnD,IAAI,EAAEL,mBAAmB,YAAYvC,qBAAA,CAAAiD,sBAAsB,CAAC,EAAE;MAC5DV,mBAAmB,GAAG,IAAIvC,qBAAA,CAAAiD,sBAAsB,CAC9CV,mBAAmB,EACnBlC,OAAA,CAAAC,gBAAgB,CACjB;;IAGHgC,SAAS,GAAGD,UAAU,CAACK,cAAc,CAACQ,UAAU;IAEhD,IAAI1C,KAAK,KAAK2C,SAAS,EAAE;MACvB3C,KAAK,GAAG,MAAM+B,mBAAmB,CAACa,GAAG,CAACd,SAAS,CAAC;MAChD,IAAI9B,KAAK,EAAE;QACTsB,OAAO,CAACU,iBAAiB,GAAG,IAAI;OACjC,MAAM;QACL,OAAO,MAAMK,iBAAiB,CAAC,IAAI/C,sBAAA,CAAAuD,2BAA2B,EAAE,CAAC;;KAEpE,MAAM;MACL,MAAMC,iBAAiB,GAAG/C,gBAAgB,CAACC,KAAK,CAAC;MAMjD,IAAI8B,SAAS,KAAKgB,iBAAiB,EAAE;QACnC,OAAO,MAAMT,iBAAiB,CAC5B,IAAIlD,SAAA,CAAAqD,YAAY,CAAC,mCAAmC,CAAC,CACtD;;MAOHlB,OAAO,CAACW,sBAAsB,GAAG,IAAI;;GAExC,MAAM,IAAIjC,KAAK,EAAE;IAGhB8B,SAAS,GAAG/B,gBAAgB,CAACC,KAAK,CAAC;GACpC,MAAM;IACL,OAAO,MAAMqC,iBAAiB,CAC5B,IAAIlD,SAAA,CAAAqD,YAAY,CACd,sFAAsF,CACvF,CACF;;EAGHrB,cAAc,CAACW,SAAS,GAAGA,SAAS;EACpCX,cAAc,CAAC4B,MAAM,GAAG/C,KAAK;EAO7B,MAAMyB,UAAU,CAACuB,UAAU,CACzB,kBAAkB,EAClB7B,cAAiE,CAClE;EAMD,IAAID,MAAM,CAAC+B,aAAa,EAAE;IACxB,IAAI;MACF9B,cAAc,CAAC+B,QAAQ,GAAG,MAAMhC,MAAM,CAAC+B,aAAa,CAACL,GAAG,CAACd,SAAS,CAAC;KACpE,CAAC,OAAOqB,GAAG,EAAE;MACZ/B,MAAM,CAACgC,IAAI,CACT,qEAAqE,IAClED,GAAa,aAAbA,GAAG,uBAAHA,GAAG,CAAYvC,OAAO,KAAIuC,GAAG,CACjC;;;EAML,IAAI,CAAChC,cAAc,CAAC+B,QAAQ,EAAE;IAC5B,MAAMG,aAAa,GAAG,MAAM5B,UAAU,CAAC6B,kBAAkB,CACvD,iBAAiB,EACjBnC,cAAgE,CACjE;IAED,IAAI;MACFA,cAAc,CAAC+B,QAAQ,GAAGK,KAAK,CAACvD,KAAK,EAAEkB,MAAM,CAACsC,YAAY,CAAC;MAC3D,MAAMH,aAAa,EAAE;KACtB,CAAC,OAAOI,WAAW,EAAE;MACpB,MAAMJ,aAAa,CAACI,WAAoB,CAAC;MAGzC,OAAO,MAAMpB,iBAAiB,CAACoB,WAA2B,EAAEnE,sBAAA,CAAAoE,WAAW,CAAC;;IAG1E,MAAMC,gBAAgB,GAAG,MAAMlC,UAAU,CAAC6B,kBAAkB,CAC1D,oBAAoB,EACpBnC,cAAmE,CACpE;IAED,MAAMyC,gBAAgB,GAAGC,QAAQ,CAAC1C,cAAc,CAAC+B,QAAQ,CAAC;IAE1D,IAAIU,gBAAgB,CAACpD,MAAM,KAAK,CAAC,EAAE;MACjC,MAAMmD,gBAAgB,EAAE;KACzB,MAAM;MACL,MAAMA,gBAAgB,CAACC,gBAAgB,CAAC;MACxC,OAAO,MAAMvB,iBAAiB,CAACuB,gBAAgB,EAAEtE,sBAAA,CAAAwE,eAAe,CAAC;;IAGnE,IAAI5C,MAAM,CAAC+B,aAAa,EAAE;MAaxBc,OAAO,CAACC,OAAO,CACb9C,MAAM,CAAC+B,aAAa,CAACgB,GAAG,CAACnC,SAAS,EAAEX,cAAc,CAAC+B,QAAQ,CAAC,CAC7D,CAACgB,KAAK,CAAEf,GAAG,IACV/B,MAAM,CAACgC,IAAI,CACT,sCAAsC,IAAGD,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEvC,OAAO,KAAIuC,GAAG,CAC7D,CACF;;;EAQL,MAAMgB,SAAS,GAAG,IAAAhF,SAAA,CAAAiF,eAAe,EAC/BjD,cAAc,CAAC+B,QAAQ,EACvBtB,OAAO,CAACyC,aAAa,CACtB;EAEDlD,cAAc,CAACgD,SAAS,GAAGA,SAAS,IAAIxB,SAAS;EAEjDxB,cAAc,CAACkD,aAAa,GAAG,EAAA/D,EAAA,GAAA6D,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEpD,IAAI,cAAAT,EAAA,uBAAAA,EAAA,CAAEU,KAAK,KAAI,IAAI;EAE7D,IAAI;IACF,MAAMS,UAAU,CAACuB,UAAU,CACzB,qBAAqB,EACrB7B,cAAoE,CACrE;GACF,CAAC,OAAOgC,GAAG,EAAE;IAGZ,OAAO,MAAMd,iBAAiB,CAACc,GAAmB,CAAC;;EAOrD,IAAI7B,OAAO,CAACW,sBAAsB,IAAIF,mBAAmB,EAAE;IAIzDgC,OAAO,CAACC,OAAO,CACbjC,mBAAmB,CAACkC,GAAG,CACrBnC,SAAS,EACT9B,KAAK,EACLkB,MAAM,CAACiB,gBAAgB,IACrB,OAAOjB,MAAM,CAACiB,gBAAgB,CAACmC,GAAG,KAAK,WAAW,GAChD;MACEA,GAAG,EAAEpD,MAAM,CAACiB,gBAAgB,CAACmC;KAC9B,GACD/C,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC,CACxB,CACF,CAAC0C,KAAK,CAAC9C,MAAM,CAACgC,IAAI,CAAC;;EAGtB,IAAImB,QAAQ,GACV,MAAM9C,UAAU,CAAC+C,uBAAuB,CACtC,sBAAsB,EACtBrD,cAAqE,CACtE;EACH,IAAIoD,QAAQ,IAAI,IAAI,EAAE;IAIpB,MAAME,kBAAkB,GAAgD,EAAE;IAC1E,CACE,MAAMhD,UAAU,CAACuB,UAAU,CACzB,mBAAmB,EACnB7B,cAAkE,CACnE,EACDuD,OAAO,CAAEC,iBAAiB,IAAI;MAC9B,IAAIA,iBAAiB,EAAE;QACrBF,kBAAkB,CAACG,IAAI,CAACD,iBAAiB,CAAC;;IAE9C,CAAC,CAAC;IACFF,kBAAkB,CAACI,OAAO,EAAE;IAE5B,MAAMC,mBAAmB,GAAG,IAAIvF,YAAA,CAAAwF,UAAU,CAACN,kBAAkB,CAAC;IAE9D,IAAIK,mBAAmB,CAACE,OAAO,CAAC,kBAAkB,CAAC,EAAE;MAInD,MAAMC,sBAAsB,GAC1BA,CAAC,GAAGC,IAAI,KACNJ,mBAAmB,CAACK,sBAAsB,CACxC,kBAAkB,EAClB,GAAGD,IAAI,CACR;MAEL3D,MAAM,CAAC6D,cAAc,CACnBjE,cAAc,CAACkE,OAAO,EACtBhG,uBAAA,CAAAiG,yCAAyC,EACzC;QAAEtE,KAAK,EAAEiE;MAAsB,CAAE,CAClC;MAMD,IAAI/D,MAAM,CAACqE,aAAa,EAAE;QACxBhE,MAAM,CAAC6D,cAAc,CAACjE,cAAc,CAACkE,OAAO,EAAEhG,uBAAA,CAAAmG,uBAAuB,EAAE;UACrExE,KAAK,EAAEE,MAAM,CAACqE;SACf,CAAC;;MAYJ,IAAAlG,uBAAA,CAAAoG,+BAA+B,EAACvE,MAAM,CAACwE,MAAM,CAAC;;IAGhD,IAAI;MACF,MAAMC,MAAM,GAAG,MAAMC,OAAO,CAC1BzE,cAAkE,CACnE;MAaD,MAAM0E,YAAY,GAAG,CAAAC,EAAA,GAAAH,MAAM,CAACI,MAAM,cAAAD,EAAA,uBAAAA,EAAA,CAAEE,GAAG,CAAEC,CAAC,IAAI;QAC5C,IAAI7F,0BAA0B,CAAC6F,CAAC,CAAC,EAAE;UACjC,OAAO,IAAA3G,sBAAA,CAAA4G,gBAAgB,EAACD,CAAC,EAAE;YACzBE,UAAU,EAAE7G,sBAAA,CAAA8G;WACb,CAAC;;QAEJ,OAAOH,CAAC;MACV,CAAC,CAAC;MAEF,IAAIJ,YAAY,EAAE;QAChB,MAAMQ,kBAAkB,CAACR,YAAY,CAAC;;MAGxCtB,QAAQ,GAAG;QACT,GAAGoB,MAAM;QACTI,MAAM,EAAEF,YAAY,GAAGS,YAAY,CAACT,YAAY,CAAC,GAAGlD;OACrD;MAED,MAAMmC,mBAAmB,CAAC9B,UAAU,CAAC,iBAAiB,CAAC;KACxD,CAAC,OAAOuD,cAAc,EAAE;MACvB,MAAMzB,mBAAmB,CAAC9B,UAAU,CAClC,iBAAiB,EACjBuD,cAAuB,CACxB;MAGD,OAAO,MAAMlE,iBAAiB,CAACkE,cAA8B,CAAC;;;EAIlE,IAAIrF,MAAM,CAACsF,cAAc,EAAE;IACzB,MAAMC,iBAAiB,GAA2BvF,MAAM,CAACsF,cAAc,CACrEjC,QAAQ,EACRpD,cAAc,CACf;IACD,IAAIsF,iBAAiB,IAAI,IAAI,EAAE;MAC7BlC,QAAQ,GAAGkC,iBAAiB;;;EAIhC,OAAOC,YAAY,CAACnC,QAAQ,CAAC;EAE7B,SAAShB,KAAKA,CAACvD,KAAa,EAAEwD,YAA2B;IACvD,OAAO,IAAArE,SAAA,CAAAoE,KAAY,EAACvD,KAAK,EAAEwD,YAAY,CAAC;EAC1C;EAEA,SAASK,QAAQA,CAACX,QAAsB;IACtC,IAAIyD,KAAK,GAAGxH,SAAA,CAAAyH,cAAc;IAC1B,IAAI1F,MAAM,CAAC2F,eAAe,EAAE;MAC1BF,KAAK,GAAGA,KAAK,CAACG,MAAM,CAAC5F,MAAM,CAAC2F,eAAe,CAAC;;IAG9C,OAAO,IAAA1H,SAAA,CAAA0E,QAAe,EAAC3C,MAAM,CAACwE,MAAM,EAAExC,QAAQ,EAAEyD,KAAK,CAAC;EACxD;EAEA,eAAef,OAAOA,CACpBzE,cAAgE;IAEhE,MAAM;MAAES,OAAO;MAAEsB;IAAQ,CAAE,GAAG/B,cAAc;IAE5C,MAAM4F,aAAa,GAAkB;MACnCrB,MAAM,EAAExE,MAAM,CAACwE,MAAM;MACrBxC,QAAQ;MACR8D,SAAS,EACP,OAAO9F,MAAM,CAAC8F,SAAS,KAAK,UAAU,GAClC9F,MAAM,CAAC8F,SAAS,CAAC9D,QAAQ,CAAC,GAC1BhC,MAAM,CAAC8F,SAAS;MACtBC,YAAY,EAAE9F,cAAc,CAACkE,OAAO;MACpC6B,cAAc,EAAEtF,OAAO,CAACuF,SAAS;MACjC9C,aAAa,EAAEzC,OAAO,CAACyC,aAAa;MACpCkB,aAAa,EAAErE,MAAM,CAACqE;KACvB;IAED,IAAIrE,MAAM,CAACkG,QAAQ,EAAE;MAInB,OAAO,MAAMlG,MAAM,CAACkG,QAAQ,CAACjG,cAAc,CAAC;KAC7C,MAAM;MACL,OAAO,MAAM,IAAAhC,SAAA,CAAAyG,OAAc,EAACmB,aAAa,CAAC;;EAE9C;EAEA,eAAeL,YAAYA,CACzBnC,QAAyB;IAEzBpD,cAAc,CAACoD,QAAQ,GAAG;MACxB,GAAGpD,cAAc,CAACoD,QAAQ;MAC1BwB,MAAM,EAAExB,QAAQ,CAACwB,MAAM;MACvBsB,IAAI,EAAE9C,QAAQ,CAAC8C,IAAI;MACnBxF,UAAU,EAAE0C,QAAQ,CAAC1C;KACtB;IACD,IAAI0C,QAAQ,CAAC+C,IAAI,EAAE;MACjB,IAAI,CAACnG,cAAc,CAACoD,QAAQ,CAAC+C,IAAI,EAAE;QACjCnG,cAAc,CAACoD,QAAQ,CAAC+C,IAAI,GAAG;UAC7BC,OAAO,EAAE,IAAI3H,mBAAA,CAAA4H,OAAO;SACrB;;MAEH,IAAIjD,QAAQ,CAAC+C,IAAI,CAACG,MAAM,EAAE;QACxBtG,cAAc,CAACoD,QAAQ,CAAC+C,IAAI,CAACG,MAAM,GAAGlD,QAAQ,CAAC+C,IAAI,CAACG,MAAM;;MAE5D,KAAK,MAAM,CAAC1G,IAAI,EAAEC,KAAK,CAAC,IAAIuD,QAAQ,CAAC+C,IAAI,CAACC,OAAO,EAAE;QACjDpG,cAAc,CAACoD,QAAQ,CAAC+C,IAAI,CAACC,OAAO,CAACtD,GAAG,CAAClD,IAAI,EAAEC,KAAK,CAAC;;;IAGzD,MAAMS,UAAU,CAACuB,UAAU,CACzB,kBAAkB,EAClB7B,cAAiE,CAClE;IACD,OAAOA,cAAc,CAACoD,QAAQ;EAChC;EAIA,eAAe8B,kBAAkBA,CAACN,MAAmC;IACnE5E,cAAc,CAAC4E,MAAM,GAAGA,MAAM;IAE9B,OAAO,MAAMtE,UAAU,CAACuB,UAAU,CAChC,oBAAoB,EACpB7B,cAAmE,CACpE;EACH;EAEA,eAAekB,iBAAiBA,CAC9BqF,aAAyD,EACzDvB,UAA+B;IAG/B,MAAMJ,MAAM,GAAG4B,KAAK,CAACC,OAAO,CAACF,aAAa,CAAC,GACvCA,aAAa,GACb,CAACA,aAAa,CAAC;IAEnB,MAAMrB,kBAAkB,CAACN,MAAM,CAAC;IAEhC,MAAMxB,QAAQ,GAAoB;MAChCwB,MAAM,EAAEO,YAAY,CAClBP,MAAM,CAACC,GAAG,CAAE7C,GAAG,IACbA,GAAG,YAAY7D,sBAAA,CAAAuI,WAAW,IAAI,CAAC1B,UAAU,GACrChD,GAAG,GACH,IAAA7D,sBAAA,CAAA4G,gBAAgB,EACd/C,GAAG,EACHgD,UAAU,IAAI;QACZA;OACD,CACF,CACN;KAEJ;IAMD,IACEJ,MAAM,CAAC+B,KAAK,CACT3E,GAAG,IACFA,GAAG,YAAY7D,sBAAA,CAAAgD,+BAA+B,IAC9Ca,GAAG,YAAY7D,sBAAA,CAAAuD,2BAA2B,CAC7C,EACD;MACA0B,QAAQ,CAAC+C,IAAI,GAAG;QACdG,MAAM,EAAE,GAAG;QACXF,OAAO,EAAE,IAAI3H,mBAAA,CAAA4H,OAAO,CAAC;UACnB,eAAe,EAAE;SAClB;OACF;KACF,MAAM,IAAIzB,MAAM,CAACvF,MAAM,KAAK,CAAC,IAAIuF,MAAM,CAAC,CAAC,CAAC,YAAYpG,cAAA,CAAAoI,cAAc,EAAE;MACrExD,QAAQ,CAAC+C,IAAI,GAAG;QACdG,MAAM,EAAE1B,MAAM,CAAC,CAAC,CAAC,CAACiC,UAAU;QAC5BT,OAAO,EAAE,IAAI3H,mBAAA,CAAA4H,OAAO,CAACzB,MAAM,CAAC,CAAC,CAAC,CAACwB,OAAO;OACvC;;IAGH,OAAOb,YAAY,CAACnC,QAAQ,CAAC;EAC/B;EAEA,SAAS+B,YAAYA,CACnBP,MAAmC;IAEnC,OAAO,IAAAzG,sBAAA,CAAA2I,kBAAkB,EAAClC,MAAM,EAAE;MAChCmC,SAAS,EAAEhH,MAAM,CAACiH,WAAW;MAC7BC,KAAK,EAAEjH,cAAc,CAACiH;KACvB,CAAC;EACJ;EAEA,eAAe1G,mCAAmCA,CAAA;IAGhD,MAAM2G,gBAAgB,GAAuC,EAAE;IAC/D,IAAInH,MAAM,CAACoH,OAAO,EAAE;MAClB,KAAK,MAAMC,MAAM,IAAIrH,MAAM,CAACoH,OAAO,EAAE;QACnC,IAAI,CAACC,MAAM,CAACC,eAAe,EAAE;QAC7B,MAAMC,QAAQ,GAAG,MAAMF,MAAM,CAACC,eAAe,CAACrH,cAAc,CAAC;QAC7D,IAAIsH,QAAQ,EAAE;UACZJ,gBAAgB,CAACzD,IAAI,CAAC6D,QAAQ,CAAC;;;;IAIrC,OAAO,IAAIlJ,YAAA,CAAAwF,UAAU,CAACsD,gBAAgB,CAAC;EACzC;EAEA,eAAe1G,qBAAqBA,CAAA;IAClC,IAAIT,MAAM,CAACwH,WAAW,EAAE;MACtB,MAAMrD,OAAO,GAAGlE,cAAc,CAACkE,OAAO;MAEtC,MAAMqD,WAAW,GAAGxH,MAAM,CAACwH,WAAW,EAAE;MAExC,MAAMC,YAAY,GAAU,EAAE;MAC9B,KAAK,MAAMC,UAAU,IAAIrH,MAAM,CAACsH,MAAM,CAACH,WAAW,CAAC,EAAE;QACnD,IAAIE,UAAU,CAACE,UAAU,EAAE;UACzBH,YAAY,CAAC/D,IAAI,CACfgE,UAAU,CAACE,UAAU,CAAC;YACpBzD,OAAO;YACPjD,KAAK,EAAEjB,cAAc,CAACiB;WACvB,CAAC,CACH;;;MAIL,MAAM2B,OAAO,CAACgF,GAAG,CAACJ,YAAY,CAAC;MAE/B,IAAI,aAAa,IAAItD,OAAO,EAAE;QAC5B,MAAM,IAAI2D,KAAK,CACb,kGAAkG,CACnG;;MAGF3D,OAAe,CAACqD,WAAW,GAAGA,WAAW;;EAE9C;AACF;AAnhBA7I,OAAA,CAAAoB,qBAAA,GAAAA,qBAAA","names":["graphql_1","require","schemaInstrumentation_1","apollo_server_errors_1","dispatcher_1","utils_keyvaluecache_1","createSHA_1","__importDefault","runHttpQuery_1","apollo_server_env_1","exports","APQ_CACHE_PREFIX","computeQueryHash","query","default","update","digest","isBadUserInputGraphQLError","error","_a","nodes","length","kind","Kind","VARIABLE_DEFINITION","message","startsWith","variable","name","value","processGraphQLRequest","config","requestContext","logger","console","metrics","Object","create","dispatcher","initializeRequestListenerDispatcher","initializeDataSources","request","extensions","queryHash","persistedQueryCache","persistedQueryHit","persistedQueryRegister","persistedQuery","persistedQueries","cache","sendErrorResponse","PersistedQueryNotSupportedError","version","GraphQLError","PrefixingKeyValueCache","sha256Hash","undefined","get","PersistedQueryNotFoundError","computedQueryHash","source","invokeHook","documentStore","document","err","warn","parsingDidEnd","invokeDidStartHook","parse","parseOptions","syntaxError","SyntaxError","validationDidEnd","validationErrors","validate","ValidationError","Promise","resolve","set","catch","operation","getOperationAST","operationName","ttl","response","invokeHooksUntilNonNull","executionListeners","forEach","executionListener","push","reverse","executionDispatcher","Dispatcher","hasHook","invokeWillResolveField","args","invokeSyncDidStartHook","defineProperty","context","symbolExecutionDispatcherWillResolveField","fieldResolver","symbolUserFieldResolver","enablePluginsForSchemaResolvers","schema","result","execute","resultErrors","_b","errors","map","e","fromGraphQLError","errorClass","UserInputError","didEncounterErrors","formatErrors","executionError","formatResponse","formattedResponse","sendResponse","rules","specifiedRules","validationRules","concat","executionArgs","rootValue","contextValue","variableValues","variables","executor","data","http","headers","Headers","status","errorOrErrors","Array","isArray","ApolloError","every","HttpQueryError","statusCode","formatApolloErrors","formatter","formatError","debug","requestListeners","plugins","plugin","requestDidStart","listener","dataSources","initializers","dataSource","values","initialize","all","Error"],"sourceRoot":"","sources":["../src/requestPipeline.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}