{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SchemaReporter = exports.schemaReportGql = void 0;\nconst gql_1 = require(\"../../gql\");\nconst apollo_server_env_1 = require(\"apollo-server-env\");\nconst graphql_1 = require(\"graphql\");\nexports.schemaReportGql = (0, graphql_1.print)((0, gql_1.gql)`\n  mutation SchemaReport($report: SchemaReport!, $coreSchema: String) {\n    reportSchema(report: $report, coreSchema: $coreSchema) {\n      __typename\n      ... on ReportSchemaError {\n        message\n        code\n      }\n      ... on ReportSchemaResponse {\n        inSeconds\n        withCoreSchema\n      }\n    }\n  }\n`);\nclass SchemaReporter {\n  constructor(options) {\n    var _a;\n    this.headers = new apollo_server_env_1.Headers();\n    this.headers.set('Content-Type', 'application/json');\n    this.headers.set('x-api-key', options.apiKey);\n    this.headers.set('apollographql-client-name', 'ApolloServerPluginSchemaReporting');\n    this.headers.set('apollographql-client-version', require('../../../package.json').version);\n    this.endpointUrl = options.endpointUrl || 'https://schema-reporting.api.apollographql.com/api/graphql';\n    this.schemaReport = options.schemaReport;\n    this.coreSchema = options.coreSchema;\n    this.isStopped = false;\n    this.logger = options.logger;\n    this.initialReportingDelayInMs = options.initialReportingDelayInMs;\n    this.fallbackReportingDelayInMs = options.fallbackReportingDelayInMs;\n    this.fetcher = (_a = options.fetcher) !== null && _a !== void 0 ? _a : apollo_server_env_1.fetch;\n  }\n  stopped() {\n    return this.isStopped;\n  }\n  start() {\n    this.pollTimer = setTimeout(() => this.sendOneReportAndScheduleNext(false), this.initialReportingDelayInMs);\n  }\n  stop() {\n    this.isStopped = true;\n    if (this.pollTimer) {\n      clearTimeout(this.pollTimer);\n      this.pollTimer = undefined;\n    }\n  }\n  async sendOneReportAndScheduleNext(sendNextWithCoreSchema) {\n    this.pollTimer = undefined;\n    if (this.stopped()) return;\n    try {\n      const result = await this.reportSchema(sendNextWithCoreSchema);\n      if (!result) {\n        return;\n      }\n      if (!this.stopped()) {\n        this.pollTimer = setTimeout(() => this.sendOneReportAndScheduleNext(result.withCoreSchema), result.inSeconds * 1000);\n      }\n      return;\n    } catch (error) {\n      this.logger.error(`Error reporting server info to Apollo during schema reporting: ${error}`);\n      if (!this.stopped()) {\n        this.pollTimer = setTimeout(() => this.sendOneReportAndScheduleNext(false), this.fallbackReportingDelayInMs);\n      }\n    }\n  }\n  async reportSchema(withCoreSchema) {\n    const {\n      data,\n      errors\n    } = await this.apolloQuery({\n      report: this.schemaReport,\n      coreSchema: withCoreSchema ? this.coreSchema : null\n    });\n    if (errors) {\n      throw new Error(errors.map(x => x.message).join('\\n'));\n    }\n    function msgForUnexpectedResponse(data) {\n      return ['Unexpected response shape from Apollo when', 'reporting schema. If this continues, please reach', 'out to support@apollographql.com.', 'Received response:', JSON.stringify(data)].join(' ');\n    }\n    if (!data || !data.reportSchema) {\n      throw new Error(msgForUnexpectedResponse(data));\n    }\n    if (data.reportSchema.__typename === 'ReportSchemaResponse') {\n      return data.reportSchema;\n    } else if (data.reportSchema.__typename === 'ReportSchemaError') {\n      this.logger.error(['Received input validation error from Apollo:', data.reportSchema.message, 'Stopping reporting. Please fix the input errors.'].join(' '));\n      this.stop();\n      return null;\n    }\n    throw new Error(msgForUnexpectedResponse(data));\n  }\n  async apolloQuery(variables) {\n    const request = {\n      query: exports.schemaReportGql,\n      variables\n    };\n    const httpRequest = new apollo_server_env_1.Request(this.endpointUrl, {\n      method: 'POST',\n      headers: this.headers,\n      body: JSON.stringify(request)\n    });\n    const httpResponse = await this.fetcher(httpRequest);\n    if (!httpResponse.ok) {\n      throw new Error([`An unexpected HTTP status code (${httpResponse.status}) was`, 'encountered during schema reporting.'].join(' '));\n    }\n    try {\n      return await httpResponse.json();\n    } catch (error) {\n      throw new Error([\"Couldn't report schema to Apollo.\", 'Parsing response as JSON failed.', 'If this continues please reach out to support@apollographql.com', error].join(' '));\n    }\n  }\n}\nexports.SchemaReporter = SchemaReporter;","map":{"version":3,"mappings":"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","names":["gql_1","require","apollo_server_env_1","graphql_1","exports","schemaReportGql","print","gql","SchemaReporter","constructor","options","headers","Headers","set","apiKey","version","endpointUrl","schemaReport","coreSchema","isStopped","logger","initialReportingDelayInMs","fallbackReportingDelayInMs","fetcher","_a","fetch","stopped","start","pollTimer","setTimeout","sendOneReportAndScheduleNext","stop","clearTimeout","undefined","sendNextWithCoreSchema","result","reportSchema","withCoreSchema","inSeconds","error","data","errors","apolloQuery","report","Error","map","x","message","join","msgForUnexpectedResponse","JSON","stringify","__typename","variables","request","query","httpRequest","Request","method","body","httpResponse","ok","status","json"],"sourceRoot":"","sources":["../../../src/plugin/schemaReporting/schemaReporter.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}