{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = undefined && undefined.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.extractSubgraphsFromSupergraph = exports.extractSubgraphsNamesAndUrlsFromSupergraph = void 0;\nconst definitions_1 = require(\"./definitions\");\nconst federation_1 = require(\"./federation\");\nconst coreSpec_1 = require(\"./coreSpec\");\nconst federation_2 = require(\"./federation\");\nconst utils_1 = require(\"./utils\");\nconst supergraphs_1 = require(\"./supergraphs\");\nconst buildSchema_1 = require(\"./buildSchema\");\nconst types_1 = require(\"./types\");\nconst print_1 = require(\"./print\");\nconst operations_1 = require(\"./operations\");\nconst fs_1 = __importDefault(require(\"fs\"));\nconst path_1 = __importDefault(require(\"path\"));\nconst utils_2 = require(\"./utils\");\nconst _1 = require(\".\");\nfunction filteredTypes(supergraph, joinSpec, coreSpec) {\n  return supergraph.types().filter(t => !joinSpec.isSpecType(t) && !coreSpec.isSpecType(t));\n}\nfunction extractSubgraphsNamesAndUrlsFromSupergraph(supergraph) {\n  const [_, joinSpec] = (0, supergraphs_1.validateSupergraph)(supergraph);\n  const [subgraphs] = collectEmptySubgraphs(supergraph, joinSpec);\n  return subgraphs.values().map(subgraph => {\n    return {\n      name: subgraph.name,\n      url: subgraph.url\n    };\n  });\n}\nexports.extractSubgraphsNamesAndUrlsFromSupergraph = extractSubgraphsNamesAndUrlsFromSupergraph;\nfunction collectEmptySubgraphs(supergraph, joinSpec) {\n  const subgraphs = new federation_2.Subgraphs();\n  const graphDirective = joinSpec.graphDirective(supergraph);\n  const graphEnum = joinSpec.graphEnum(supergraph);\n  const graphEnumNameToSubgraphName = new Map();\n  for (const value of graphEnum.values) {\n    const graphApplications = value.appliedDirectivesOf(graphDirective);\n    if (!graphApplications.length) {\n      throw new Error(`Value ${value} of join__Graph enum has no @join__graph directive`);\n    }\n    const info = graphApplications[0].arguments();\n    const subgraph = new federation_2.Subgraph(info.name, info.url, (0, federation_1.newEmptyFederation2Schema)());\n    subgraphs.add(subgraph);\n    graphEnumNameToSubgraphName.set(value.name, info.name);\n  }\n  return [subgraphs, graphEnumNameToSubgraphName];\n}\nclass SubgraphExtractionError {\n  constructor(originalError, subgraph) {\n    this.originalError = originalError;\n    this.subgraph = subgraph;\n  }\n}\nfunction collectFieldReachableTypesForSubgraph(supergraph, subgraphName, addReachableType, fieldInfoInSubgraph, typeInfoInSubgraph) {\n  const seenTypes = new Set();\n  const stack = supergraph.schemaDefinition.roots().map(root => root.type);\n  for (const type of supergraph.types()) {\n    const {\n      isEntityWithKeyInSubgraph,\n      typesInFederationDirectives\n    } = typeInfoInSubgraph(type, subgraphName);\n    if (isEntityWithKeyInSubgraph) {\n      stack.push(type);\n    }\n    typesInFederationDirectives.forEach(t => stack.push(t));\n  }\n  while (stack.length > 0) {\n    const type = stack.pop();\n    addReachableType(type);\n    if (seenTypes.has(type.name)) {\n      continue;\n    }\n    seenTypes.add(type.name);\n    switch (type.kind) {\n      case 'InterfaceType':\n        type.allImplementations().forEach(t => stack.push(t));\n      case 'ObjectType':\n        type.interfaces().forEach(t => stack.push(t));\n        for (const field of type.fields()) {\n          const {\n            isInSubgraph,\n            typesInFederationDirectives\n          } = fieldInfoInSubgraph(field, subgraphName);\n          if (isInSubgraph) {\n            field.arguments().forEach(arg => stack.push((0, definitions_1.baseType)(arg.type)));\n            stack.push((0, definitions_1.baseType)(field.type));\n            typesInFederationDirectives.forEach(t => stack.push(t));\n          }\n        }\n        break;\n      case 'InputObjectType':\n        for (const field of type.fields()) {\n          const {\n            isInSubgraph,\n            typesInFederationDirectives\n          } = fieldInfoInSubgraph(field, subgraphName);\n          if (isInSubgraph) {\n            stack.push((0, definitions_1.baseType)(field.type));\n            typesInFederationDirectives.forEach(t => stack.push(t));\n          }\n        }\n        break;\n      case 'UnionType':\n        type.members().forEach(m => stack.push(m.type));\n        break;\n    }\n  }\n  for (const directive of supergraph.directives()) {\n    if (!directive.hasExecutableLocations()) {\n      continue;\n    }\n    directive.arguments().forEach(arg => stack.push((0, definitions_1.baseType)(arg.type)));\n  }\n}\nfunction collectFieldReachableTypesForAllSubgraphs(supergraph, allSubgraphs, fieldInfoInSubgraph, typeInfoInSubgraph) {\n  const reachableTypesBySubgraphs = new Map();\n  for (const subgraphName of allSubgraphs) {\n    const reachableTypes = new Set();\n    collectFieldReachableTypesForSubgraph(supergraph, subgraphName, t => reachableTypes.add(t.name), fieldInfoInSubgraph, typeInfoInSubgraph);\n    reachableTypesBySubgraphs.set(subgraphName, reachableTypes);\n  }\n  return reachableTypesBySubgraphs;\n}\nfunction typesUsedInFederationDirective(fieldSet, parentType) {\n  if (!fieldSet) {\n    return [];\n  }\n  const usedTypes = [];\n  (0, operations_1.parseSelectionSet)({\n    parentType,\n    source: fieldSet,\n    fieldAccessor: (type, fieldName) => {\n      const field = type.field(fieldName);\n      if (field) {\n        usedTypes.push((0, definitions_1.baseType)(field.type));\n      }\n      return field;\n    },\n    validate: false\n  });\n  return usedTypes;\n}\nfunction extractSubgraphsFromSupergraph(supergraph, validateExtractedSubgraphs = true) {\n  const [coreFeatures, joinSpec] = (0, supergraphs_1.validateSupergraph)(supergraph);\n  const isFed1 = joinSpec.version.equals(new coreSpec_1.FeatureVersion(0, 1));\n  try {\n    const [subgraphs, graphEnumNameToSubgraphName] = collectEmptySubgraphs(supergraph, joinSpec);\n    const getSubgraph = application => {\n      const graph = application.arguments().graph;\n      if (!graph) {\n        return undefined;\n      }\n      const subgraphName = graphEnumNameToSubgraphName.get(graph);\n      (0, utils_1.assert)(subgraphName, () => `Invalid graph name ${graph} found in ${application} on ${application.parent}: does not match a graph defined in the @join__Graph enum`);\n      const subgraph = subgraphs.get(subgraphName);\n      (0, utils_1.assert)(subgraph, 'All subgraphs should have been created by `collectEmptySubgraphs`');\n      return subgraph;\n    };\n    const types = filteredTypes(supergraph, joinSpec, coreFeatures.coreDefinition);\n    const args = {\n      supergraph,\n      subgraphs,\n      joinSpec,\n      filteredTypes: types,\n      getSubgraph\n    };\n    if (isFed1) {\n      extractSubgraphsFromFed1Supergraph(args);\n    } else {\n      extractSubgraphsFromFed2Supergraph(args);\n    }\n    for (const subgraph of subgraphs) {\n      if (validateExtractedSubgraphs) {\n        try {\n          subgraph.validate();\n        } catch (e) {\n          throw new SubgraphExtractionError(e, subgraph);\n        }\n      } else {\n        subgraph.assumeValid();\n      }\n    }\n    return subgraphs;\n  } catch (e) {\n    let error = e;\n    let subgraph = undefined;\n    if (e instanceof SubgraphExtractionError) {\n      error = e.originalError;\n      subgraph = e.subgraph;\n    }\n    const impacted = subgraph ? `subgraph \"${subgraph.name}\"` : 'subgraphs';\n    if (isFed1) {\n      const msg = `Error extracting ${impacted} from the supergraph: this might be due to errors in subgraphs that were mistakenly ignored by federation 0.x versions but are rejected by federation 2.\\n` + 'Please try composing your subgraphs with federation 2: this should help precisely pinpoint the problems and, once fixed, generate a correct federation 2 supergraph';\n      throw new Error(`${msg}.\\n\\nDetails:\\n${errorToString(error)}`);\n    } else {\n      const msg = `Unexpected error extracting ${impacted} from the supergraph: this is either a bug, or the supergraph has been corrupted`;\n      const dumpMsg = subgraph ? '\\n\\n' + maybeDumpSubgraphSchema(subgraph) : '';\n      throw new Error(`${msg}.\\n\\nDetails:\\n${errorToString(error)}${dumpMsg}`);\n    }\n  }\n}\nexports.extractSubgraphsFromSupergraph = extractSubgraphsFromSupergraph;\nfunction addAllEmptySubgraphTypes({\n  supergraph,\n  joinSpec,\n  filteredTypes,\n  getSubgraph\n}) {\n  const typeDirective = joinSpec.typeDirective(supergraph);\n  const objOrItfTypes = [];\n  const inputObjTypes = [];\n  const enumTypes = [];\n  const unionTypes = [];\n  for (const type of filteredTypes) {\n    const typeApplications = type.appliedDirectivesOf(typeDirective);\n    switch (type.kind) {\n      case 'InterfaceType':\n      case 'ObjectType':\n        objOrItfTypes.push({\n          type,\n          subgraphsInfo: addEmptyType(type, type.appliedDirectivesOf(typeDirective), getSubgraph)\n        });\n        break;\n      case 'InputObjectType':\n        inputObjTypes.push({\n          type,\n          subgraphsInfo: addEmptyType(type, type.appliedDirectivesOf(typeDirective), getSubgraph)\n        });\n        break;\n      case 'EnumType':\n        enumTypes.push({\n          type,\n          subgraphsInfo: addEmptyType(type, type.appliedDirectivesOf(typeDirective), getSubgraph)\n        });\n        break;\n      case 'UnionType':\n        unionTypes.push({\n          type,\n          subgraphsInfo: addEmptyType(type, type.appliedDirectivesOf(typeDirective), getSubgraph)\n        });\n        break;\n      case 'ScalarType':\n        for (const application of typeApplications) {\n          const subgraph = getSubgraph(application);\n          (0, utils_1.assert)(subgraph, () => `Should have found the subgraph for ${application}`);\n          subgraph.schema.addType((0, definitions_1.newNamedType)(type.kind, type.name));\n        }\n        break;\n    }\n  }\n  return {\n    objOrItfTypes,\n    inputObjTypes,\n    enumTypes,\n    unionTypes\n  };\n}\nfunction addEmptyType(type, typeApplications, getSubgraph) {\n  (0, utils_1.assert)(typeApplications.length > 0, `Missing @join__type on ${type}`);\n  const subgraphsInfo = new Map();\n  for (const application of typeApplications) {\n    const {\n      graph,\n      key,\n      extension,\n      resolvable,\n      isInterfaceObject\n    } = application.arguments();\n    let subgraphInfo = subgraphsInfo.get(graph);\n    if (!subgraphInfo) {\n      const subgraph = getSubgraph(application);\n      (0, utils_1.assert)(subgraph, () => `Should have found the subgraph for ${application}`);\n      const kind = isInterfaceObject ? 'ObjectType' : type.kind;\n      const subgraphType = subgraph.schema.addType((0, definitions_1.newNamedType)(kind, type.name));\n      if (isInterfaceObject) {\n        subgraphType.applyDirective('interfaceObject');\n      }\n      subgraphInfo = {\n        type: subgraphType,\n        subgraph\n      };\n      subgraphsInfo.set(graph, subgraphInfo);\n    }\n    if (key) {\n      const directive = subgraphInfo.type.applyDirective('key', {\n        'fields': key,\n        resolvable\n      });\n      if (extension) {\n        directive.setOfExtension(subgraphInfo.type.newExtension());\n      }\n    }\n  }\n  return subgraphsInfo;\n}\nfunction extractObjOrItfContent(args, info) {\n  const fieldDirective = args.joinSpec.fieldDirective(args.supergraph);\n  const implementsDirective = args.joinSpec.implementsDirective(args.supergraph);\n  (0, utils_1.assert)(implementsDirective, '@join__implements should existing for a fed2 supergraph');\n  for (const {\n    type,\n    subgraphsInfo\n  } of info) {\n    const implementsApplications = type.appliedDirectivesOf(implementsDirective);\n    for (const application of implementsApplications) {\n      const args = application.arguments();\n      const subgraphInfo = subgraphsInfo.get(args.graph);\n      subgraphInfo.type.addImplementedInterface(args.interface);\n    }\n    for (const field of type.fields()) {\n      const fieldApplications = field.appliedDirectivesOf(fieldDirective);\n      if (fieldApplications.length === 0) {\n        const isShareable = (0, definitions_1.isObjectType)(type) && subgraphsInfo.size > 1;\n        for (const {\n          type: subgraphType,\n          subgraph\n        } of subgraphsInfo.values()) {\n          addSubgraphField({\n            field,\n            type: subgraphType,\n            subgraph,\n            isShareable\n          });\n        }\n      } else {\n        const isShareable = (0, definitions_1.isObjectType)(type) && fieldApplications.filter(application => {\n          const args = application.arguments();\n          return !args.external && !args.usedOverridden;\n        }).length > 1;\n        for (const application of fieldApplications) {\n          const args = application.arguments();\n          if (!args.graph) {\n            continue;\n          }\n          const {\n            type: subgraphType,\n            subgraph\n          } = subgraphsInfo.get(args.graph);\n          addSubgraphField({\n            field,\n            type: subgraphType,\n            subgraph,\n            isShareable,\n            joinFieldArgs: args\n          });\n        }\n      }\n    }\n  }\n}\nfunction extractInputObjContent(args, info) {\n  const fieldDirective = args.joinSpec.fieldDirective(args.supergraph);\n  for (const {\n    type,\n    subgraphsInfo\n  } of info) {\n    for (const field of type.fields()) {\n      const fieldApplications = field.appliedDirectivesOf(fieldDirective);\n      if (fieldApplications.length === 0) {\n        for (const {\n          type: subgraphType,\n          subgraph\n        } of subgraphsInfo.values()) {\n          addSubgraphInputField({\n            field,\n            type: subgraphType,\n            subgraph\n          });\n        }\n      } else {\n        for (const application of fieldApplications) {\n          const args = application.arguments();\n          if (!args.graph) {\n            continue;\n          }\n          const {\n            type: subgraphType,\n            subgraph\n          } = subgraphsInfo.get(args.graph);\n          addSubgraphInputField({\n            field,\n            type: subgraphType,\n            subgraph,\n            joinFieldArgs: args\n          });\n        }\n      }\n    }\n  }\n}\nfunction extractEnumTypeContent(args, info) {\n  const enumValueDirective = args.joinSpec.enumValueDirective(args.supergraph);\n  for (const {\n    type,\n    subgraphsInfo\n  } of info) {\n    for (const value of type.values) {\n      const enumValueApplications = enumValueDirective ? value.appliedDirectivesOf(enumValueDirective) : [];\n      if (enumValueApplications.length === 0) {\n        for (const {\n          type: subgraphType\n        } of subgraphsInfo.values()) {\n          subgraphType.addValue(value.name);\n        }\n      } else {\n        for (const application of enumValueApplications) {\n          const args = application.arguments();\n          const {\n            type: subgraphType\n          } = subgraphsInfo.get(args.graph);\n          subgraphType.addValue(value.name);\n        }\n      }\n    }\n  }\n}\nfunction extractUnionTypeContent(args, info) {\n  const unionMemberDirective = args.joinSpec.unionMemberDirective(args.supergraph);\n  for (const {\n    type,\n    subgraphsInfo\n  } of info) {\n    const unionMemberApplications = unionMemberDirective ? type.appliedDirectivesOf(unionMemberDirective) : [];\n    if (unionMemberApplications.length === 0) {\n      for (const {\n        type: subgraphType,\n        subgraph\n      } of subgraphsInfo.values()) {\n        for (const member of type.types()) {\n          const subgraphMember = subgraph.schema.type(member.name);\n          if (subgraphMember) {\n            subgraphType.addType(subgraphMember);\n          }\n        }\n      }\n    } else {\n      for (const application of unionMemberApplications) {\n        const args = application.arguments();\n        const {\n          type: subgraphType,\n          subgraph\n        } = subgraphsInfo.get(args.graph);\n        subgraphType.addType(subgraph.schema.type(args.member));\n      }\n    }\n  }\n}\nfunction extractSubgraphsFromFed2Supergraph(args) {\n  const {\n    objOrItfTypes,\n    inputObjTypes,\n    enumTypes,\n    unionTypes\n  } = addAllEmptySubgraphTypes(args);\n  extractObjOrItfContent(args, objOrItfTypes);\n  extractInputObjContent(args, inputObjTypes);\n  extractEnumTypeContent(args, enumTypes);\n  extractUnionTypeContent(args, unionTypes);\n  const allExecutableDirectives = args.supergraph.directives().filter(def => def.hasExecutableLocations());\n  for (const subgraph of args.subgraphs) {\n    (0, federation_1.removeInactiveProvidesAndRequires)(subgraph.schema);\n    removeUnusedTypesFromSubgraph(subgraph.schema);\n    for (const definition of allExecutableDirectives) {\n      (0, definitions_1.copyDirectiveDefinitionToSchema)({\n        definition,\n        schema: subgraph.schema,\n        copyDirectiveApplicationsInArguments: false,\n        locationFilter: loc => (0, definitions_1.isExecutableDirectiveLocation)(loc)\n      });\n    }\n  }\n}\nconst DEBUG_SUBGRAPHS_ENV_VARIABLE_NAME = 'APOLLO_FEDERATION_DEBUG_SUBGRAPHS';\nfunction maybeDumpSubgraphSchema(subgraph) {\n  const shouldDump = !!(0, utils_2.validateStringContainsBoolean)(process.env[DEBUG_SUBGRAPHS_ENV_VARIABLE_NAME]);\n  if (!shouldDump) {\n    return `Re-run with environment variable '${DEBUG_SUBGRAPHS_ENV_VARIABLE_NAME}' set to 'true' to extract the invalid subgraph`;\n  }\n  try {\n    const filename = `extracted-subgraph-${subgraph.name}-${Date.now()}.graphql`;\n    const file = path_1.default.resolve(filename);\n    if (fs_1.default.existsSync(file)) {\n      throw new Error(`candidate file ${filename} already existed`);\n    }\n    fs_1.default.writeFileSync(file, (0, print_1.printSchema)(subgraph.schema));\n    return `The (invalid) extracted subgraph has been written in: ${file}.`;\n  } catch (e2) {\n    return `Was not able to print generated subgraph for \"${subgraph.name}\" because: ${errorToString(e2)}`;\n  }\n}\nfunction errorToString(e) {\n  const causes = (0, _1.errorCauses)(e);\n  return causes ? (0, _1.printErrors)(causes) : String(e);\n}\nfunction addSubgraphField({\n  field,\n  type,\n  subgraph,\n  isShareable,\n  joinFieldArgs\n}) {\n  const copiedFieldType = (joinFieldArgs === null || joinFieldArgs === void 0 ? void 0 : joinFieldArgs.type) ? decodeType(joinFieldArgs.type, subgraph.schema, subgraph.name) : copyType(field.type, subgraph.schema, subgraph.name);\n  const subgraphField = type.addField(field.name, copiedFieldType);\n  for (const arg of field.arguments()) {\n    subgraphField.addArgument(arg.name, copyType(arg.type, subgraph.schema, subgraph.name), arg.defaultValue);\n  }\n  if (joinFieldArgs === null || joinFieldArgs === void 0 ? void 0 : joinFieldArgs.requires) {\n    subgraphField.applyDirective(subgraph.metadata().requiresDirective(), {\n      'fields': joinFieldArgs.requires\n    });\n  }\n  if (joinFieldArgs === null || joinFieldArgs === void 0 ? void 0 : joinFieldArgs.provides) {\n    subgraphField.applyDirective(subgraph.metadata().providesDirective(), {\n      'fields': joinFieldArgs.provides\n    });\n  }\n  const external = !!(joinFieldArgs === null || joinFieldArgs === void 0 ? void 0 : joinFieldArgs.external);\n  if (external) {\n    subgraphField.applyDirective(subgraph.metadata().externalDirective());\n  }\n  const usedOverridden = !!(joinFieldArgs === null || joinFieldArgs === void 0 ? void 0 : joinFieldArgs.usedOverridden);\n  if (usedOverridden) {\n    subgraphField.applyDirective(subgraph.metadata().externalDirective(), {\n      'reason': '[overridden]'\n    });\n  }\n  if (joinFieldArgs === null || joinFieldArgs === void 0 ? void 0 : joinFieldArgs.override) {\n    subgraphField.applyDirective(subgraph.metadata().overrideDirective(), {\n      'from': joinFieldArgs.override\n    });\n  }\n  if (isShareable && !external && !usedOverridden) {\n    subgraphField.applyDirective(subgraph.metadata().shareableDirective());\n  }\n  return subgraphField;\n}\nfunction addSubgraphInputField({\n  field,\n  type,\n  subgraph,\n  joinFieldArgs\n}) {\n  const copiedType = (joinFieldArgs === null || joinFieldArgs === void 0 ? void 0 : joinFieldArgs.type) ? decodeType(joinFieldArgs === null || joinFieldArgs === void 0 ? void 0 : joinFieldArgs.type, subgraph.schema, subgraph.name) : copyType(field.type, subgraph.schema, subgraph.name);\n  const inputField = type.addField(field.name, copiedType);\n  inputField.defaultValue = field.defaultValue;\n  return inputField;\n}\nfunction extractSubgraphsFromFed1Supergraph({\n  supergraph,\n  subgraphs,\n  joinSpec,\n  filteredTypes,\n  getSubgraph\n}) {\n  const typeDirective = joinSpec.typeDirective(supergraph);\n  const ownerDirective = joinSpec.ownerDirective(supergraph);\n  const fieldDirective = joinSpec.fieldDirective(supergraph);\n  const reachableTypesBySubgraph = collectFieldReachableTypesForAllSubgraphs(supergraph, subgraphs.names(), (f, name) => {\n    var _a;\n    const fieldApplications = f.appliedDirectivesOf(fieldDirective);\n    if (fieldApplications.length) {\n      const application = fieldApplications.find(application => {\n        var _a;\n        return ((_a = getSubgraph(application)) === null || _a === void 0 ? void 0 : _a.name) === name;\n      });\n      if (application) {\n        const args = application.arguments();\n        const typesInFederationDirectives = typesUsedInFederationDirective(args.provides, (0, definitions_1.baseType)(f.type)).concat(typesUsedInFederationDirective(args.requires, f.parent));\n        return {\n          isInSubgraph: true,\n          typesInFederationDirectives\n        };\n      } else {\n        return {\n          isInSubgraph: false,\n          typesInFederationDirectives: []\n        };\n      }\n    } else {\n      const ownerApplications = ownerDirective ? f.parent.appliedDirectivesOf(ownerDirective) : [];\n      return {\n        isInSubgraph: !ownerApplications.length || ((_a = getSubgraph(ownerApplications[0])) === null || _a === void 0 ? void 0 : _a.name) == name,\n        typesInFederationDirectives: []\n      };\n    }\n  }, (t, name) => {\n    const typeApplications = t.appliedDirectivesOf(typeDirective);\n    const application = typeApplications.find(application => {\n      var _a;\n      return application.arguments().key && ((_a = getSubgraph(application)) === null || _a === void 0 ? void 0 : _a.name) === name;\n    });\n    if (application) {\n      const typesInFederationDirectives = typesUsedInFederationDirective(application.arguments().key, t);\n      return {\n        isEntityWithKeyInSubgraph: true,\n        typesInFederationDirectives\n      };\n    } else {\n      return {\n        isEntityWithKeyInSubgraph: false,\n        typesInFederationDirectives: []\n      };\n    }\n  });\n  const includeTypeInSubgraph = (t, name) => {\n    var _a, _b;\n    return (_b = (_a = reachableTypesBySubgraph.get(name)) === null || _a === void 0 ? void 0 : _a.has(t.name)) !== null && _b !== void 0 ? _b : false;\n  };\n  for (const type of filteredTypes) {\n    const typeApplications = type.appliedDirectivesOf(typeDirective);\n    if (!typeApplications.length) {\n      for (const subgraph of subgraphs) {\n        if (includeTypeInSubgraph(type, subgraph.name)) {\n          subgraph.schema.addType((0, definitions_1.newNamedType)(type.kind, type.name));\n        }\n      }\n    } else {\n      for (const application of typeApplications) {\n        const args = application.arguments();\n        const subgraph = getSubgraph(application);\n        (0, utils_1.assert)(subgraph, () => `Should have found the subgraph for ${application}`);\n        const schema = subgraph.schema;\n        let subgraphType = schema.type(type.name);\n        if (!subgraphType) {\n          const kind = args.isInterfaceObject ? 'ObjectType' : type.kind;\n          subgraphType = schema.addType((0, definitions_1.newNamedType)(kind, type.name));\n          if (args.isInterfaceObject) {\n            subgraphType.applyDirective('interfaceObject');\n          }\n        }\n        if (args.key) {\n          const {\n            resolvable\n          } = args;\n          const directive = subgraphType.applyDirective('key', {\n            'fields': args.key,\n            resolvable\n          });\n          if (args.extension) {\n            directive.setOfExtension(subgraphType.newExtension());\n          }\n        }\n      }\n    }\n  }\n  for (const type of filteredTypes) {\n    switch (type.kind) {\n      case 'ObjectType':\n      case 'InterfaceType':\n        for (const implementations of type.interfaceImplementations()) {\n          const name = implementations.interface.name;\n          for (const subgraph of subgraphs) {\n            const subgraphType = subgraph.schema.type(type.name);\n            const subgraphItf = subgraph.schema.type(name);\n            if (subgraphType && subgraphItf) {\n              subgraphType.addImplementedInterface(name);\n            }\n          }\n        }\n      case 'InputObjectType':\n        for (const field of type.fields()) {\n          const fieldApplications = field.appliedDirectivesOf(fieldDirective);\n          if (!fieldApplications.length) {\n            const ownerApplications = ownerDirective ? type.appliedDirectivesOf(ownerDirective) : [];\n            if (ownerApplications.length > 0) {\n              (0, utils_1.assert)(ownerApplications.length == 1, () => `Found multiple join__owner directives on type ${type}`);\n              const subgraph = getSubgraph(ownerApplications[0]);\n              (0, utils_1.assert)(subgraph, () => `Should have found the subgraph for ${ownerApplications[0]}`);\n              addSubgraphFieldForFed1(field, subgraph, false);\n            } else {\n              const fieldBaseType = (0, definitions_1.baseType)(field.type);\n              const isShareable = (0, definitions_1.isObjectType)(type) && subgraphs.values().filter(s => s.schema.type(type.name)).length > 1;\n              for (const subgraph of subgraphs) {\n                if (subgraph.schema.type(fieldBaseType.name)) {\n                  addSubgraphFieldForFed1(field, subgraph, isShareable);\n                }\n              }\n            }\n          } else {\n            const isShareable = (0, definitions_1.isObjectType)(type) && fieldApplications.length > 1;\n            for (const application of fieldApplications) {\n              const subgraph = getSubgraph(application);\n              if (!subgraph) {\n                continue;\n              }\n              const args = application.arguments();\n              addSubgraphFieldForFed1(field, subgraph, isShareable, args);\n            }\n          }\n        }\n        break;\n      case 'EnumType':\n        for (const subgraph of subgraphs) {\n          const subgraphEnum = subgraph.schema.type(type.name);\n          if (!subgraphEnum) {\n            continue;\n          }\n          (0, utils_1.assert)((0, definitions_1.isEnumType)(subgraphEnum), () => `${subgraphEnum} should be an enum but found a ${subgraphEnum.kind}`);\n          for (const value of type.values) {\n            subgraphEnum.addValue(value.name);\n          }\n        }\n        break;\n      case 'UnionType':\n        for (const subgraph of subgraphs) {\n          const subgraphUnion = subgraph.schema.type(type.name);\n          if (!subgraphUnion) {\n            continue;\n          }\n          (0, utils_1.assert)((0, definitions_1.isUnionType)(subgraphUnion), () => `${subgraphUnion} should be an enum but found a ${subgraphUnion.kind}`);\n          for (const memberTypeName of type.types().map(t => t.name)) {\n            const subgraphType = subgraph.schema.type(memberTypeName);\n            if (subgraphType) {\n              subgraphUnion.addType(subgraphType);\n            }\n          }\n        }\n        break;\n    }\n  }\n  const allExecutableDirectives = supergraph.directives().filter(def => def.hasExecutableLocations());\n  for (const subgraph of subgraphs) {\n    addExternalFields(subgraph, supergraph, true);\n    (0, federation_1.removeInactiveProvidesAndRequires)(subgraph.schema);\n    removeUnusedTypesFromSubgraph(subgraph.schema);\n    for (const definition of allExecutableDirectives) {\n      (0, definitions_1.copyDirectiveDefinitionToSchema)({\n        definition,\n        schema: subgraph.schema,\n        copyDirectiveApplicationsInArguments: false,\n        locationFilter: loc => (0, definitions_1.isExecutableDirectiveLocation)(loc)\n      });\n    }\n  }\n  return subgraphs;\n}\nfunction addSubgraphFieldForFed1(field, subgraph, isShareable, joinFieldArgs) {\n  const subgraphType = subgraph.schema.type(field.parent.name);\n  if (!subgraphType) {\n    return;\n  }\n  if (field instanceof definitions_1.FieldDefinition) {\n    addSubgraphField({\n      field,\n      subgraph,\n      type: subgraphType,\n      isShareable,\n      joinFieldArgs\n    });\n  } else {\n    addSubgraphInputField({\n      field,\n      subgraph,\n      type: subgraphType,\n      joinFieldArgs\n    });\n  }\n}\nfunction decodeType(encodedType, subgraph, subgraphName) {\n  try {\n    return (0, buildSchema_1.builtTypeReference)(encodedType, subgraph);\n  } catch (e) {\n    (0, utils_1.assert)(false, () => `Cannot parse type \"${encodedType}\" in subgraph ${subgraphName}: ${e}`);\n  }\n}\nfunction copyType(type, subgraph, subgraphName) {\n  switch (type.kind) {\n    case 'ListType':\n      return new definitions_1.ListType(copyType(type.ofType, subgraph, subgraphName));\n    case 'NonNullType':\n      return new definitions_1.NonNullType(copyType(type.ofType, subgraph, subgraphName));\n    default:\n      const subgraphType = subgraph.type(type.name);\n      (0, utils_1.assert)(subgraphType, () => `Cannot find type \"${type.name}\" in subgraph \"${subgraphName}\"`);\n      return subgraphType;\n  }\n}\nfunction addExternalFields(subgraph, supergraph, isFed1) {\n  const metadata = subgraph.metadata();\n  for (const type of subgraph.schema.types()) {\n    if (!(0, definitions_1.isObjectType)(type) && !(0, definitions_1.isInterfaceType)(type)) {\n      continue;\n    }\n    for (const keyApplication of type.appliedDirectivesOf(metadata.keyDirective())) {\n      const forceNonExternal = isFed1 || !!keyApplication.ofExtension();\n      addExternalFieldsFromDirectiveFieldSet(subgraph, type, keyApplication, supergraph, forceNonExternal);\n    }\n    for (const field of type.fields()) {\n      for (const requiresApplication of field.appliedDirectivesOf(metadata.requiresDirective())) {\n        addExternalFieldsFromDirectiveFieldSet(subgraph, type, requiresApplication, supergraph);\n      }\n      const fieldBaseType = (0, definitions_1.baseType)(field.type);\n      for (const providesApplication of field.appliedDirectivesOf(metadata.providesDirective())) {\n        (0, utils_1.assert)((0, definitions_1.isObjectType)(fieldBaseType) || (0, definitions_1.isInterfaceType)(fieldBaseType), () => `Found @provides on field ${field.coordinate} whose type ${field.type} (${fieldBaseType.kind}) is not an object or interface `);\n        addExternalFieldsFromDirectiveFieldSet(subgraph, fieldBaseType, providesApplication, supergraph);\n      }\n    }\n    addExternalFieldsFromInterface(metadata, type);\n  }\n}\nfunction addExternalFieldsFromDirectiveFieldSet(subgraph, parentType, directive, supergraph, forceNonExternal = false) {\n  const external = subgraph.metadata().externalDirective();\n  const fieldAccessor = function (type, fieldName) {\n    const field = type.field(fieldName);\n    if (field) {\n      if (forceNonExternal && field.hasAppliedDirective(external)) {\n        field.appliedDirectivesOf(external).forEach(d => d.remove());\n      }\n      return field;\n    }\n    (0, utils_1.assert)(!(0, definitions_1.isUnionType)(type), () => `Shouldn't select field ${fieldName} from union type ${type}`);\n    const supergraphType = supergraph.type(type.name);\n    const supergraphField = supergraphType.field(fieldName);\n    (0, utils_1.assert)(supergraphField, () => `No field named ${fieldName} found on type ${type.name} in the supergraph`);\n    const created = addSubgraphField({\n      field: supergraphField,\n      subgraph,\n      type,\n      isShareable: false\n    });\n    if (!forceNonExternal) {\n      created.applyDirective(external);\n    }\n    return created;\n  };\n  try {\n    (0, federation_1.parseFieldSetArgument)({\n      parentType,\n      directive,\n      fieldAccessor,\n      validate: false\n    });\n  } catch (e) {}\n}\nfunction addExternalFieldsFromInterface(metadata, type) {\n  for (const itf of type.interfaces()) {\n    for (const field of itf.fields()) {\n      const typeField = type.field(field.name);\n      if (!typeField) {\n        copyFieldAsExternal(metadata, field, type);\n      } else if (typeField.hasAppliedDirective(metadata.externalDirective())) {\n        maybeUpdateFieldForInterface(typeField, field);\n      }\n    }\n  }\n}\nfunction copyFieldAsExternal(metadata, field, type) {\n  const newField = type.addField(field.name, field.type);\n  for (const arg of field.arguments()) {\n    newField.addArgument(arg.name, arg.type, arg.defaultValue);\n  }\n  newField.applyDirective(metadata.externalDirective());\n}\nfunction maybeUpdateFieldForInterface(toModify, itfField) {\n  if (!(0, types_1.isSubtype)(itfField.type, toModify.type)) {\n    (0, utils_1.assert)((0, types_1.isSubtype)(toModify.type, itfField.type), () => `For ${toModify.coordinate}, expected ${itfField.type} and ${toModify.type} to be in a subtyping relationship`);\n    toModify.type = itfField.type;\n  }\n}\nfunction removeUnusedTypesFromSubgraph(schema) {\n  for (const type of schema.types()) {\n    switch (type.kind) {\n      case 'ObjectType':\n      case 'InterfaceType':\n      case 'InputObjectType':\n        if (!type.hasFields()) {\n          type.removeRecursive();\n        }\n        break;\n      case 'UnionType':\n        if (type.membersCount() === 0) {\n          type.removeRecursive();\n        }\n        break;\n    }\n  }\n}","map":{"version":3,"mappings":"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","names":["definitions_1","require","federation_1","coreSpec_1","federation_2","utils_1","supergraphs_1","buildSchema_1","types_1","print_1","operations_1","fs_1","__importDefault","path_1","utils_2","_1","filteredTypes","supergraph","joinSpec","coreSpec","types","filter","t","isSpecType","extractSubgraphsNamesAndUrlsFromSupergraph","_","validateSupergraph","subgraphs","collectEmptySubgraphs","values","map","subgraph","name","url","exports","Subgraphs","graphDirective","graphEnum","graphEnumNameToSubgraphName","Map","value","graphApplications","appliedDirectivesOf","length","Error","info","arguments","Subgraph","newEmptyFederation2Schema","add","set","SubgraphExtractionError","constructor","originalError","collectFieldReachableTypesForSubgraph","subgraphName","addReachableType","fieldInfoInSubgraph","typeInfoInSubgraph","seenTypes","Set","stack","schemaDefinition","roots","root","type","isEntityWithKeyInSubgraph","typesInFederationDirectives","push","forEach","pop","has","kind","allImplementations","interfaces","field","fields","isInSubgraph","arg","baseType","members","m","directive","directives","hasExecutableLocations","collectFieldReachableTypesForAllSubgraphs","allSubgraphs","reachableTypesBySubgraphs","reachableTypes","typesUsedInFederationDirective","fieldSet","parentType","usedTypes","parseSelectionSet","source","fieldAccessor","fieldName","validate","extractSubgraphsFromSupergraph","validateExtractedSubgraphs","coreFeatures","isFed1","version","equals","FeatureVersion","getSubgraph","application","graph","undefined","get","assert","parent","coreDefinition","args","extractSubgraphsFromFed1Supergraph","extractSubgraphsFromFed2Supergraph","e","assumeValid","error","impacted","msg","errorToString","dumpMsg","maybeDumpSubgraphSchema","addAllEmptySubgraphTypes","typeDirective","objOrItfTypes","inputObjTypes","enumTypes","unionTypes","typeApplications","subgraphsInfo","addEmptyType","schema","addType","newNamedType","key","extension","resolvable","isInterfaceObject","subgraphInfo","subgraphType","applyDirective","setOfExtension","newExtension","extractObjOrItfContent","fieldDirective","implementsDirective","implementsApplications","addImplementedInterface","interface","fieldApplications","isShareable","isObjectType","size","addSubgraphField","external","usedOverridden","joinFieldArgs","extractInputObjContent","addSubgraphInputField","extractEnumTypeContent","enumValueDirective","enumValueApplications","addValue","extractUnionTypeContent","unionMemberDirective","unionMemberApplications","member","subgraphMember","allExecutableDirectives","def","removeInactiveProvidesAndRequires","removeUnusedTypesFromSubgraph","definition","copyDirectiveDefinitionToSchema","copyDirectiveApplicationsInArguments","locationFilter","loc","isExecutableDirectiveLocation","DEBUG_SUBGRAPHS_ENV_VARIABLE_NAME","shouldDump","validateStringContainsBoolean","process","env","filename","Date","now","file","default","resolve","existsSync","writeFileSync","printSchema","e2","causes","errorCauses","printErrors","String","copiedFieldType","decodeType","copyType","subgraphField","addField","addArgument","defaultValue","requires","metadata","requiresDirective","provides","providesDirective","externalDirective","override","overrideDirective","shareableDirective","copiedType","inputField","ownerDirective","reachableTypesBySubgraph","names","f","find","_a","concat","ownerApplications","includeTypeInSubgraph","_b","implementations","interfaceImplementations","subgraphItf","addSubgraphFieldForFed1","fieldBaseType","s","subgraphEnum","isEnumType","subgraphUnion","isUnionType","memberTypeName","addExternalFields","FieldDefinition","encodedType","builtTypeReference","ListType","ofType","NonNullType","isInterfaceType","keyApplication","keyDirective","forceNonExternal","ofExtension","addExternalFieldsFromDirectiveFieldSet","requiresApplication","providesApplication","coordinate","addExternalFieldsFromInterface","hasAppliedDirective","d","remove","supergraphType","supergraphField","created","parseFieldSetArgument","itf","typeField","copyFieldAsExternal","maybeUpdateFieldForInterface","newField","toModify","itfField","isSubtype","hasFields","removeRecursive","membersCount"],"sourceRoot":"","sources":["../src/extractSubgraphsFromSupergraph.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}