{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.KnownTypeNamesInFederationRule = void 0;\nconst graphql_1 = require(\"graphql\");\nconst suggestions_1 = require(\"../suggestions\");\nfunction KnownTypeNamesInFederationRule(context) {\n  const schema = context.getSchema();\n  const existingTypesMap = schema ? schema.getTypeMap() : Object.create(null);\n  const definedTypes = Object.create(null);\n  for (const def of context.getDocument().definitions) {\n    if ((0, graphql_1.isTypeDefinitionNode)(def) || (0, graphql_1.isTypeExtensionNode)(def)) {\n      definedTypes[def.name.value] = true;\n    }\n  }\n  const typeNames = Object.keys(existingTypesMap).concat(Object.keys(definedTypes));\n  return {\n    NamedType(node, _1, parent, _2, ancestors) {\n      var _a;\n      const typeName = node.name.value;\n      if (!existingTypesMap[typeName] && !definedTypes[typeName]) {\n        const definitionNode = (_a = ancestors[2]) !== null && _a !== void 0 ? _a : parent;\n        const isSDL = definitionNode != null && isSDLNode(definitionNode);\n        if (isSDL && isStandardTypeName(typeName)) {\n          return;\n        }\n        const suggestedTypes = (0, suggestions_1.suggestionList)(typeName, isSDL ? standardTypeNames.concat(typeNames) : typeNames);\n        context.reportError(new graphql_1.GraphQLError(`Unknown type \"${typeName}\".` + (0, suggestions_1.didYouMean)(suggestedTypes), {\n          nodes: node\n        }));\n      }\n    }\n  };\n}\nexports.KnownTypeNamesInFederationRule = KnownTypeNamesInFederationRule;\nconst standardTypeNames = [...graphql_1.specifiedScalarTypes, ...graphql_1.introspectionTypes].map(type => type.name);\nfunction isStandardTypeName(typeName) {\n  return standardTypeNames.indexOf(typeName) !== -1;\n}\nfunction isSDLNode(value) {\n  return !Array.isArray(value) && ((0, graphql_1.isTypeSystemDefinitionNode)(value) || (0, graphql_1.isTypeSystemExtensionNode)(value));\n}","map":{"version":3,"mappings":";;;;;;AAAA,MAAAA,SAAA,GAAAC,OAAA;AAEA,MAAAC,aAAA,GAAAD,OAAA;AAKA,SAAgBE,8BAA8BA,CAC5CC,OAAiD;EAEjD,MAAMC,MAAM,GAAGD,OAAO,CAACE,SAAS,EAAE;EAClC,MAAMC,gBAAgB,GAAGF,MAAM,GAAGA,MAAM,CAACG,UAAU,EAAE,GAAGC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;EAE3E,MAAMC,YAAY,GAAGF,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;EACxC,KAAK,MAAME,GAAG,IAAIR,OAAO,CAACS,WAAW,EAAE,CAACC,WAAW,EAAE;IAEnD,IAAI,IAAAd,SAAA,CAAAe,oBAAoB,EAACH,GAAG,CAAC,IAAI,IAAAZ,SAAA,CAAAgB,mBAAmB,EAACJ,GAAG,CAAC,EAAE;MACzDD,YAAY,CAACC,GAAG,CAACK,IAAI,CAACC,KAAK,CAAC,GAAG,IAAI;;;EAIvC,MAAMC,SAAS,GAAGV,MAAM,CAACW,IAAI,CAACb,gBAAgB,CAAC,CAACc,MAAM,CACpDZ,MAAM,CAACW,IAAI,CAACT,YAAY,CAAC,CAC1B;EAED,OAAO;IACLW,SAASA,CAACC,IAAI,EAAEC,EAAE,EAAEC,MAAM,EAAEC,EAAE,EAAEC,SAAS;;MACvC,MAAMC,QAAQ,GAAGL,IAAI,CAACN,IAAI,CAACC,KAAK;MAChC,IAAI,CAACX,gBAAgB,CAACqB,QAAQ,CAAC,IAAI,CAACjB,YAAY,CAACiB,QAAQ,CAAC,EAAE;QAC1D,MAAMC,cAAc,GAAG,CAAAC,EAAA,GAAAH,SAAS,CAAC,CAAC,CAAC,cAAAG,EAAA,cAAAA,EAAA,GAAIL,MAAM;QAC7C,MAAMM,KAAK,GAAGF,cAAc,IAAI,IAAI,IAAIG,SAAS,CAACH,cAAc,CAAC;QACjE,IAAIE,KAAK,IAAIE,kBAAkB,CAACL,QAAQ,CAAC,EAAE;UACzC;;QAGF,MAAMM,cAAc,GAAG,IAAAhC,aAAA,CAAAiC,cAAc,EACnCP,QAAQ,EACRG,KAAK,GAAGK,iBAAiB,CAACf,MAAM,CAACF,SAAS,CAAC,GAAGA,SAAS,CACxD;QACDf,OAAO,CAACiC,WAAW,CACjB,IAAIrC,SAAA,CAAAsC,YAAY,CACd,iBAAiBV,QAAQ,IAAI,GAAG,IAAA1B,aAAA,CAAAqC,UAAU,EAACL,cAAc,CAAC,EAC1D;UAAEM,KAAK,EAAEjB;QAAI,CAAE,CAChB,CACF;;IAEL;GACD;AACH;AAzCAkB,OAAA,CAAAtC,8BAAA,GAAAA,8BAAA;AA2CA,MAAMiC,iBAAiB,GAAG,CAAC,GAAGpC,SAAA,CAAA0C,oBAAoB,EAAE,GAAG1C,SAAA,CAAA2C,kBAAkB,CAAC,CAACC,GAAG,CAC3EC,IAAI,IAAKA,IAAI,CAAC5B,IAAI,CACpB;AAED,SAASgB,kBAAkBA,CAACL,QAAgB;EAC1C,OAAOQ,iBAAiB,CAACU,OAAO,CAAClB,QAAQ,CAAC,KAAK,CAAC,CAAC;AACnD;AAEA,SAASI,SAASA,CAACd,KAAmC;EACpD,OACE,CAAC6B,KAAK,CAACC,OAAO,CAAC9B,KAAK,CAAC,KACpB,IAAAlB,SAAA,CAAAiD,0BAA0B,EAAC/B,KAAgB,CAAC,IAAI,IAAAlB,SAAA,CAAAkD,yBAAyB,EAAChC,KAAgB,CAAC,CAAC;AAEjG","names":["graphql_1","require","suggestions_1","KnownTypeNamesInFederationRule","context","schema","getSchema","existingTypesMap","getTypeMap","Object","create","definedTypes","def","getDocument","definitions","isTypeDefinitionNode","isTypeExtensionNode","name","value","typeNames","keys","concat","NamedType","node","_1","parent","_2","ancestors","typeName","definitionNode","_a","isSDL","isSDLNode","isStandardTypeName","suggestedTypes","suggestionList","standardTypeNames","reportError","GraphQLError","didYouMean","nodes","exports","specifiedScalarTypes","introspectionTypes","map","type","indexOf","Array","isArray","isTypeSystemDefinitionNode","isTypeSystemExtensionNode"],"sourceRoot":"","sources":["../../src/validation/KnownTypeNamesInFederationRule.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}