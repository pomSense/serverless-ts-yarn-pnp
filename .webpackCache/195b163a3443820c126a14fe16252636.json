{"ast":null,"code":"\"use strict\";\n\nconst url = require('url');\nconst {\n  getEventBody,\n  getCommaDelimitedHeaders\n} = require('../utils');\nfunction getRequestValuesFromApiGatewayEvent({\n  event\n}) {\n  const {\n    requestContext,\n    requestPath,\n    rawPath,\n    rawQueryString,\n    cookies\n  } = event;\n  const method = requestContext.http.method;\n  const requestPathOrRawPath = requestPath || rawPath;\n  const basePath = ''; // TODO: Test with custom domain\n  const stripBasePathRegex = new RegExp(`^${basePath}`);\n  const path = url.format({\n    pathname: requestPathOrRawPath.replace(stripBasePathRegex, ''),\n    search: rawQueryString\n  });\n  const headers = {};\n  if (cookies) {\n    headers.cookie = cookies.join('; ');\n  }\n  Object.entries(event.headers).forEach(([headerKey, headerValue]) => {\n    headers[headerKey.toLowerCase()] = headerValue;\n  });\n  let body;\n  if (event.body) {\n    body = getEventBody({\n      event\n    });\n    const isBase64Encoded = event.isBase64Encoded;\n    headers['content-length'] = Buffer.byteLength(body, isBase64Encoded ? 'base64' : 'utf8');\n  }\n  return {\n    method,\n    headers,\n    body,\n    remoteAddress: requestContext.http.sourceIp,\n    path\n  };\n}\nfunction getResponseToApiGateway({\n  statusCode,\n  body,\n  headers = {},\n  isBase64Encoded = false,\n  response = {}\n}) {\n  if (headers['transfer-encoding'] === 'chunked' || response.chunkedEncoding) {\n    throw new Error('chunked encoding is not supported by API Gateway');\n  }\n  const responseToApiGateway = {\n    statusCode,\n    body,\n    isBase64Encoded\n  };\n  const cookies = headers['set-cookie'];\n  if (cookies) {\n    responseToApiGateway.cookies = Array.isArray(cookies) ? cookies : [cookies];\n    delete headers['set-cookie'];\n  }\n  responseToApiGateway.headers = getCommaDelimitedHeaders({\n    headersMap: headers\n  });\n  return responseToApiGateway;\n}\nmodule.exports = {\n  getRequest: getRequestValuesFromApiGatewayEvent,\n  getResponse: getResponseToApiGateway\n};","map":{"version":3,"names":["url","require","getEventBody","getCommaDelimitedHeaders","getRequestValuesFromApiGatewayEvent","event","requestContext","requestPath","rawPath","rawQueryString","cookies","method","http","requestPathOrRawPath","basePath","stripBasePathRegex","RegExp","path","format","pathname","replace","search","headers","cookie","join","Object","entries","forEach","headerKey","headerValue","toLowerCase","body","isBase64Encoded","Buffer","byteLength","remoteAddress","sourceIp","getResponseToApiGateway","statusCode","response","chunkedEncoding","Error","responseToApiGateway","Array","isArray","headersMap","module","exports","getRequest","getResponse"],"sources":["/Users/pom/Code/serverless-ts-yarn-pnp/.yarn/cache/@vendia-serverless-express-npm-4.10.4-2e67e59920-f33d3f0f08.zip/node_modules/@vendia/serverless-express/src/event-sources/aws/api-gateway-v2.js"],"sourcesContent":["const url = require('url')\nconst { getEventBody, getCommaDelimitedHeaders } = require('../utils')\n\nfunction getRequestValuesFromApiGatewayEvent ({ event }) {\n  const {\n    requestContext,\n    requestPath,\n    rawPath,\n    rawQueryString,\n    cookies\n  } = event\n  const method = requestContext.http.method\n  const requestPathOrRawPath = requestPath || rawPath\n  const basePath = '' // TODO: Test with custom domain\n  const stripBasePathRegex = new RegExp(`^${basePath}`)\n  const path = url.format({\n    pathname: requestPathOrRawPath.replace(stripBasePathRegex, ''),\n    search: rawQueryString\n  })\n\n  const headers = {}\n\n  if (cookies) {\n    headers.cookie = cookies.join('; ')\n  }\n\n  Object.entries(event.headers).forEach(([headerKey, headerValue]) => {\n    headers[headerKey.toLowerCase()] = headerValue\n  })\n\n  let body\n\n  if (event.body) {\n    body = getEventBody({ event })\n    const isBase64Encoded = event.isBase64Encoded\n    headers['content-length'] = Buffer.byteLength(body, isBase64Encoded ? 'base64' : 'utf8')\n  }\n\n  return {\n    method,\n    headers,\n    body,\n    remoteAddress: requestContext.http.sourceIp,\n    path\n  }\n}\n\nfunction getResponseToApiGateway ({\n  statusCode,\n  body,\n  headers = {},\n  isBase64Encoded = false,\n  response = {}\n}) {\n  if (headers['transfer-encoding'] === 'chunked' || response.chunkedEncoding) {\n    throw new Error('chunked encoding is not supported by API Gateway')\n  }\n\n  const responseToApiGateway = {\n    statusCode,\n    body,\n    isBase64Encoded\n  }\n\n  const cookies = headers['set-cookie']\n  if (cookies) {\n    responseToApiGateway.cookies = Array.isArray(cookies) ? cookies : [cookies]\n    delete headers['set-cookie']\n  }\n\n  responseToApiGateway.headers = getCommaDelimitedHeaders({ headersMap: headers })\n\n  return responseToApiGateway\n}\n\nmodule.exports = {\n  getRequest: getRequestValuesFromApiGatewayEvent,\n  getResponse: getResponseToApiGateway\n}\n"],"mappings":";;AAAA,MAAMA,GAAG,GAAGC,OAAO,CAAC,KAAK,CAAC;AAC1B,MAAM;EAAEC,YAAY;EAAEC;AAAyB,CAAC,GAAGF,OAAO,CAAC,UAAU,CAAC;AAEtE,SAASG,mCAAmCA,CAAE;EAAEC;AAAM,CAAC,EAAE;EACvD,MAAM;IACJC,cAAc;IACdC,WAAW;IACXC,OAAO;IACPC,cAAc;IACdC;EACF,CAAC,GAAGL,KAAK;EACT,MAAMM,MAAM,GAAGL,cAAc,CAACM,IAAI,CAACD,MAAM;EACzC,MAAME,oBAAoB,GAAGN,WAAW,IAAIC,OAAO;EACnD,MAAMM,QAAQ,GAAG,EAAE,EAAC;EACpB,MAAMC,kBAAkB,GAAG,IAAIC,MAAM,CAAE,IAAGF,QAAS,EAAC,CAAC;EACrD,MAAMG,IAAI,GAAGjB,GAAG,CAACkB,MAAM,CAAC;IACtBC,QAAQ,EAAEN,oBAAoB,CAACO,OAAO,CAACL,kBAAkB,EAAE,EAAE,CAAC;IAC9DM,MAAM,EAAEZ;EACV,CAAC,CAAC;EAEF,MAAMa,OAAO,GAAG,CAAC,CAAC;EAElB,IAAIZ,OAAO,EAAE;IACXY,OAAO,CAACC,MAAM,GAAGb,OAAO,CAACc,IAAI,CAAC,IAAI,CAAC;EACrC;EAEAC,MAAM,CAACC,OAAO,CAACrB,KAAK,CAACiB,OAAO,CAAC,CAACK,OAAO,CAAC,CAAC,CAACC,SAAS,EAAEC,WAAW,CAAC,KAAK;IAClEP,OAAO,CAACM,SAAS,CAACE,WAAW,CAAC,CAAC,CAAC,GAAGD,WAAW;EAChD,CAAC,CAAC;EAEF,IAAIE,IAAI;EAER,IAAI1B,KAAK,CAAC0B,IAAI,EAAE;IACdA,IAAI,GAAG7B,YAAY,CAAC;MAAEG;IAAM,CAAC,CAAC;IAC9B,MAAM2B,eAAe,GAAG3B,KAAK,CAAC2B,eAAe;IAC7CV,OAAO,CAAC,gBAAgB,CAAC,GAAGW,MAAM,CAACC,UAAU,CAACH,IAAI,EAAEC,eAAe,GAAG,QAAQ,GAAG,MAAM,CAAC;EAC1F;EAEA,OAAO;IACLrB,MAAM;IACNW,OAAO;IACPS,IAAI;IACJI,aAAa,EAAE7B,cAAc,CAACM,IAAI,CAACwB,QAAQ;IAC3CnB;EACF,CAAC;AACH;AAEA,SAASoB,uBAAuBA,CAAE;EAChCC,UAAU;EACVP,IAAI;EACJT,OAAO,GAAG,CAAC,CAAC;EACZU,eAAe,GAAG,KAAK;EACvBO,QAAQ,GAAG,CAAC;AACd,CAAC,EAAE;EACD,IAAIjB,OAAO,CAAC,mBAAmB,CAAC,KAAK,SAAS,IAAIiB,QAAQ,CAACC,eAAe,EAAE;IAC1E,MAAM,IAAIC,KAAK,CAAC,kDAAkD,CAAC;EACrE;EAEA,MAAMC,oBAAoB,GAAG;IAC3BJ,UAAU;IACVP,IAAI;IACJC;EACF,CAAC;EAED,MAAMtB,OAAO,GAAGY,OAAO,CAAC,YAAY,CAAC;EACrC,IAAIZ,OAAO,EAAE;IACXgC,oBAAoB,CAAChC,OAAO,GAAGiC,KAAK,CAACC,OAAO,CAAClC,OAAO,CAAC,GAAGA,OAAO,GAAG,CAACA,OAAO,CAAC;IAC3E,OAAOY,OAAO,CAAC,YAAY,CAAC;EAC9B;EAEAoB,oBAAoB,CAACpB,OAAO,GAAGnB,wBAAwB,CAAC;IAAE0C,UAAU,EAAEvB;EAAQ,CAAC,CAAC;EAEhF,OAAOoB,oBAAoB;AAC7B;AAEAI,MAAM,CAACC,OAAO,GAAG;EACfC,UAAU,EAAE5C,mCAAmC;EAC/C6C,WAAW,EAAEZ;AACf,CAAC"},"metadata":{},"sourceType":"module"}