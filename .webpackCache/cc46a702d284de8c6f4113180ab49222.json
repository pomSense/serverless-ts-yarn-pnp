{"ast":null,"code":"\"use strict\";\n\n/**\n * DynamoDB Toolbox: A simple set of tools for working with Amazon DynamoDB\n * @author Jeremy Daly <jeremy@jeremydaly.com>\n * @license MIT\n */\nvar __importDefault = undefined && undefined.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst parseMapping_1 = __importDefault(require(\"./parseMapping\"));\nconst parseCompositeKey_1 = __importDefault(require(\"./parseCompositeKey\"));\nconst utils_1 = require(\"./utils\");\nexports.default = (attributes, track) => {\n  // Parse attributes into standard format\n  attributes = Object.keys(attributes).reduce((acc, field) => {\n    // If a string value\n    if (typeof attributes[field] === 'string') {\n      // If invalid type, throw error\n      if (!utils_1.validTypes.includes(attributes[field].toString())) {\n        utils_1.typeError(field);\n      }\n      // Merge and return mapping\n      return Object.assign(acc, parseMapping_1.default(field, {\n        type: attributes[field]\n      }, track));\n      // If an array\n    } else if (Array.isArray(attributes[field])) {\n      return Object.assign(acc, parseCompositeKey_1.default(field, attributes[field], track, attributes));\n      // Else if complex mapping\n    } else {\n      // TODO: Is there a better way to do this without casting this value?\n      const fieldVal = attributes[field];\n      // Default field to 'string'\n      fieldVal.type = !fieldVal.type ? 'string' : fieldVal.type;\n      if (!utils_1.validTypes.includes(fieldVal.type)) {\n        utils_1.typeError(field);\n      }\n      return Object.assign(acc, parseMapping_1.default(field, fieldVal, track));\n    }\n  }, {});\n  // Check that a partitionKey was defined (additional checks done when adding table)\n  if (!track.keys.partitionKey) utils_1.error('Entity requires a partitionKey attribute');\n  // Return keys and attributes\n  return {\n    keys: track.keys,\n    attributes: attributes\n  };\n}; // end parseEntityAttrbutes","map":{"version":3,"names":["__importDefault","undefined","mod","__esModule","Object","defineProperty","exports","value","parseMapping_1","require","parseCompositeKey_1","utils_1","default","attributes","track","keys","reduce","acc","field","validTypes","includes","toString","typeError","assign","type","Array","isArray","fieldVal","partitionKey","error"],"sources":["/Users/pom/Code/serverless-ts-yarn-pnp/.yarn/cache/dynamodb-toolbox-npm-0.3.5-3ff4bf5328-d75542b529.zip/node_modules/dynamodb-toolbox/dist/lib/parseEntityAttributes.js"],"sourcesContent":["\"use strict\";\n/**\n * DynamoDB Toolbox: A simple set of tools for working with Amazon DynamoDB\n * @author Jeremy Daly <jeremy@jeremydaly.com>\n * @license MIT\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst parseMapping_1 = __importDefault(require(\"./parseMapping\"));\nconst parseCompositeKey_1 = __importDefault(require(\"./parseCompositeKey\"));\nconst utils_1 = require(\"./utils\");\nexports.default = (attributes, track) => {\n    // Parse attributes into standard format\n    attributes = Object.keys(attributes).reduce((acc, field) => {\n        // If a string value\n        if (typeof attributes[field] === 'string') {\n            // If invalid type, throw error\n            if (!utils_1.validTypes.includes(attributes[field].toString())) {\n                utils_1.typeError(field);\n            }\n            // Merge and return mapping\n            return Object.assign(acc, parseMapping_1.default(field, { type: attributes[field] }, track));\n            // If an array\n        }\n        else if (Array.isArray(attributes[field])) {\n            return Object.assign(acc, parseCompositeKey_1.default(field, attributes[field], track, attributes));\n            // Else if complex mapping\n        }\n        else {\n            // TODO: Is there a better way to do this without casting this value?\n            const fieldVal = attributes[field];\n            // Default field to 'string'\n            fieldVal.type = !fieldVal.type ? 'string' : fieldVal.type;\n            if (!utils_1.validTypes.includes(fieldVal.type)) {\n                utils_1.typeError(field);\n            }\n            return Object.assign(acc, parseMapping_1.default(field, fieldVal, track));\n        }\n    }, {});\n    // Check that a partitionKey was defined (additional checks done when adding table)\n    if (!track.keys.partitionKey)\n        utils_1.error('Entity requires a partitionKey attribute');\n    // Return keys and attributes\n    return {\n        keys: track.keys,\n        attributes: attributes\n    };\n}; // end parseEntityAttrbutes\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA,IAAIA,eAAe,GAAIC,SAAA,IAAQA,SAAA,CAAKD,eAAe,IAAK,UAAUE,GAAG,EAAE;EACnE,OAAQA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAID,GAAG,GAAG;IAAE,SAAS,EAAEA;EAAI,CAAC;AAC7D,CAAC;AACDE,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,MAAMC,cAAc,GAAGR,eAAe,CAACS,OAAO,CAAC,gBAAgB,CAAC,CAAC;AACjE,MAAMC,mBAAmB,GAAGV,eAAe,CAACS,OAAO,CAAC,qBAAqB,CAAC,CAAC;AAC3E,MAAME,OAAO,GAAGF,OAAO,CAAC,SAAS,CAAC;AAClCH,OAAO,CAACM,OAAO,GAAG,CAACC,UAAU,EAAEC,KAAK,KAAK;EACrC;EACAD,UAAU,GAAGT,MAAM,CAACW,IAAI,CAACF,UAAU,CAAC,CAACG,MAAM,CAAC,CAACC,GAAG,EAAEC,KAAK,KAAK;IACxD;IACA,IAAI,OAAOL,UAAU,CAACK,KAAK,CAAC,KAAK,QAAQ,EAAE;MACvC;MACA,IAAI,CAACP,OAAO,CAACQ,UAAU,CAACC,QAAQ,CAACP,UAAU,CAACK,KAAK,CAAC,CAACG,QAAQ,CAAC,CAAC,CAAC,EAAE;QAC5DV,OAAO,CAACW,SAAS,CAACJ,KAAK,CAAC;MAC5B;MACA;MACA,OAAOd,MAAM,CAACmB,MAAM,CAACN,GAAG,EAAET,cAAc,CAACI,OAAO,CAACM,KAAK,EAAE;QAAEM,IAAI,EAAEX,UAAU,CAACK,KAAK;MAAE,CAAC,EAAEJ,KAAK,CAAC,CAAC;MAC5F;IACJ,CAAC,MACI,IAAIW,KAAK,CAACC,OAAO,CAACb,UAAU,CAACK,KAAK,CAAC,CAAC,EAAE;MACvC,OAAOd,MAAM,CAACmB,MAAM,CAACN,GAAG,EAAEP,mBAAmB,CAACE,OAAO,CAACM,KAAK,EAAEL,UAAU,CAACK,KAAK,CAAC,EAAEJ,KAAK,EAAED,UAAU,CAAC,CAAC;MACnG;IACJ,CAAC,MACI;MACD;MACA,MAAMc,QAAQ,GAAGd,UAAU,CAACK,KAAK,CAAC;MAClC;MACAS,QAAQ,CAACH,IAAI,GAAG,CAACG,QAAQ,CAACH,IAAI,GAAG,QAAQ,GAAGG,QAAQ,CAACH,IAAI;MACzD,IAAI,CAACb,OAAO,CAACQ,UAAU,CAACC,QAAQ,CAACO,QAAQ,CAACH,IAAI,CAAC,EAAE;QAC7Cb,OAAO,CAACW,SAAS,CAACJ,KAAK,CAAC;MAC5B;MACA,OAAOd,MAAM,CAACmB,MAAM,CAACN,GAAG,EAAET,cAAc,CAACI,OAAO,CAACM,KAAK,EAAES,QAAQ,EAAEb,KAAK,CAAC,CAAC;IAC7E;EACJ,CAAC,EAAE,CAAC,CAAC,CAAC;EACN;EACA,IAAI,CAACA,KAAK,CAACC,IAAI,CAACa,YAAY,EACxBjB,OAAO,CAACkB,KAAK,CAAC,0CAA0C,CAAC;EAC7D;EACA,OAAO;IACHd,IAAI,EAAED,KAAK,CAACC,IAAI;IAChBF,UAAU,EAAEA;EAChB,CAAC;AACL,CAAC,CAAC,CAAC"},"metadata":{},"sourceType":"module"}