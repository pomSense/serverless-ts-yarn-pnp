{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = undefined && undefined.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ApolloServer = void 0;\nconst express_1 = __importDefault(require(\"express\"));\nconst cors_1 = __importDefault(require(\"cors\"));\nconst body_parser_1 = require(\"body-parser\");\nconst apollo_server_core_1 = require(\"apollo-server-core\");\nconst accepts_1 = __importDefault(require(\"accepts\"));\nvar apollo_server_core_2 = require(\"apollo-server-core\");\nclass ApolloServer extends apollo_server_core_1.ApolloServerBase {\n  async createGraphQLServerOptions(req, res) {\n    const contextParams = {\n      req,\n      res\n    };\n    return super.graphQLServerOptions(contextParams);\n  }\n  applyMiddleware({\n    app,\n    ...rest\n  }) {\n    this.assertStarted('applyMiddleware');\n    app.use(this.getMiddleware(rest));\n  }\n  getMiddleware({\n    path,\n    cors,\n    bodyParserConfig,\n    disableHealthCheck,\n    onHealthCheck,\n    __internal_healthCheckPath\n  } = {}) {\n    if (!path) path = '/graphql';\n    this.assertStarted('getMiddleware');\n    const router = express_1.default.Router();\n    if (!disableHealthCheck && __internal_healthCheckPath !== null) {\n      router.use(__internal_healthCheckPath !== null && __internal_healthCheckPath !== void 0 ? __internal_healthCheckPath : '/.well-known/apollo/server-health', (req, res) => {\n        res.type('application/health+json');\n        if (onHealthCheck) {\n          onHealthCheck(req).then(() => {\n            res.json({\n              status: 'pass'\n            });\n          }).catch(() => {\n            res.status(503).json({\n              status: 'fail'\n            });\n          });\n        } else {\n          res.json({\n            status: 'pass'\n          });\n        }\n      });\n    }\n    this.graphqlPath = path;\n    if (cors === true) {\n      router.use(path, (0, cors_1.default)());\n    } else if (cors !== false) {\n      router.use(path, (0, cors_1.default)(cors));\n    }\n    if (bodyParserConfig === true) {\n      router.use(path, (0, body_parser_1.json)());\n    } else if (bodyParserConfig !== false) {\n      router.use(path, (0, body_parser_1.json)(bodyParserConfig));\n    }\n    const landingPage = this.getLandingPage();\n    router.use(path, (req, res, next) => {\n      if (landingPage && prefersHtml(req)) {\n        res.setHeader('Content-Type', 'text/html');\n        res.write(landingPage.html);\n        res.end();\n        return;\n      }\n      if (!req.body) {\n        res.status(500);\n        if (bodyParserConfig === false) {\n          res.send('`res.body` is not set; you passed `bodyParserConfig: false`, ' + 'but you still need to use `body-parser` middleware yourself.');\n        } else {\n          res.send('`res.body` is not set even though Apollo Server installed ' + \"`body-parser` middleware; this shouldn't happen!\");\n        }\n        return;\n      }\n      (0, apollo_server_core_1.runHttpQuery)([], {\n        method: req.method,\n        options: () => this.createGraphQLServerOptions(req, res),\n        query: req.method === 'POST' ? req.body : req.query,\n        request: (0, apollo_server_core_1.convertNodeHttpToRequest)(req)\n      }, this.csrfPreventionRequestHeaders).then(({\n        graphqlResponse,\n        responseInit\n      }) => {\n        if (responseInit.headers) {\n          for (const [name, value] of Object.entries(responseInit.headers)) {\n            res.setHeader(name, value);\n          }\n        }\n        res.statusCode = responseInit.status || 200;\n        if (typeof res.send === 'function') {\n          res.send(graphqlResponse);\n        } else {\n          res.end(graphqlResponse);\n        }\n      }, error => {\n        if (!(0, apollo_server_core_1.isHttpQueryError)(error)) {\n          return next(error);\n        }\n        if (error.headers) {\n          for (const [name, value] of Object.entries(error.headers)) {\n            res.setHeader(name, value);\n          }\n        }\n        res.statusCode = error.statusCode;\n        if (typeof res.send === 'function') {\n          res.send(error.message);\n        } else {\n          res.end(error.message);\n        }\n      });\n    });\n    return router;\n  }\n}\nexports.ApolloServer = ApolloServer;\nfunction prefersHtml(req) {\n  if (req.method !== 'GET') {\n    return false;\n  }\n  const accept = (0, accepts_1.default)(req);\n  const types = accept.types();\n  return types.find(x => x === 'text/html' || x === 'application/json') === 'text/html';\n}","map":{"version":3,"mappings":"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","names":["express_1","__importDefault","require","cors_1","body_parser_1","apollo_server_core_1","accepts_1","apollo_server_core_2","ApolloServer","ApolloServerBase","createGraphQLServerOptions","req","res","contextParams","graphQLServerOptions","applyMiddleware","app","rest","assertStarted","use","getMiddleware","path","cors","bodyParserConfig","disableHealthCheck","onHealthCheck","__internal_healthCheckPath","router","default","Router","type","then","json","status","catch","graphqlPath","landingPage","getLandingPage","next","prefersHtml","setHeader","write","html","end","body","send","runHttpQuery","method","options","query","request","convertNodeHttpToRequest","csrfPreventionRequestHeaders","graphqlResponse","responseInit","headers","name","value","Object","entries","statusCode","error","isHttpQueryError","message","exports","accept","types","find","x"],"sourceRoot":"","sources":["../src/ApolloServer.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}