{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nconst graphql = require('graphql');\nfunction extractFragmentReplacements(resolvers) {\n  const allFragmentReplacements = [];\n  for (const typeName in resolvers) {\n    const fieldResolvers = resolvers[typeName];\n    for (const fieldName in fieldResolvers) {\n      const fieldResolver = fieldResolvers[fieldName];\n      if (typeof fieldResolver === \"object\" && fieldResolver.fragment) {\n        allFragmentReplacements.push({\n          field: fieldName,\n          fragment: fieldResolver.fragment\n        });\n      }\n      if (typeof fieldResolver === \"object\" && fieldResolver.fragments) {\n        for (const fragment of fieldResolver.fragments) {\n          allFragmentReplacements.push({\n            field: fieldName,\n            fragment\n          });\n        }\n      }\n    }\n  }\n  const fragmentReplacements = allFragmentReplacements.filter(fragment => Boolean(fragment)).map(fragmentReplacement => {\n    const fragment = parseFragmentToInlineFragment(fragmentReplacement.fragment);\n    const newSelections = fragment.selectionSet.selections.filter(node => {\n      switch (node.kind) {\n        case graphql.Kind.FIELD:\n          {\n            return node.name.value !== fragmentReplacement.field;\n          }\n        default:\n          {\n            return true;\n          }\n      }\n    });\n    if (newSelections.length === 0) {\n      return null;\n    }\n    const newFragment = {\n      ...fragment,\n      selectionSet: {\n        kind: fragment.selectionSet.kind,\n        loc: fragment.selectionSet.loc,\n        selections: newSelections\n      }\n    };\n    const parsedFragment = graphql.print(newFragment);\n    return {\n      field: fragmentReplacement.field,\n      fragment: parsedFragment\n    };\n  }).filter(fr => fr !== null);\n  return fragmentReplacements;\n  function parseFragmentToInlineFragment(definitions) {\n    if (definitions.trim().startsWith(\"fragment\")) {\n      const document = graphql.parse(definitions);\n      for (const definition of document.definitions) {\n        if (definition.kind === graphql.Kind.FRAGMENT_DEFINITION) {\n          return {\n            kind: graphql.Kind.INLINE_FRAGMENT,\n            typeCondition: definition.typeCondition,\n            selectionSet: definition.selectionSet\n          };\n        }\n      }\n    }\n    const query = graphql.parse(`{${definitions}}`).definitions[0];\n    for (const selection of query.selectionSet.selections) {\n      if (selection.kind === graphql.Kind.INLINE_FRAGMENT) {\n        return selection;\n      }\n    }\n    throw new Error(\"Could not parse fragment\");\n  }\n}\nexports.extractFragmentReplacements = extractFragmentReplacements;","map":{"version":3,"names":["Object","defineProperty","exports","value","graphql","require","extractFragmentReplacements","resolvers","allFragmentReplacements","typeName","fieldResolvers","fieldName","fieldResolver","fragment","push","field","fragments","fragmentReplacements","filter","Boolean","map","fragmentReplacement","parseFragmentToInlineFragment","newSelections","selectionSet","selections","node","kind","Kind","FIELD","name","length","newFragment","loc","parsedFragment","print","fr","definitions","trim","startsWith","document","parse","definition","FRAGMENT_DEFINITION","INLINE_FRAGMENT","typeCondition","query","selection","Error"],"sources":["/Users/pom/Code/serverless-ts-yarn-pnp/.yarn/__virtual__/graphql-middleware-virtual-8e3b5d6992/0/cache/graphql-middleware-npm-6.1.21-7377367d5a-e7172dbe7c.zip/node_modules/graphql-middleware/dist/fragments.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nconst graphql = require('graphql');\n\nfunction extractFragmentReplacements(resolvers) {\n  const allFragmentReplacements = [];\n  for (const typeName in resolvers) {\n    const fieldResolvers = resolvers[typeName];\n    for (const fieldName in fieldResolvers) {\n      const fieldResolver = fieldResolvers[fieldName];\n      if (typeof fieldResolver === \"object\" && fieldResolver.fragment) {\n        allFragmentReplacements.push({\n          field: fieldName,\n          fragment: fieldResolver.fragment\n        });\n      }\n      if (typeof fieldResolver === \"object\" && fieldResolver.fragments) {\n        for (const fragment of fieldResolver.fragments) {\n          allFragmentReplacements.push({\n            field: fieldName,\n            fragment\n          });\n        }\n      }\n    }\n  }\n  const fragmentReplacements = allFragmentReplacements.filter((fragment) => Boolean(fragment)).map((fragmentReplacement) => {\n    const fragment = parseFragmentToInlineFragment(fragmentReplacement.fragment);\n    const newSelections = fragment.selectionSet.selections.filter((node) => {\n      switch (node.kind) {\n        case graphql.Kind.FIELD: {\n          return node.name.value !== fragmentReplacement.field;\n        }\n        default: {\n          return true;\n        }\n      }\n    });\n    if (newSelections.length === 0) {\n      return null;\n    }\n    const newFragment = {\n      ...fragment,\n      selectionSet: {\n        kind: fragment.selectionSet.kind,\n        loc: fragment.selectionSet.loc,\n        selections: newSelections\n      }\n    };\n    const parsedFragment = graphql.print(newFragment);\n    return {\n      field: fragmentReplacement.field,\n      fragment: parsedFragment\n    };\n  }).filter((fr) => fr !== null);\n  return fragmentReplacements;\n  function parseFragmentToInlineFragment(definitions) {\n    if (definitions.trim().startsWith(\"fragment\")) {\n      const document = graphql.parse(definitions);\n      for (const definition of document.definitions) {\n        if (definition.kind === graphql.Kind.FRAGMENT_DEFINITION) {\n          return {\n            kind: graphql.Kind.INLINE_FRAGMENT,\n            typeCondition: definition.typeCondition,\n            selectionSet: definition.selectionSet\n          };\n        }\n      }\n    }\n    const query = graphql.parse(`{${definitions}}`).definitions[0];\n    for (const selection of query.selectionSet.selections) {\n      if (selection.kind === graphql.Kind.INLINE_FRAGMENT) {\n        return selection;\n      }\n    }\n    throw new Error(\"Could not parse fragment\");\n  }\n}\n\nexports.extractFragmentReplacements = extractFragmentReplacements;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}