{"ast":null,"code":"\"use strict\";\n\n/**\n * DynamoDB Toolbox: A simple set of tools for working with Amazon DynamoDB\n * @author Jeremy Daly <jeremy@jeremydaly.com>\n * @license MIT\n */\nvar __importDefault = undefined && undefined.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst utils_1 = require(\"./utils\");\nconst parseMapping_1 = __importDefault(require(\"./parseMapping\"));\nexports.default = (field, config, track, schema) => {\n  if (config.length >= 2 && config.length <= 3) {\n    let link = schema[config[0]] ? config[0] : utils_1.error(`'${field}' must reference another field`);\n    let pos = parseInt(config[1].toString()) === config[1] ? config[1] : utils_1.error(`'${field}' position value must be numeric`);\n    let sub_config = !config[2] ? {\n      type: 'string'\n    } : ['string', 'number', 'boolean'].includes(config[2].toString()) ? {\n      type: config[2]\n    } : typeof config[2] === 'object' && !Array.isArray(config[2]) ? config[2] : utils_1.error(`'${field}' type must be 'string', 'number', 'boolean' or a configuration object`);\n    // Add linked fields\n    if (!track.linked[link]) track.linked[link] = [];\n    track.linked[link][pos] = field;\n    // Merge/validate extra config data and add link and pos\n    return Object.assign({\n      [field]: Object.assign({\n        save: true\n      },\n      // default save to true\n      parseMapping_1.default(field, sub_config, track)[field], {\n        link,\n        pos\n      })\n    }, sub_config.alias ? {\n      [sub_config.alias]: Object.assign({}, sub_config, {\n        map: field\n      })\n    } : {}); // end assign\n  } else {\n    utils_1.error(`Composite key configurations must have 2 or 3 items`);\n  }\n};","map":{"version":3,"names":["__importDefault","undefined","mod","__esModule","Object","defineProperty","exports","value","utils_1","require","parseMapping_1","default","field","config","track","schema","length","link","error","pos","parseInt","toString","sub_config","type","includes","Array","isArray","linked","assign","save","alias","map"],"sources":["/Users/pom/Code/serverless-ts-yarn-pnp/.yarn/cache/dynamodb-toolbox-npm-0.3.5-3ff4bf5328-d75542b529.zip/node_modules/dynamodb-toolbox/dist/lib/parseCompositeKey.js"],"sourcesContent":["\"use strict\";\n/**\n * DynamoDB Toolbox: A simple set of tools for working with Amazon DynamoDB\n * @author Jeremy Daly <jeremy@jeremydaly.com>\n * @license MIT\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"./utils\");\nconst parseMapping_1 = __importDefault(require(\"./parseMapping\"));\nexports.default = (field, config, track, schema) => {\n    if (config.length >= 2 && config.length <= 3) {\n        let link = schema[config[0]] ? config[0]\n            : utils_1.error(`'${field}' must reference another field`);\n        let pos = parseInt(config[1].toString()) === config[1] ? config[1]\n            : utils_1.error(`'${field}' position value must be numeric`);\n        let sub_config = (!config[2] ? { type: 'string' }\n            : ['string', 'number', 'boolean'].includes(config[2].toString()) ? { type: config[2] }\n                : typeof config[2] === 'object' && !Array.isArray(config[2]) ? config[2]\n                    : utils_1.error(`'${field}' type must be 'string', 'number', 'boolean' or a configuration object`));\n        // Add linked fields\n        if (!track.linked[link])\n            track.linked[link] = [];\n        track.linked[link][pos] = field;\n        // Merge/validate extra config data and add link and pos\n        return Object.assign({\n            [field]: Object.assign({ save: true }, // default save to true\n            parseMapping_1.default(field, sub_config, track)[field], { link, pos })\n        }, sub_config.alias ? {\n            [sub_config.alias]: Object.assign({}, sub_config, { map: field })\n        } : {}); // end assign\n    }\n    else {\n        utils_1.error(`Composite key configurations must have 2 or 3 items`);\n    }\n};\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA,IAAIA,eAAe,GAAIC,SAAA,IAAQA,SAAA,CAAKD,eAAe,IAAK,UAAUE,GAAG,EAAE;EACnE,OAAQA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAID,GAAG,GAAG;IAAE,SAAS,EAAEA;EAAI,CAAC;AAC7D,CAAC;AACDE,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,MAAMC,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,cAAc,GAAGV,eAAe,CAACS,OAAO,CAAC,gBAAgB,CAAC,CAAC;AACjEH,OAAO,CAACK,OAAO,GAAG,CAACC,KAAK,EAAEC,MAAM,EAAEC,KAAK,EAAEC,MAAM,KAAK;EAChD,IAAIF,MAAM,CAACG,MAAM,IAAI,CAAC,IAAIH,MAAM,CAACG,MAAM,IAAI,CAAC,EAAE;IAC1C,IAAIC,IAAI,GAAGF,MAAM,CAACF,MAAM,CAAC,CAAC,CAAC,CAAC,GAAGA,MAAM,CAAC,CAAC,CAAC,GAClCL,OAAO,CAACU,KAAK,CAAE,IAAGN,KAAM,gCAA+B,CAAC;IAC9D,IAAIO,GAAG,GAAGC,QAAQ,CAACP,MAAM,CAAC,CAAC,CAAC,CAACQ,QAAQ,CAAC,CAAC,CAAC,KAAKR,MAAM,CAAC,CAAC,CAAC,GAAGA,MAAM,CAAC,CAAC,CAAC,GAC5DL,OAAO,CAACU,KAAK,CAAE,IAAGN,KAAM,kCAAiC,CAAC;IAChE,IAAIU,UAAU,GAAI,CAACT,MAAM,CAAC,CAAC,CAAC,GAAG;MAAEU,IAAI,EAAE;IAAS,CAAC,GAC3C,CAAC,QAAQ,EAAE,QAAQ,EAAE,SAAS,CAAC,CAACC,QAAQ,CAACX,MAAM,CAAC,CAAC,CAAC,CAACQ,QAAQ,CAAC,CAAC,CAAC,GAAG;MAAEE,IAAI,EAAEV,MAAM,CAAC,CAAC;IAAE,CAAC,GAChF,OAAOA,MAAM,CAAC,CAAC,CAAC,KAAK,QAAQ,IAAI,CAACY,KAAK,CAACC,OAAO,CAACb,MAAM,CAAC,CAAC,CAAC,CAAC,GAAGA,MAAM,CAAC,CAAC,CAAC,GAClEL,OAAO,CAACU,KAAK,CAAE,IAAGN,KAAM,wEAAuE,CAAE;IAC/G;IACA,IAAI,CAACE,KAAK,CAACa,MAAM,CAACV,IAAI,CAAC,EACnBH,KAAK,CAACa,MAAM,CAACV,IAAI,CAAC,GAAG,EAAE;IAC3BH,KAAK,CAACa,MAAM,CAACV,IAAI,CAAC,CAACE,GAAG,CAAC,GAAGP,KAAK;IAC/B;IACA,OAAOR,MAAM,CAACwB,MAAM,CAAC;MACjB,CAAChB,KAAK,GAAGR,MAAM,CAACwB,MAAM,CAAC;QAAEC,IAAI,EAAE;MAAK,CAAC;MAAE;MACvCnB,cAAc,CAACC,OAAO,CAACC,KAAK,EAAEU,UAAU,EAAER,KAAK,CAAC,CAACF,KAAK,CAAC,EAAE;QAAEK,IAAI;QAAEE;MAAI,CAAC;IAC1E,CAAC,EAAEG,UAAU,CAACQ,KAAK,GAAG;MAClB,CAACR,UAAU,CAACQ,KAAK,GAAG1B,MAAM,CAACwB,MAAM,CAAC,CAAC,CAAC,EAAEN,UAAU,EAAE;QAAES,GAAG,EAAEnB;MAAM,CAAC;IACpE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACb,CAAC,MACI;IACDJ,OAAO,CAACU,KAAK,CAAE,qDAAoD,CAAC;EACxE;AACJ,CAAC"},"metadata":{},"sourceType":"module"}