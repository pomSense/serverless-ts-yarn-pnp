{"ast":null,"code":"\"use strict\";\n\n/**\n * DynamoDB Toolbox: A simple set of tools for working with Amazon DynamoDB\n * @author Jeremy Daly <jeremy@jeremydaly.com>\n * @license MIT\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst utils_1 = require(\"./utils\");\n// Check attribute against attribute set\nexports.default = (attr, attrs) => {\n  // Split paths with dot notation and list brackets\n  const path = attr.split('.');\n  const list = path[0].split('[');\n  // Check that the base path exists as an attribute or alias\n  if (list[0] in attrs) {\n    // Replace base alias with table attribute\n    path[0] = (attrs[list[0]].map ? attrs[list[0]].map : list[0]) + (list.length > 1 ? `[${list.slice(1).join('[')}` : '');\n    // Return joined path\n    return path.join('.');\n    // Throw an error if not a valid attribute or alias\n  } else {\n    // TODO: make this error more helpful\n    return utils_1.error(`'${attr}' is not a valid attribute.`);\n  }\n}; // end checkAttribute","map":{"version":3,"names":["Object","defineProperty","exports","value","utils_1","require","default","attr","attrs","path","split","list","map","length","slice","join","error"],"sources":["/Users/pom/Code/serverless-ts-yarn-pnp/.yarn/cache/dynamodb-toolbox-npm-0.3.5-3ff4bf5328-d75542b529.zip/node_modules/dynamodb-toolbox/dist/lib/checkAttribute.js"],"sourcesContent":["\"use strict\";\n/**\n * DynamoDB Toolbox: A simple set of tools for working with Amazon DynamoDB\n * @author Jeremy Daly <jeremy@jeremydaly.com>\n * @license MIT\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"./utils\");\n// Check attribute against attribute set\nexports.default = (attr, attrs) => {\n    // Split paths with dot notation and list brackets\n    const path = attr.split('.');\n    const list = path[0].split('[');\n    // Check that the base path exists as an attribute or alias\n    if (list[0] in attrs) {\n        // Replace base alias with table attribute\n        path[0] = (attrs[list[0]].map ? attrs[list[0]].map : list[0])\n            + (list.length > 1 ? `[${list.slice(1).join('[')}` : '');\n        // Return joined path\n        return path.join('.');\n        // Throw an error if not a valid attribute or alias\n    }\n    else {\n        // TODO: make this error more helpful\n        return utils_1.error(`'${attr}' is not a valid attribute.`);\n    }\n}; // end checkAttribute\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,MAAMC,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC;AACAH,OAAO,CAACI,OAAO,GAAG,CAACC,IAAI,EAAEC,KAAK,KAAK;EAC/B;EACA,MAAMC,IAAI,GAAGF,IAAI,CAACG,KAAK,CAAC,GAAG,CAAC;EAC5B,MAAMC,IAAI,GAAGF,IAAI,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC;EAC/B;EACA,IAAIC,IAAI,CAAC,CAAC,CAAC,IAAIH,KAAK,EAAE;IAClB;IACAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAACD,KAAK,CAACG,IAAI,CAAC,CAAC,CAAC,CAAC,CAACC,GAAG,GAAGJ,KAAK,CAACG,IAAI,CAAC,CAAC,CAAC,CAAC,CAACC,GAAG,GAAGD,IAAI,CAAC,CAAC,CAAC,KACrDA,IAAI,CAACE,MAAM,GAAG,CAAC,GAAI,IAAGF,IAAI,CAACG,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,GAAG,CAAE,EAAC,GAAG,EAAE,CAAC;IAC5D;IACA,OAAON,IAAI,CAACM,IAAI,CAAC,GAAG,CAAC;IACrB;EACJ,CAAC,MACI;IACD;IACA,OAAOX,OAAO,CAACY,KAAK,CAAE,IAAGT,IAAK,6BAA4B,CAAC;EAC/D;AACJ,CAAC,CAAC,CAAC"},"metadata":{},"sourceType":"module"}