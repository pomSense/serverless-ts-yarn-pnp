{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addIntrospectionFields = exports.isIntrospectionName = exports.introspectionTypeNames = exports.introspectionFieldNames = void 0;\nconst graphql_1 = require(\"graphql\");\nconst definitions_1 = require(\"./definitions\");\nexports.introspectionFieldNames = ['__schema', '__type'];\nexports.introspectionTypeNames = ['__Schema', '__Directive', '__DirectiveLocation', '__Type', '__Field', '__InputValue', '__EnumValue', '__TypeKind'];\nfunction isIntrospectionName(name) {\n  return name.startsWith('__');\n}\nexports.isIntrospectionName = isIntrospectionName;\nfunction addIntrospectionFields(schema) {\n  if (schema.type('__Schema')) {\n    return;\n  }\n  const typeKindEnum = schema.addType(new definitions_1.EnumType('__TypeKind', true));\n  typeKindEnum.addValue('SCALAR');\n  typeKindEnum.addValue('OBJECT');\n  typeKindEnum.addValue('INTERFACE');\n  typeKindEnum.addValue('UNION');\n  typeKindEnum.addValue('ENUM');\n  typeKindEnum.addValue('INPUT_OBJECT');\n  typeKindEnum.addValue('LIST');\n  typeKindEnum.addValue('NON_NULL');\n  const inputValueType = schema.addType(new definitions_1.ObjectType('__InputValue', true));\n  const fieldType = schema.addType(new definitions_1.ObjectType('__Field', true));\n  const typeType = schema.addType(new definitions_1.ObjectType('__Type', true));\n  const enumValueType = schema.addType(new definitions_1.ObjectType('__EnumValue', true));\n  typeType.addField('kind', new definitions_1.NonNullType(typeKindEnum));\n  typeType.addField('name', schema.stringType());\n  typeType.addField('description', schema.stringType());\n  typeType.addField('fields', new definitions_1.ListType(new definitions_1.NonNullType(fieldType))).addArgument('includeDeprecated', schema.booleanType(), false);\n  typeType.addField('interfaces', new definitions_1.ListType(new definitions_1.NonNullType(typeType)));\n  typeType.addField('possibleTypes', new definitions_1.ListType(new definitions_1.NonNullType(typeType)));\n  typeType.addField('enumValues', new definitions_1.ListType(new definitions_1.NonNullType(enumValueType))).addArgument('includeDeprecated', schema.booleanType(), false);\n  typeType.addField('inputFields', new definitions_1.ListType(new definitions_1.NonNullType(inputValueType))).addArgument('includeDeprecated', schema.booleanType(), false);\n  typeType.addField('ofType', typeType);\n  typeType.addField('specifiedByURL', schema.stringType());\n  fieldType.addField('name', new definitions_1.NonNullType(schema.stringType()));\n  fieldType.addField('description', schema.stringType());\n  fieldType.addField('args', new definitions_1.NonNullType(new definitions_1.ListType(new definitions_1.NonNullType(inputValueType)))).addArgument('includeDeprecated', schema.booleanType(), false);\n  fieldType.addField('type', new definitions_1.NonNullType(typeType));\n  fieldType.addField('isDeprecated', new definitions_1.NonNullType(schema.booleanType()));\n  fieldType.addField('deprecationReason', schema.stringType());\n  inputValueType.addField('name', new definitions_1.NonNullType(schema.stringType()));\n  inputValueType.addField('description', schema.stringType());\n  inputValueType.addField('type', new definitions_1.NonNullType(typeType));\n  inputValueType.addField('defaultValue', schema.stringType());\n  inputValueType.addField('isDeprecated', new definitions_1.NonNullType(schema.booleanType()));\n  inputValueType.addField('deprecationReason', schema.stringType());\n  enumValueType.addField('name', new definitions_1.NonNullType(schema.stringType()));\n  enumValueType.addField('description', schema.stringType());\n  enumValueType.addField('isDeprecated', new definitions_1.NonNullType(schema.booleanType()));\n  enumValueType.addField('deprecationReason', schema.stringType());\n  const directiveLocationEnum = schema.addType(new definitions_1.EnumType('__DirectiveLocation', true));\n  for (const location of Object.values(graphql_1.DirectiveLocation)) {\n    directiveLocationEnum.addValue(location);\n  }\n  const directiveType = schema.addType(new definitions_1.ObjectType('__Directive', true));\n  directiveType.addField('name', new definitions_1.NonNullType(schema.stringType()));\n  directiveType.addField('description', schema.stringType());\n  directiveType.addField('locations', new definitions_1.NonNullType(new definitions_1.ListType(new definitions_1.NonNullType(directiveLocationEnum))));\n  directiveType.addField('args', new definitions_1.NonNullType(new definitions_1.ListType(new definitions_1.NonNullType(inputValueType)))).addArgument('includeDeprecated', schema.booleanType(), false);\n  directiveType.addField('isRepeatable', new definitions_1.NonNullType(schema.booleanType()));\n  const schemaType = schema.addType(new definitions_1.ObjectType('__Schema', true));\n  schemaType.addField('description', schema.stringType());\n  schemaType.addField('types', new definitions_1.NonNullType(new definitions_1.ListType(new definitions_1.NonNullType(typeType))));\n  schemaType.addField('queryType', new definitions_1.NonNullType(typeType));\n  schemaType.addField('mutationType', new definitions_1.NonNullType(typeType));\n  schemaType.addField('subscriptionType', new definitions_1.NonNullType(typeType));\n  schemaType.addField('directives', new definitions_1.NonNullType(new definitions_1.ListType(new definitions_1.NonNullType(directiveType))));\n  let queryRoot = schema.schemaDefinition.rootType('query');\n  if (!queryRoot) {\n    queryRoot = schema.addType(new definitions_1.ObjectType('Query'));\n    schema.schemaDefinition.setRoot('query', queryRoot);\n  }\n  queryRoot.addField(new definitions_1.FieldDefinition('__schema', true), new definitions_1.NonNullType(schemaType));\n  queryRoot.addField(new definitions_1.FieldDefinition('__type', true), typeType).addArgument('name', new definitions_1.NonNullType(schema.stringType()));\n}\nexports.addIntrospectionFields = addIntrospectionFields;","map":{"version":3,"mappings":"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","names":["graphql_1","require","definitions_1","exports","introspectionFieldNames","introspectionTypeNames","isIntrospectionName","name","startsWith","addIntrospectionFields","schema","type","typeKindEnum","addType","EnumType","addValue","inputValueType","ObjectType","fieldType","typeType","enumValueType","addField","NonNullType","stringType","ListType","addArgument","booleanType","directiveLocationEnum","location","Object","values","DirectiveLocation","directiveType","schemaType","queryRoot","schemaDefinition","rootType","setRoot","FieldDefinition"],"sourceRoot":"","sources":["../src/introspection.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}