{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.REQUIRES_SCOPES_VERSIONS = exports.RequiresScopesSpecDefinition = exports.RequiresScopesTypeName = void 0;\nconst graphql_1 = require(\"graphql\");\nconst coreSpec_1 = require(\"./coreSpec\");\nconst definitions_1 = require(\"./definitions\");\nconst directiveAndTypeSpecification_1 = require(\"./directiveAndTypeSpecification\");\nconst knownCoreFeatures_1 = require(\"./knownCoreFeatures\");\nconst argumentCompositionStrategies_1 = require(\"./argumentCompositionStrategies\");\nconst utils_1 = require(\"./utils\");\nvar RequiresScopesTypeName;\n(function (RequiresScopesTypeName) {\n  RequiresScopesTypeName[\"SCOPE\"] = \"Scope\";\n})(RequiresScopesTypeName || (exports.RequiresScopesTypeName = RequiresScopesTypeName = {}));\nclass RequiresScopesSpecDefinition extends coreSpec_1.FeatureDefinition {\n  constructor(version) {\n    super(new coreSpec_1.FeatureUrl(RequiresScopesSpecDefinition.identity, RequiresScopesSpecDefinition.directiveName, version));\n    this.registerType((0, directiveAndTypeSpecification_1.createScalarTypeSpecification)({\n      name: RequiresScopesTypeName.SCOPE\n    }));\n    this.registerDirective((0, directiveAndTypeSpecification_1.createDirectiveSpecification)({\n      name: RequiresScopesSpecDefinition.directiveName,\n      args: [{\n        name: 'scopes',\n        type: (schema, feature) => {\n          (0, utils_1.assert)(feature, \"Shouldn't be added without being attached to a @link spec\");\n          const scopeName = feature.typeNameInSchema(RequiresScopesTypeName.SCOPE);\n          const scopeType = schema.type(scopeName);\n          (0, utils_1.assert)(scopeType, () => `Expected \"${scopeName}\" to be defined`);\n          return new definitions_1.NonNullType(new definitions_1.ListType(new definitions_1.NonNullType(new definitions_1.ListType(new definitions_1.NonNullType(scopeType)))));\n        },\n        compositionStrategy: argumentCompositionStrategies_1.ARGUMENT_COMPOSITION_STRATEGIES.UNION\n      }],\n      locations: [graphql_1.DirectiveLocation.FIELD_DEFINITION, graphql_1.DirectiveLocation.OBJECT, graphql_1.DirectiveLocation.INTERFACE, graphql_1.DirectiveLocation.SCALAR, graphql_1.DirectiveLocation.ENUM],\n      composes: true,\n      supergraphSpecification: () => exports.REQUIRES_SCOPES_VERSIONS.latest()\n    }));\n  }\n  requiresScopesDirective(schema) {\n    return this.directive(schema, RequiresScopesSpecDefinition.directiveName);\n  }\n  get defaultCorePurpose() {\n    return 'SECURITY';\n  }\n}\nexports.RequiresScopesSpecDefinition = RequiresScopesSpecDefinition;\nRequiresScopesSpecDefinition.directiveName = \"requiresScopes\";\nRequiresScopesSpecDefinition.identity = `https://specs.apollo.dev/${RequiresScopesSpecDefinition.directiveName}`;\nexports.REQUIRES_SCOPES_VERSIONS = new coreSpec_1.FeatureDefinitions(RequiresScopesSpecDefinition.identity).add(new RequiresScopesSpecDefinition(new coreSpec_1.FeatureVersion(0, 1)));\n(0, knownCoreFeatures_1.registerKnownFeature)(exports.REQUIRES_SCOPES_VERSIONS);","map":{"version":3,"mappings":"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","names":["graphql_1","require","coreSpec_1","definitions_1","directiveAndTypeSpecification_1","knownCoreFeatures_1","argumentCompositionStrategies_1","utils_1","RequiresScopesTypeName","exports","RequiresScopesSpecDefinition","FeatureDefinition","constructor","version","FeatureUrl","identity","directiveName","registerType","createScalarTypeSpecification","name","SCOPE","registerDirective","createDirectiveSpecification","args","type","schema","feature","assert","scopeName","typeNameInSchema","scopeType","NonNullType","ListType","compositionStrategy","ARGUMENT_COMPOSITION_STRATEGIES","UNION","locations","DirectiveLocation","FIELD_DEFINITION","OBJECT","INTERFACE","SCALAR","ENUM","composes","supergraphSpecification","REQUIRES_SCOPES_VERSIONS","latest","requiresScopesDirective","directive","defaultCorePurpose","FeatureDefinitions","add","FeatureVersion","registerKnownFeature"],"sourceRoot":"","sources":["../src/requiresScopesSpec.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}