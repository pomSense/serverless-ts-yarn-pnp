{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ARGUMENT_COMPOSITION_STRATEGIES = void 0;\nconst definitions_1 = require(\"./definitions\");\nconst types_1 = require(\"./types\");\nconst values_1 = require(\"./values\");\nfunction supportFixedTypes(types) {\n  return (schema, type) => {\n    const supported = types(schema);\n    if (!supported.some(t => (0, types_1.sameType)(t, type))) {\n      return {\n        valid: false,\n        supportedMsg: `type(s) ${supported.join(', ')}`\n      };\n    }\n    return {\n      valid: true\n    };\n  };\n}\nfunction supportAnyNonNullArray() {\n  return (_, type) => {\n    if (!(0, definitions_1.isNonNullType)(type) || !(0, definitions_1.isListType)(type.ofType)) {\n      return {\n        valid: false,\n        supportedMsg: 'non nullable list types of any type'\n      };\n    }\n    return {\n      valid: true\n    };\n  };\n}\nexports.ARGUMENT_COMPOSITION_STRATEGIES = {\n  MAX: {\n    name: 'MAX',\n    isTypeSupported: supportFixedTypes(schema => [new definitions_1.NonNullType(schema.intType())]),\n    mergeValues: values => Math.max(...values)\n  },\n  MIN: {\n    name: 'MIN',\n    isTypeSupported: supportFixedTypes(schema => [new definitions_1.NonNullType(schema.intType())]),\n    mergeValues: values => Math.min(...values)\n  },\n  SUM: {\n    name: 'SUM',\n    isTypeSupported: supportFixedTypes(schema => [new definitions_1.NonNullType(schema.intType())]),\n    mergeValues: values => values.reduce((acc, val) => acc + val, 0)\n  },\n  INTERSECTION: {\n    name: 'INTERSECTION',\n    isTypeSupported: supportAnyNonNullArray(),\n    mergeValues: values => values.reduce((acc, val) => acc.filter(v1 => val.some(v2 => (0, values_1.valueEquals)(v1, v2))), values[0])\n  },\n  UNION: {\n    name: 'UNION',\n    isTypeSupported: supportAnyNonNullArray(),\n    mergeValues: values => values.reduce((acc, val) => {\n      const newValues = val.filter(v1 => !acc.some(v2 => (0, values_1.valueEquals)(v1, v2)));\n      return acc.concat(newValues);\n    }, [])\n  }\n};","map":{"version":3,"mappings":"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","names":["definitions_1","require","types_1","values_1","supportFixedTypes","types","schema","type","supported","some","t","sameType","valid","supportedMsg","join","supportAnyNonNullArray","_","isNonNullType","isListType","ofType","exports","ARGUMENT_COMPOSITION_STRATEGIES","MAX","name","isTypeSupported","NonNullType","intType","mergeValues","values","Math","max","MIN","min","SUM","reduce","acc","val","INTERSECTION","filter","v1","v2","valueEquals","UNION","newValues","concat"],"sourceRoot":"","sources":["../src/argumentCompositionStrategies.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}