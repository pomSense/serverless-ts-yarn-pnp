{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.buildSchemaFromSDL = exports.addResolversToSchema = exports.modulesFromSDL = exports.isDocumentNode = exports.isNode = void 0;\nconst graphql_1 = require(\"graphql\");\nconst validation_1 = require(\"graphql/validation\");\nconst validate_1 = require(\"graphql/validation/validate\");\nconst specifiedRules_1 = require(\"graphql/validation/specifiedRules\");\nconst error_1 = require(\"./error\");\nfunction isNotNullOrUndefined(value) {\n  return value !== null && typeof value !== 'undefined';\n}\nfunction isNode(maybeNode) {\n  return maybeNode && typeof maybeNode.kind === \"string\";\n}\nexports.isNode = isNode;\nfunction isDocumentNode(node) {\n  return isNode(node) && node.kind === graphql_1.Kind.DOCUMENT;\n}\nexports.isDocumentNode = isDocumentNode;\nfunction mapValues(object, callback) {\n  const result = Object.create(null);\n  for (const [key, value] of Object.entries(object)) {\n    result[key] = callback(value);\n  }\n  return result;\n}\nconst skippedSDLRules = [validation_1.KnownTypeNamesRule, validation_1.UniqueDirectivesPerLocationRule, validation_1.PossibleTypeExtensionsRule];\nconst sdlRules = specifiedRules_1.specifiedSDLRules.filter(rule => !skippedSDLRules.includes(rule));\nconst extKindToDefKind = {\n  [graphql_1.Kind.SCALAR_TYPE_EXTENSION]: graphql_1.Kind.SCALAR_TYPE_DEFINITION,\n  [graphql_1.Kind.OBJECT_TYPE_EXTENSION]: graphql_1.Kind.OBJECT_TYPE_DEFINITION,\n  [graphql_1.Kind.INTERFACE_TYPE_EXTENSION]: graphql_1.Kind.INTERFACE_TYPE_DEFINITION,\n  [graphql_1.Kind.UNION_TYPE_EXTENSION]: graphql_1.Kind.UNION_TYPE_DEFINITION,\n  [graphql_1.Kind.ENUM_TYPE_EXTENSION]: graphql_1.Kind.ENUM_TYPE_DEFINITION,\n  [graphql_1.Kind.INPUT_OBJECT_TYPE_EXTENSION]: graphql_1.Kind.INPUT_OBJECT_TYPE_DEFINITION\n};\nfunction modulesFromSDL(modulesOrSDL) {\n  if (Array.isArray(modulesOrSDL)) {\n    return modulesOrSDL.map(moduleOrSDL => {\n      if (isNode(moduleOrSDL) && isDocumentNode(moduleOrSDL)) {\n        return {\n          typeDefs: moduleOrSDL\n        };\n      } else {\n        return moduleOrSDL;\n      }\n    });\n  } else {\n    return [{\n      typeDefs: modulesOrSDL\n    }];\n  }\n}\nexports.modulesFromSDL = modulesFromSDL;\nfunction addResolversToSchema(schema, resolvers) {\n  var _a, _b;\n  for (const [typeName, fieldConfigs] of Object.entries(resolvers)) {\n    const type = schema.getType(typeName);\n    if ((0, graphql_1.isAbstractType)(type)) {\n      for (const [fieldName, fieldConfig] of Object.entries(fieldConfigs)) {\n        if (fieldName === '__resolveReference') {\n          type.extensions = {\n            ...type.extensions,\n            apollo: {\n              ...type.extensions.apollo,\n              subgraph: {\n                ...((_a = type.extensions.apollo) === null || _a === void 0 ? void 0 : _a.subgraph),\n                resolveReference: fieldConfig\n              }\n            }\n          };\n        } else if (fieldName === '__resolveType') {\n          type.resolveType = fieldConfig;\n        }\n      }\n    }\n    if ((0, graphql_1.isScalarType)(type)) {\n      for (const fn in fieldConfigs) {\n        type[fn] = fieldConfigs[fn];\n      }\n    }\n    if ((0, graphql_1.isEnumType)(type)) {\n      const values = type.getValues();\n      const newValues = {};\n      values.forEach(value => {\n        let newValue = fieldConfigs[value.name];\n        if (newValue === undefined) {\n          newValue = value.name;\n        }\n        newValues[value.name] = {\n          value: newValue,\n          deprecationReason: value.deprecationReason,\n          description: value.description,\n          astNode: value.astNode,\n          extensions: undefined\n        };\n      });\n      Object.assign(type, new graphql_1.GraphQLEnumType({\n        ...type.toConfig(),\n        values: newValues\n      }));\n    }\n    if (!(0, graphql_1.isObjectType)(type)) continue;\n    const fieldMap = type.getFields();\n    for (const [fieldName, fieldConfig] of Object.entries(fieldConfigs)) {\n      if (fieldName === '__resolveReference') {\n        type.extensions = {\n          ...type.extensions,\n          apollo: {\n            ...type.extensions.apollo,\n            subgraph: {\n              ...((_b = type.extensions.apollo) === null || _b === void 0 ? void 0 : _b.subgraph),\n              resolveReference: fieldConfig\n            }\n          }\n        };\n        continue;\n      } else if (fieldName === '__isTypeOf') {\n        type.isTypeOf = fieldConfig;\n        continue;\n      }\n      const field = fieldMap[fieldName];\n      if (!field) continue;\n      if (typeof fieldConfig === \"function\") {\n        field.resolve = fieldConfig;\n      } else {\n        field.resolve = fieldConfig.resolve;\n      }\n    }\n  }\n}\nexports.addResolversToSchema = addResolversToSchema;\nfunction buildSchemaFromSDL(modulesOrSDL, schemaToExtend) {\n  const modules = modulesFromSDL(modulesOrSDL);\n  const documentAST = (0, graphql_1.concatAST)(modules.map(module => module.typeDefs));\n  const errors = (0, validate_1.validateSDL)(documentAST, schemaToExtend, sdlRules);\n  if (errors.length > 0) {\n    throw new error_1.GraphQLSchemaValidationError(errors);\n  }\n  const definitionsMap = Object.create(null);\n  const extensionsMap = Object.create(null);\n  const directiveDefinitions = [];\n  const schemaDefinitions = [];\n  const schemaExtensions = [];\n  const schemaDirectives = [];\n  let description;\n  for (const definition of documentAST.definitions) {\n    if ((0, graphql_1.isTypeDefinitionNode)(definition)) {\n      const typeName = definition.name.value;\n      if (definitionsMap[typeName]) {\n        definitionsMap[typeName].push(definition);\n      } else {\n        definitionsMap[typeName] = [definition];\n      }\n    } else if ((0, graphql_1.isTypeExtensionNode)(definition)) {\n      const typeName = definition.name.value;\n      if (extensionsMap[typeName]) {\n        extensionsMap[typeName].push(definition);\n      } else {\n        extensionsMap[typeName] = [definition];\n      }\n    } else if (definition.kind === graphql_1.Kind.DIRECTIVE_DEFINITION) {\n      directiveDefinitions.push(definition);\n    } else if (definition.kind === graphql_1.Kind.SCHEMA_DEFINITION) {\n      schemaDefinitions.push(definition);\n      schemaDirectives.push(...(definition.directives ? definition.directives : []));\n      description = definition.description;\n    } else if (definition.kind === graphql_1.Kind.SCHEMA_EXTENSION) {\n      schemaExtensions.push(definition);\n      schemaDirectives.push(...(definition.directives ? definition.directives : []));\n    }\n  }\n  let schema = schemaToExtend ? schemaToExtend : new graphql_1.GraphQLSchema({\n    query: undefined\n  });\n  const missingTypeDefinitions = [];\n  for (const [extendedTypeName, extensions] of Object.entries(extensionsMap)) {\n    if (!definitionsMap[extendedTypeName]) {\n      const extension = extensions[0];\n      const kind = extension.kind;\n      const definition = {\n        kind: extKindToDefKind[kind],\n        name: extension.name\n      };\n      missingTypeDefinitions.push(definition);\n    }\n  }\n  schema = (0, graphql_1.extendSchema)(schema, {\n    kind: graphql_1.Kind.DOCUMENT,\n    definitions: [...Object.values(definitionsMap).flat(), ...missingTypeDefinitions, ...directiveDefinitions]\n  }, {\n    assumeValidSDL: true\n  });\n  schema = (0, graphql_1.extendSchema)(schema, {\n    kind: graphql_1.Kind.DOCUMENT,\n    definitions: Object.values(extensionsMap).flat()\n  }, {\n    assumeValidSDL: true\n  });\n  let operationTypeMap;\n  const operationTypes = [...schemaDefinitions, ...schemaExtensions].map(node => node.operationTypes).filter(isNotNullOrUndefined).flat();\n  if (operationTypes.length > 0) {\n    operationTypeMap = {};\n    for (const {\n      operation,\n      type\n    } of operationTypes) {\n      operationTypeMap[operation] = type.name.value;\n    }\n  } else {\n    operationTypeMap = {\n      query: \"Query\",\n      mutation: \"Mutation\",\n      subscription: \"Subscription\"\n    };\n  }\n  schema = new graphql_1.GraphQLSchema({\n    ...schema.toConfig(),\n    ...mapValues(operationTypeMap, typeName => typeName ? schema.getType(typeName) : undefined),\n    description: description === null || description === void 0 ? void 0 : description.value,\n    astNode: {\n      kind: graphql_1.Kind.SCHEMA_DEFINITION,\n      description,\n      directives: schemaDirectives,\n      operationTypes: []\n    }\n  });\n  for (const module of modules) {\n    if (!module.resolvers) continue;\n    addResolversToSchema(schema, module.resolvers);\n  }\n  return schema;\n}\nexports.buildSchemaFromSDL = buildSchemaFromSDL;","map":{"version":3,"mappings":"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","names":["graphql_1","require","validation_1","validate_1","specifiedRules_1","error_1","isNotNullOrUndefined","value","isNode","maybeNode","kind","exports","isDocumentNode","node","Kind","DOCUMENT","mapValues","object","callback","result","Object","create","key","entries","skippedSDLRules","KnownTypeNamesRule","UniqueDirectivesPerLocationRule","PossibleTypeExtensionsRule","sdlRules","specifiedSDLRules","filter","rule","includes","extKindToDefKind","SCALAR_TYPE_EXTENSION","SCALAR_TYPE_DEFINITION","OBJECT_TYPE_EXTENSION","OBJECT_TYPE_DEFINITION","INTERFACE_TYPE_EXTENSION","INTERFACE_TYPE_DEFINITION","UNION_TYPE_EXTENSION","UNION_TYPE_DEFINITION","ENUM_TYPE_EXTENSION","ENUM_TYPE_DEFINITION","INPUT_OBJECT_TYPE_EXTENSION","INPUT_OBJECT_TYPE_DEFINITION","modulesFromSDL","modulesOrSDL","Array","isArray","map","moduleOrSDL","typeDefs","addResolversToSchema","schema","resolvers","typeName","fieldConfigs","type","getType","isAbstractType","fieldName","fieldConfig","extensions","apollo","subgraph","_a","resolveReference","resolveType","isScalarType","fn","isEnumType","values","getValues","newValues","forEach","newValue","name","undefined","deprecationReason","description","astNode","assign","GraphQLEnumType","toConfig","isObjectType","fieldMap","getFields","_b","isTypeOf","field","resolve","buildSchemaFromSDL","schemaToExtend","modules","documentAST","concatAST","module","errors","validateSDL","length","GraphQLSchemaValidationError","definitionsMap","extensionsMap","directiveDefinitions","schemaDefinitions","schemaExtensions","schemaDirectives","definition","definitions","isTypeDefinitionNode","push","isTypeExtensionNode","DIRECTIVE_DEFINITION","SCHEMA_DEFINITION","directives","SCHEMA_EXTENSION","GraphQLSchema","query","missingTypeDefinitions","extendedTypeName","extension","extendSchema","flat","assumeValidSDL","operationTypeMap","operationTypes","operation","mutation","subscription"],"sourceRoot":"","sources":["../../src/schema-helper/buildSchemaFromSDL.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}