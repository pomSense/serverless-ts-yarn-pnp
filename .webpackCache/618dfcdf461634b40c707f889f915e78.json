{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GatewayIsTooOldError = exports.SchemaManager = void 0;\nclass SchemaManager {\n  constructor(options) {\n    this.onSchemaLoadOrUpdateListeners = new Set();\n    this.isStopped = false;\n    this.logger = options.logger;\n    this.schemaDerivedDataProvider = options.schemaDerivedDataProvider;\n    if ('gateway' in options) {\n      this.modeSpecificState = {\n        mode: 'gateway',\n        gateway: options.gateway,\n        apolloConfig: options.apolloConfig\n      };\n    } else {\n      this.modeSpecificState = {\n        mode: 'schema',\n        apiSchema: options.apiSchema,\n        schemaDerivedData: options.schemaDerivedDataProvider(options.apiSchema)\n      };\n    }\n  }\n  async start() {\n    if (this.modeSpecificState.mode === 'gateway') {\n      const gateway = this.modeSpecificState.gateway;\n      if (gateway.onSchemaLoadOrUpdate) {\n        this.modeSpecificState.unsubscribeFromGateway = gateway.onSchemaLoadOrUpdate(schemaContext => {\n          this.processSchemaLoadOrUpdateEvent(schemaContext);\n        });\n      } else if (gateway.onSchemaChange) {\n        this.modeSpecificState.unsubscribeFromGateway = gateway.onSchemaChange(apiSchema => {\n          this.processSchemaLoadOrUpdateEvent({\n            apiSchema\n          });\n        });\n      } else {\n        throw new Error(\"Unexpectedly couldn't find onSchemaChange or onSchemaLoadOrUpdate on gateway\");\n      }\n      const config = await this.modeSpecificState.gateway.load({\n        apollo: this.modeSpecificState.apolloConfig\n      });\n      if (!this.schemaDerivedData) {\n        this.processSchemaLoadOrUpdateEvent({\n          apiSchema: config.schema\n        });\n      }\n      return config.executor;\n    } else {\n      this.processSchemaLoadOrUpdateEvent({\n        apiSchema: this.modeSpecificState.apiSchema\n      }, this.modeSpecificState.schemaDerivedData);\n      return null;\n    }\n  }\n  onSchemaLoadOrUpdate(callback) {\n    if (this.modeSpecificState.mode === 'gateway' && !this.modeSpecificState.gateway.onSchemaLoadOrUpdate) {\n      throw new GatewayIsTooOldError([`Your gateway is too old to register a 'onSchemaLoadOrUpdate' listener.`, `Please update your version of @apollo/gateway to at least 0.35.0.`].join(' '));\n    } else {\n      if (!this.schemaContext) {\n        throw new Error('You must call start() before onSchemaLoadOrUpdate()');\n      }\n      if (!this.isStopped) {\n        try {\n          callback(this.schemaContext);\n        } catch (e) {\n          throw new Error(`An error was thrown from an 'onSchemaLoadOrUpdate' listener: ${e.message}`);\n        }\n      }\n      this.onSchemaLoadOrUpdateListeners.add(callback);\n    }\n    return () => {\n      this.onSchemaLoadOrUpdateListeners.delete(callback);\n    };\n  }\n  getSchemaDerivedData() {\n    if (!this.schemaDerivedData) {\n      throw new Error('You must call start() before getSchemaDerivedData()');\n    }\n    return this.schemaDerivedData;\n  }\n  async stop() {\n    var _a, _b, _c, _d;\n    this.isStopped = true;\n    if (this.modeSpecificState.mode === 'gateway') {\n      (_b = (_a = this.modeSpecificState).unsubscribeFromGateway) === null || _b === void 0 ? void 0 : _b.call(_a);\n      await ((_d = (_c = this.modeSpecificState.gateway).stop) === null || _d === void 0 ? void 0 : _d.call(_c));\n    }\n  }\n  processSchemaLoadOrUpdateEvent(schemaContext, schemaDerivedData) {\n    if (!this.isStopped) {\n      this.schemaDerivedData = schemaDerivedData !== null && schemaDerivedData !== void 0 ? schemaDerivedData : this.schemaDerivedDataProvider(schemaContext.apiSchema);\n      this.schemaContext = schemaContext;\n      this.onSchemaLoadOrUpdateListeners.forEach(listener => {\n        try {\n          listener(schemaContext);\n        } catch (e) {\n          this.logger.error(\"An error was thrown from an 'onSchemaLoadOrUpdate' listener\");\n          this.logger.error(e);\n        }\n      });\n    }\n  }\n}\nexports.SchemaManager = SchemaManager;\nclass GatewayIsTooOldError extends Error {\n  constructor(message) {\n    super(message);\n  }\n}\nexports.GatewayIsTooOldError = GatewayIsTooOldError;","map":{"version":3,"mappings":"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","names":["SchemaManager","constructor","options","onSchemaLoadOrUpdateListeners","Set","isStopped","logger","schemaDerivedDataProvider","modeSpecificState","mode","gateway","apolloConfig","apiSchema","schemaDerivedData","start","onSchemaLoadOrUpdate","unsubscribeFromGateway","schemaContext","processSchemaLoadOrUpdateEvent","onSchemaChange","Error","config","load","apollo","schema","executor","callback","GatewayIsTooOldError","join","e","message","add","delete","getSchemaDerivedData","stop","_b","_a","call","_d","_c","forEach","listener","error","exports"],"sourceRoot":"","sources":["../../src/utils/schemaManager.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}