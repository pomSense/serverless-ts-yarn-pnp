{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.visitResult = exports.visitErrors = exports.visitData = void 0;\nconst getOperationASTFromRequest_js_1 = require(\"./getOperationASTFromRequest.js\");\nconst graphql_1 = require(\"graphql\");\nconst collectFields_js_1 = require(\"./collectFields.js\");\nfunction visitData(data, enter, leave) {\n  if (Array.isArray(data)) {\n    return data.map(value => visitData(value, enter, leave));\n  } else if (typeof data === 'object') {\n    const newData = enter != null ? enter(data) : data;\n    if (newData != null) {\n      for (const key in newData) {\n        const value = newData[key];\n        Object.defineProperty(newData, key, {\n          value: visitData(value, enter, leave)\n        });\n      }\n    }\n    return leave != null ? leave(newData) : newData;\n  }\n  return data;\n}\nexports.visitData = visitData;\nfunction visitErrors(errors, visitor) {\n  return errors.map(error => visitor(error));\n}\nexports.visitErrors = visitErrors;\nfunction visitResult(result, request, schema, resultVisitorMap, errorVisitorMap) {\n  const fragments = request.document.definitions.reduce((acc, def) => {\n    if (def.kind === graphql_1.Kind.FRAGMENT_DEFINITION) {\n      acc[def.name.value] = def;\n    }\n    return acc;\n  }, {});\n  const variableValues = request.variables || {};\n  const errorInfo = {\n    segmentInfoMap: new Map(),\n    unpathedErrors: new Set()\n  };\n  const data = result.data;\n  const errors = result.errors;\n  const visitingErrors = errors != null && errorVisitorMap != null;\n  const operationDocumentNode = (0, getOperationASTFromRequest_js_1.getOperationASTFromRequest)(request);\n  if (data != null && operationDocumentNode != null) {\n    result.data = visitRoot(data, operationDocumentNode, schema, fragments, variableValues, resultVisitorMap, visitingErrors ? errors : undefined, errorInfo);\n  }\n  if (errors != null && errorVisitorMap) {\n    result.errors = visitErrorsByType(errors, errorVisitorMap, errorInfo);\n  }\n  return result;\n}\nexports.visitResult = visitResult;\nfunction visitErrorsByType(errors, errorVisitorMap, errorInfo) {\n  const segmentInfoMap = errorInfo.segmentInfoMap;\n  const unpathedErrors = errorInfo.unpathedErrors;\n  const unpathedErrorVisitor = errorVisitorMap['__unpathed'];\n  return errors.map(originalError => {\n    const pathSegmentsInfo = segmentInfoMap.get(originalError);\n    const newError = pathSegmentsInfo == null ? originalError : pathSegmentsInfo.reduceRight((acc, segmentInfo) => {\n      const typeName = segmentInfo.type.name;\n      const typeVisitorMap = errorVisitorMap[typeName];\n      if (typeVisitorMap == null) {\n        return acc;\n      }\n      const errorVisitor = typeVisitorMap[segmentInfo.fieldName];\n      return errorVisitor == null ? acc : errorVisitor(acc, segmentInfo.pathIndex);\n    }, originalError);\n    if (unpathedErrorVisitor && unpathedErrors.has(originalError)) {\n      return unpathedErrorVisitor(newError);\n    }\n    return newError;\n  });\n}\nfunction getOperationRootType(schema, operationDef) {\n  switch (operationDef.operation) {\n    case 'query':\n      return schema.getQueryType();\n    case 'mutation':\n      return schema.getMutationType();\n    case 'subscription':\n      return schema.getSubscriptionType();\n  }\n}\nfunction visitRoot(root, operation, schema, fragments, variableValues, resultVisitorMap, errors, errorInfo) {\n  const operationRootType = getOperationRootType(schema, operation);\n  const {\n    fields: collectedFields\n  } = (0, collectFields_js_1.collectFields)(schema, fragments, variableValues, operationRootType, operation.selectionSet);\n  return visitObjectValue(root, operationRootType, collectedFields, schema, fragments, variableValues, resultVisitorMap, 0, errors, errorInfo);\n}\nfunction visitObjectValue(object, type, fieldNodeMap, schema, fragments, variableValues, resultVisitorMap, pathIndex, errors, errorInfo) {\n  var _a;\n  const fieldMap = type.getFields();\n  const typeVisitorMap = resultVisitorMap === null || resultVisitorMap === void 0 ? void 0 : resultVisitorMap[type.name];\n  const enterObject = typeVisitorMap === null || typeVisitorMap === void 0 ? void 0 : typeVisitorMap.__enter;\n  const newObject = enterObject != null ? enterObject(object) : object;\n  let sortedErrors;\n  let errorMap = null;\n  if (errors != null) {\n    sortedErrors = sortErrorsByPathSegment(errors, pathIndex);\n    errorMap = sortedErrors.errorMap;\n    for (const error of sortedErrors.unpathedErrors) {\n      errorInfo.unpathedErrors.add(error);\n    }\n  }\n  for (const [responseKey, subFieldNodes] of fieldNodeMap) {\n    const fieldName = subFieldNodes[0].name.value;\n    let fieldType = (_a = fieldMap[fieldName]) === null || _a === void 0 ? void 0 : _a.type;\n    if (fieldType == null) {\n      switch (fieldName) {\n        case '__typename':\n          fieldType = graphql_1.TypeNameMetaFieldDef.type;\n          break;\n        case '__schema':\n          fieldType = graphql_1.SchemaMetaFieldDef.type;\n          break;\n        case '__type':\n          fieldType = graphql_1.TypeMetaFieldDef.type;\n          break;\n      }\n    }\n    const newPathIndex = pathIndex + 1;\n    let fieldErrors;\n    if (errorMap) {\n      fieldErrors = errorMap[responseKey];\n      if (fieldErrors != null) {\n        delete errorMap[responseKey];\n      }\n      addPathSegmentInfo(type, fieldName, newPathIndex, fieldErrors, errorInfo);\n    }\n    const newValue = visitFieldValue(object[responseKey], fieldType, subFieldNodes, schema, fragments, variableValues, resultVisitorMap, newPathIndex, fieldErrors, errorInfo);\n    updateObject(newObject, responseKey, newValue, typeVisitorMap, fieldName);\n  }\n  const oldTypename = newObject.__typename;\n  if (oldTypename != null) {\n    updateObject(newObject, '__typename', oldTypename, typeVisitorMap, '__typename');\n  }\n  if (errorMap) {\n    for (const errorsKey in errorMap) {\n      const errors = errorMap[errorsKey];\n      for (const error of errors) {\n        errorInfo.unpathedErrors.add(error);\n      }\n    }\n  }\n  const leaveObject = typeVisitorMap === null || typeVisitorMap === void 0 ? void 0 : typeVisitorMap.__leave;\n  return leaveObject != null ? leaveObject(newObject) : newObject;\n}\nfunction updateObject(object, responseKey, newValue, typeVisitorMap, fieldName) {\n  if (typeVisitorMap == null) {\n    object[responseKey] = newValue;\n    return;\n  }\n  const fieldVisitor = typeVisitorMap[fieldName];\n  if (fieldVisitor == null) {\n    object[responseKey] = newValue;\n    return;\n  }\n  const visitedValue = fieldVisitor(newValue);\n  if (visitedValue === undefined) {\n    delete object[responseKey];\n    return;\n  }\n  object[responseKey] = visitedValue;\n}\nfunction visitListValue(list, returnType, fieldNodes, schema, fragments, variableValues, resultVisitorMap, pathIndex, errors, errorInfo) {\n  return list.map(listMember => visitFieldValue(listMember, returnType, fieldNodes, schema, fragments, variableValues, resultVisitorMap, pathIndex + 1, errors, errorInfo));\n}\nfunction visitFieldValue(value, returnType, fieldNodes, schema, fragments, variableValues, resultVisitorMap, pathIndex, errors = [], errorInfo) {\n  if (value == null) {\n    return value;\n  }\n  const nullableType = (0, graphql_1.getNullableType)(returnType);\n  if ((0, graphql_1.isListType)(nullableType)) {\n    return visitListValue(value, nullableType.ofType, fieldNodes, schema, fragments, variableValues, resultVisitorMap, pathIndex, errors, errorInfo);\n  } else if ((0, graphql_1.isAbstractType)(nullableType)) {\n    const finalType = schema.getType(value.__typename);\n    const {\n      fields: collectedFields\n    } = (0, collectFields_js_1.collectSubFields)(schema, fragments, variableValues, finalType, fieldNodes);\n    return visitObjectValue(value, finalType, collectedFields, schema, fragments, variableValues, resultVisitorMap, pathIndex, errors, errorInfo);\n  } else if ((0, graphql_1.isObjectType)(nullableType)) {\n    const {\n      fields: collectedFields\n    } = (0, collectFields_js_1.collectSubFields)(schema, fragments, variableValues, nullableType, fieldNodes);\n    return visitObjectValue(value, nullableType, collectedFields, schema, fragments, variableValues, resultVisitorMap, pathIndex, errors, errorInfo);\n  }\n  const typeVisitorMap = resultVisitorMap === null || resultVisitorMap === void 0 ? void 0 : resultVisitorMap[nullableType.name];\n  if (typeVisitorMap == null) {\n    return value;\n  }\n  const visitedValue = typeVisitorMap(value);\n  return visitedValue === undefined ? value : visitedValue;\n}\nfunction sortErrorsByPathSegment(errors, pathIndex) {\n  var _a;\n  const errorMap = Object.create(null);\n  const unpathedErrors = new Set();\n  for (const error of errors) {\n    const pathSegment = (_a = error.path) === null || _a === void 0 ? void 0 : _a[pathIndex];\n    if (pathSegment == null) {\n      unpathedErrors.add(error);\n      continue;\n    }\n    if (pathSegment in errorMap) {\n      errorMap[pathSegment].push(error);\n    } else {\n      errorMap[pathSegment] = [error];\n    }\n  }\n  return {\n    errorMap,\n    unpathedErrors\n  };\n}\nfunction addPathSegmentInfo(type, fieldName, pathIndex, errors = [], errorInfo) {\n  for (const error of errors) {\n    const segmentInfo = {\n      type,\n      fieldName,\n      pathIndex\n    };\n    const pathSegmentsInfo = errorInfo.segmentInfoMap.get(error);\n    if (pathSegmentsInfo == null) {\n      errorInfo.segmentInfoMap.set(error, [segmentInfo]);\n    } else {\n      pathSegmentsInfo.push(segmentInfo);\n    }\n  }\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","visitResult","visitErrors","visitData","getOperationASTFromRequest_js_1","require","graphql_1","collectFields_js_1","data","enter","leave","Array","isArray","map","newData","key","errors","visitor","error","result","request","schema","resultVisitorMap","errorVisitorMap","fragments","document","definitions","reduce","acc","def","kind","Kind","FRAGMENT_DEFINITION","name","variableValues","variables","errorInfo","segmentInfoMap","Map","unpathedErrors","Set","visitingErrors","operationDocumentNode","getOperationASTFromRequest","visitRoot","undefined","visitErrorsByType","unpathedErrorVisitor","originalError","pathSegmentsInfo","get","newError","reduceRight","segmentInfo","typeName","type","typeVisitorMap","errorVisitor","fieldName","pathIndex","has","getOperationRootType","operationDef","operation","getQueryType","getMutationType","getSubscriptionType","root","operationRootType","fields","collectedFields","collectFields","selectionSet","visitObjectValue","object","fieldNodeMap","_a","fieldMap","getFields","enterObject","__enter","newObject","sortedErrors","errorMap","sortErrorsByPathSegment","add","responseKey","subFieldNodes","fieldType","TypeNameMetaFieldDef","SchemaMetaFieldDef","TypeMetaFieldDef","newPathIndex","fieldErrors","addPathSegmentInfo","newValue","visitFieldValue","updateObject","oldTypename","__typename","errorsKey","leaveObject","__leave","fieldVisitor","visitedValue","visitListValue","list","returnType","fieldNodes","listMember","nullableType","getNullableType","isListType","ofType","isAbstractType","finalType","getType","collectSubFields","isObjectType","create","pathSegment","path","push","set"],"sources":["/Users/pom/Code/serverless-ts-yarn-pnp/.yarn/__virtual__/@graphql-tools-utils-virtual-941078811c/0/cache/@graphql-tools-utils-npm-9.2.1-ed63b70392-94ed12df5f.zip/node_modules/@graphql-tools/utils/cjs/visitResult.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.visitResult = exports.visitErrors = exports.visitData = void 0;\nconst getOperationASTFromRequest_js_1 = require(\"./getOperationASTFromRequest.js\");\nconst graphql_1 = require(\"graphql\");\nconst collectFields_js_1 = require(\"./collectFields.js\");\nfunction visitData(data, enter, leave) {\n    if (Array.isArray(data)) {\n        return data.map(value => visitData(value, enter, leave));\n    }\n    else if (typeof data === 'object') {\n        const newData = enter != null ? enter(data) : data;\n        if (newData != null) {\n            for (const key in newData) {\n                const value = newData[key];\n                Object.defineProperty(newData, key, {\n                    value: visitData(value, enter, leave),\n                });\n            }\n        }\n        return leave != null ? leave(newData) : newData;\n    }\n    return data;\n}\nexports.visitData = visitData;\nfunction visitErrors(errors, visitor) {\n    return errors.map(error => visitor(error));\n}\nexports.visitErrors = visitErrors;\nfunction visitResult(result, request, schema, resultVisitorMap, errorVisitorMap) {\n    const fragments = request.document.definitions.reduce((acc, def) => {\n        if (def.kind === graphql_1.Kind.FRAGMENT_DEFINITION) {\n            acc[def.name.value] = def;\n        }\n        return acc;\n    }, {});\n    const variableValues = request.variables || {};\n    const errorInfo = {\n        segmentInfoMap: new Map(),\n        unpathedErrors: new Set(),\n    };\n    const data = result.data;\n    const errors = result.errors;\n    const visitingErrors = errors != null && errorVisitorMap != null;\n    const operationDocumentNode = (0, getOperationASTFromRequest_js_1.getOperationASTFromRequest)(request);\n    if (data != null && operationDocumentNode != null) {\n        result.data = visitRoot(data, operationDocumentNode, schema, fragments, variableValues, resultVisitorMap, visitingErrors ? errors : undefined, errorInfo);\n    }\n    if (errors != null && errorVisitorMap) {\n        result.errors = visitErrorsByType(errors, errorVisitorMap, errorInfo);\n    }\n    return result;\n}\nexports.visitResult = visitResult;\nfunction visitErrorsByType(errors, errorVisitorMap, errorInfo) {\n    const segmentInfoMap = errorInfo.segmentInfoMap;\n    const unpathedErrors = errorInfo.unpathedErrors;\n    const unpathedErrorVisitor = errorVisitorMap['__unpathed'];\n    return errors.map(originalError => {\n        const pathSegmentsInfo = segmentInfoMap.get(originalError);\n        const newError = pathSegmentsInfo == null\n            ? originalError\n            : pathSegmentsInfo.reduceRight((acc, segmentInfo) => {\n                const typeName = segmentInfo.type.name;\n                const typeVisitorMap = errorVisitorMap[typeName];\n                if (typeVisitorMap == null) {\n                    return acc;\n                }\n                const errorVisitor = typeVisitorMap[segmentInfo.fieldName];\n                return errorVisitor == null ? acc : errorVisitor(acc, segmentInfo.pathIndex);\n            }, originalError);\n        if (unpathedErrorVisitor && unpathedErrors.has(originalError)) {\n            return unpathedErrorVisitor(newError);\n        }\n        return newError;\n    });\n}\nfunction getOperationRootType(schema, operationDef) {\n    switch (operationDef.operation) {\n        case 'query':\n            return schema.getQueryType();\n        case 'mutation':\n            return schema.getMutationType();\n        case 'subscription':\n            return schema.getSubscriptionType();\n    }\n}\nfunction visitRoot(root, operation, schema, fragments, variableValues, resultVisitorMap, errors, errorInfo) {\n    const operationRootType = getOperationRootType(schema, operation);\n    const { fields: collectedFields } = (0, collectFields_js_1.collectFields)(schema, fragments, variableValues, operationRootType, operation.selectionSet);\n    return visitObjectValue(root, operationRootType, collectedFields, schema, fragments, variableValues, resultVisitorMap, 0, errors, errorInfo);\n}\nfunction visitObjectValue(object, type, fieldNodeMap, schema, fragments, variableValues, resultVisitorMap, pathIndex, errors, errorInfo) {\n    var _a;\n    const fieldMap = type.getFields();\n    const typeVisitorMap = resultVisitorMap === null || resultVisitorMap === void 0 ? void 0 : resultVisitorMap[type.name];\n    const enterObject = typeVisitorMap === null || typeVisitorMap === void 0 ? void 0 : typeVisitorMap.__enter;\n    const newObject = enterObject != null ? enterObject(object) : object;\n    let sortedErrors;\n    let errorMap = null;\n    if (errors != null) {\n        sortedErrors = sortErrorsByPathSegment(errors, pathIndex);\n        errorMap = sortedErrors.errorMap;\n        for (const error of sortedErrors.unpathedErrors) {\n            errorInfo.unpathedErrors.add(error);\n        }\n    }\n    for (const [responseKey, subFieldNodes] of fieldNodeMap) {\n        const fieldName = subFieldNodes[0].name.value;\n        let fieldType = (_a = fieldMap[fieldName]) === null || _a === void 0 ? void 0 : _a.type;\n        if (fieldType == null) {\n            switch (fieldName) {\n                case '__typename':\n                    fieldType = graphql_1.TypeNameMetaFieldDef.type;\n                    break;\n                case '__schema':\n                    fieldType = graphql_1.SchemaMetaFieldDef.type;\n                    break;\n                case '__type':\n                    fieldType = graphql_1.TypeMetaFieldDef.type;\n                    break;\n            }\n        }\n        const newPathIndex = pathIndex + 1;\n        let fieldErrors;\n        if (errorMap) {\n            fieldErrors = errorMap[responseKey];\n            if (fieldErrors != null) {\n                delete errorMap[responseKey];\n            }\n            addPathSegmentInfo(type, fieldName, newPathIndex, fieldErrors, errorInfo);\n        }\n        const newValue = visitFieldValue(object[responseKey], fieldType, subFieldNodes, schema, fragments, variableValues, resultVisitorMap, newPathIndex, fieldErrors, errorInfo);\n        updateObject(newObject, responseKey, newValue, typeVisitorMap, fieldName);\n    }\n    const oldTypename = newObject.__typename;\n    if (oldTypename != null) {\n        updateObject(newObject, '__typename', oldTypename, typeVisitorMap, '__typename');\n    }\n    if (errorMap) {\n        for (const errorsKey in errorMap) {\n            const errors = errorMap[errorsKey];\n            for (const error of errors) {\n                errorInfo.unpathedErrors.add(error);\n            }\n        }\n    }\n    const leaveObject = typeVisitorMap === null || typeVisitorMap === void 0 ? void 0 : typeVisitorMap.__leave;\n    return leaveObject != null ? leaveObject(newObject) : newObject;\n}\nfunction updateObject(object, responseKey, newValue, typeVisitorMap, fieldName) {\n    if (typeVisitorMap == null) {\n        object[responseKey] = newValue;\n        return;\n    }\n    const fieldVisitor = typeVisitorMap[fieldName];\n    if (fieldVisitor == null) {\n        object[responseKey] = newValue;\n        return;\n    }\n    const visitedValue = fieldVisitor(newValue);\n    if (visitedValue === undefined) {\n        delete object[responseKey];\n        return;\n    }\n    object[responseKey] = visitedValue;\n}\nfunction visitListValue(list, returnType, fieldNodes, schema, fragments, variableValues, resultVisitorMap, pathIndex, errors, errorInfo) {\n    return list.map(listMember => visitFieldValue(listMember, returnType, fieldNodes, schema, fragments, variableValues, resultVisitorMap, pathIndex + 1, errors, errorInfo));\n}\nfunction visitFieldValue(value, returnType, fieldNodes, schema, fragments, variableValues, resultVisitorMap, pathIndex, errors = [], errorInfo) {\n    if (value == null) {\n        return value;\n    }\n    const nullableType = (0, graphql_1.getNullableType)(returnType);\n    if ((0, graphql_1.isListType)(nullableType)) {\n        return visitListValue(value, nullableType.ofType, fieldNodes, schema, fragments, variableValues, resultVisitorMap, pathIndex, errors, errorInfo);\n    }\n    else if ((0, graphql_1.isAbstractType)(nullableType)) {\n        const finalType = schema.getType(value.__typename);\n        const { fields: collectedFields } = (0, collectFields_js_1.collectSubFields)(schema, fragments, variableValues, finalType, fieldNodes);\n        return visitObjectValue(value, finalType, collectedFields, schema, fragments, variableValues, resultVisitorMap, pathIndex, errors, errorInfo);\n    }\n    else if ((0, graphql_1.isObjectType)(nullableType)) {\n        const { fields: collectedFields } = (0, collectFields_js_1.collectSubFields)(schema, fragments, variableValues, nullableType, fieldNodes);\n        return visitObjectValue(value, nullableType, collectedFields, schema, fragments, variableValues, resultVisitorMap, pathIndex, errors, errorInfo);\n    }\n    const typeVisitorMap = resultVisitorMap === null || resultVisitorMap === void 0 ? void 0 : resultVisitorMap[nullableType.name];\n    if (typeVisitorMap == null) {\n        return value;\n    }\n    const visitedValue = typeVisitorMap(value);\n    return visitedValue === undefined ? value : visitedValue;\n}\nfunction sortErrorsByPathSegment(errors, pathIndex) {\n    var _a;\n    const errorMap = Object.create(null);\n    const unpathedErrors = new Set();\n    for (const error of errors) {\n        const pathSegment = (_a = error.path) === null || _a === void 0 ? void 0 : _a[pathIndex];\n        if (pathSegment == null) {\n            unpathedErrors.add(error);\n            continue;\n        }\n        if (pathSegment in errorMap) {\n            errorMap[pathSegment].push(error);\n        }\n        else {\n            errorMap[pathSegment] = [error];\n        }\n    }\n    return {\n        errorMap,\n        unpathedErrors,\n    };\n}\nfunction addPathSegmentInfo(type, fieldName, pathIndex, errors = [], errorInfo) {\n    for (const error of errors) {\n        const segmentInfo = {\n            type,\n            fieldName,\n            pathIndex,\n        };\n        const pathSegmentsInfo = errorInfo.segmentInfoMap.get(error);\n        if (pathSegmentsInfo == null) {\n            errorInfo.segmentInfoMap.set(error, [segmentInfo]);\n        }\n        else {\n            pathSegmentsInfo.push(segmentInfo);\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}