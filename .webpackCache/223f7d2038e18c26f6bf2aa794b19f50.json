{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isFederationType = exports.federationTypes = exports.serviceField = exports.entitiesField = exports.entitiesResolver = exports.LinkImportType = exports.AnyType = exports.ServiceType = exports.EntityType = void 0;\nconst graphql_1 = require(\"graphql\");\nexports.EntityType = new graphql_1.GraphQLUnionType({\n  name: '_Entity',\n  types: []\n});\nexports.ServiceType = new graphql_1.GraphQLObjectType({\n  name: '_Service',\n  fields: {\n    sdl: {\n      type: graphql_1.GraphQLString,\n      description: 'The sdl representing the federated service capabilities. Includes federation directives, removes federation types, and includes rest of full schema after schema directives have been applied'\n    }\n  }\n});\nexports.AnyType = new graphql_1.GraphQLScalarType({\n  name: '_Any',\n  serialize(value) {\n    return value;\n  }\n});\nexports.LinkImportType = new graphql_1.GraphQLScalarType({\n  name: 'link__Import',\n  specifiedByURL: null\n});\nfunction isPromise(value) {\n  return typeof (value === null || value === void 0 ? void 0 : value.then) === 'function';\n}\nfunction addTypeNameToPossibleReturn(maybeObject, typename) {\n  if (maybeObject !== null && typeof maybeObject === 'object') {\n    Object.defineProperty(maybeObject, '__typename', {\n      value: typename\n    });\n  }\n  return maybeObject;\n}\nfunction entitiesResolver({\n  representations,\n  context,\n  info\n}) {\n  return representations.map(reference => {\n    var _a, _b, _c, _d, _e;\n    const {\n      __typename\n    } = reference;\n    const type = info.schema.getType(__typename);\n    if (!type || !(0, graphql_1.isObjectType)(type)) {\n      throw new Error(`The _entities resolver tried to load an entity for type \"${__typename}\", but no object type of that name was found in the schema`);\n    }\n    if ((_b = (_a = info.cacheControl) === null || _a === void 0 ? void 0 : _a.cacheHint) === null || _b === void 0 ? void 0 : _b.restrict) {\n      const cacheHint = info.cacheControl.cacheHintFromType(type);\n      if (cacheHint) {\n        info.cacheControl.cacheHint.restrict(cacheHint);\n      }\n    }\n    const resolveReference = (_e = (_d = (_c = type.extensions.apollo) === null || _c === void 0 ? void 0 : _c.subgraph) === null || _d === void 0 ? void 0 : _d.resolveReference) !== null && _e !== void 0 ? _e : function defaultResolveReference() {\n      return reference;\n    };\n    const result = resolveReference(reference, context, info);\n    if (isPromise(result)) {\n      return result.then(x => addTypeNameToPossibleReturn(x, __typename));\n    }\n    return addTypeNameToPossibleReturn(result, __typename);\n  });\n}\nexports.entitiesResolver = entitiesResolver;\nexports.entitiesField = {\n  type: new graphql_1.GraphQLNonNull(new graphql_1.GraphQLList(exports.EntityType)),\n  args: {\n    representations: {\n      type: new graphql_1.GraphQLNonNull(new graphql_1.GraphQLList(new graphql_1.GraphQLNonNull(exports.AnyType)))\n    }\n  },\n  resolve(_source, {\n    representations\n  }, context, info) {\n    return entitiesResolver({\n      representations,\n      context,\n      info\n    });\n  }\n};\nexports.serviceField = {\n  type: new graphql_1.GraphQLNonNull(exports.ServiceType)\n};\nexports.federationTypes = [exports.ServiceType, exports.AnyType, exports.EntityType, exports.LinkImportType];\nfunction isFederationType(type) {\n  return (0, graphql_1.isNamedType)(type) && exports.federationTypes.some(({\n    name\n  }) => name === type.name);\n}\nexports.isFederationType = isFederationType;","map":{"version":3,"mappings":"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","names":["graphql_1","require","exports","EntityType","GraphQLUnionType","name","types","ServiceType","GraphQLObjectType","fields","sdl","type","GraphQLString","description","AnyType","GraphQLScalarType","serialize","value","LinkImportType","specifiedByURL","isPromise","then","addTypeNameToPossibleReturn","maybeObject","typename","Object","defineProperty","entitiesResolver","representations","context","info","map","reference","__typename","schema","getType","isObjectType","Error","_b","_a","cacheControl","cacheHint","restrict","cacheHintFromType","resolveReference","_e","_d","_c","extensions","apollo","subgraph","defaultResolveReference","result","x","entitiesField","GraphQLNonNull","GraphQLList","args","resolve","_source","serviceField","federationTypes","isFederationType","isNamedType","some"],"sourceRoot":"","sources":["../src/types.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}