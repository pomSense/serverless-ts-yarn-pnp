{"ast":null,"code":"\"use strict\";\n\nconst util = require('util');\nconst logger = require('./logger');\nconst {\n  setCurrentInvoke\n} = require('./current-invoke');\nconst {\n  getEventSource\n} = require('./event-sources');\nconst {\n  getEventSourceNameBasedOnEvent\n} = require('./event-sources/utils');\nconst {\n  getFramework\n} = require('./frameworks');\nconst makeResolver = require('./make-resolver');\nconst {\n  forwardRequestToNodeServer,\n  respondToEventSourceWithError\n} = require('./transport');\nconst {\n  DEFAULT_BINARY_ENCODINGS,\n  DEFAULT_BINARY_CONTENT_TYPES\n} = require('./constants');\nfunction getDefaultBinarySettings(deprecatedBinaryMimeTypes) {\n  return {\n    contentTypes: deprecatedBinaryMimeTypes || DEFAULT_BINARY_CONTENT_TYPES,\n    contentEncodings: DEFAULT_BINARY_ENCODINGS\n  };\n}\nfunction configure({\n  app: configureApp,\n  logSettings,\n  log: configureLog = logger(logSettings),\n  framework: configureFramework = getFramework({\n    app: configureApp,\n    log: configureLog\n  }),\n  binaryMimeTypes: configureBinaryMimeTypes,\n  binarySettings: configureBinarySettings,\n  resolutionMode: configureResolutionMode = 'PROMISE',\n  eventSourceName: configureEventSourceName,\n  eventSource: configureEventFns,\n  eventSourceRoutes: configureEventSourceRoutes,\n  respondWithErrors: configureRespondWithErrors = process.env.NODE_ENV === 'development'\n} = {}) {\n  function proxy({\n    app = configureApp,\n    framework = configureFramework,\n    event = {},\n    context = {},\n    callback = null,\n    resolutionMode = configureResolutionMode,\n    eventSourceName = configureEventSourceName || getEventSourceNameBasedOnEvent({\n      event\n    }),\n    binaryMimeTypes = configureBinaryMimeTypes,\n    binarySettings = configureBinarySettings || getDefaultBinarySettings(binaryMimeTypes),\n    eventSource = configureEventFns || getEventSource({\n      eventSourceName\n    }),\n    eventSourceRoutes = configureEventSourceRoutes || {},\n    log = configureLog,\n    respondWithErrors = configureRespondWithErrors\n  }) {\n    log.debug('SERVERLESS_EXPRESS:PROXY', () => ({\n      event: util.inspect(event, {\n        depth: null\n      }),\n      context: util.inspect(context, {\n        depth: null\n      }),\n      resolutionMode,\n      eventSourceName,\n      binarySettings,\n      respondWithErrors\n    }));\n    if (binaryMimeTypes) {\n      console.warn('[DEPRECATION NOTICE] { binaryMimeTypes: [] } is deprecated. base64 encoding is now automatically determined based on response content-type and content-encoding. If you need to manually set binary content types, instead, use { binarySettings: { contentTypes: [] } }');\n    }\n    setCurrentInvoke({\n      event,\n      context\n    });\n    return new Promise((resolve, reject) => {\n      const promise = {\n        resolve,\n        reject\n      };\n      const resolver = makeResolver({\n        context,\n        callback,\n        promise,\n        resolutionMode\n      });\n      try {\n        forwardRequestToNodeServer({\n          app,\n          framework,\n          event,\n          context,\n          resolver,\n          eventSourceName,\n          binarySettings,\n          eventSource,\n          eventSourceRoutes,\n          log\n        });\n      } catch (error) {\n        respondToEventSourceWithError({\n          error,\n          resolver,\n          log,\n          respondWithErrors,\n          eventSourceName,\n          eventSource\n        });\n      }\n    });\n  }\n  function handler(event, context, callback) {\n    return proxy({\n      event,\n      context,\n      callback\n    });\n  }\n  handler.handler = (...params) => {\n    console.warn('[DEPRECATION NOTICE] You\\'re using the deprecated `serverlessExpress({...}).handler({...})` method. This will be removed in a future version of @vendia/serverless-express. Instead, simply return `serverlessExpress({...})` as your handler.');\n    return handler(...params);\n  };\n  handler.proxy = (...params) => {\n    console.warn('[DEPRECATION NOTICE] You\\'re using the deprecated `serverlessExpress({...}).proxy({...})` method. This will be removed in a future version of @vendia/serverless-express. Instead, simply return `serverlessExpress({...})` as your handler.');\n    return proxy(...params);\n  };\n  handler.log = configureLog;\n  return handler;\n}\nmodule.exports = configure;","map":{"version":3,"names":["util","require","logger","setCurrentInvoke","getEventSource","getEventSourceNameBasedOnEvent","getFramework","makeResolver","forwardRequestToNodeServer","respondToEventSourceWithError","DEFAULT_BINARY_ENCODINGS","DEFAULT_BINARY_CONTENT_TYPES","getDefaultBinarySettings","deprecatedBinaryMimeTypes","contentTypes","contentEncodings","configure","app","configureApp","logSettings","log","configureLog","framework","configureFramework","binaryMimeTypes","configureBinaryMimeTypes","binarySettings","configureBinarySettings","resolutionMode","configureResolutionMode","eventSourceName","configureEventSourceName","eventSource","configureEventFns","eventSourceRoutes","configureEventSourceRoutes","respondWithErrors","configureRespondWithErrors","process","env","NODE_ENV","proxy","event","context","callback","debug","inspect","depth","console","warn","Promise","resolve","reject","promise","resolver","error","handler","params","module","exports"],"sources":["/Users/pom/Code/serverless-ts-yarn-pnp/.yarn/cache/@vendia-serverless-express-npm-4.10.4-2e67e59920-f33d3f0f08.zip/node_modules/@vendia/serverless-express/src/configure.js"],"sourcesContent":["const util = require('util')\nconst logger = require('./logger')\nconst { setCurrentInvoke } = require('./current-invoke')\nconst { getEventSource } = require('./event-sources')\nconst { getEventSourceNameBasedOnEvent } = require('./event-sources/utils')\nconst { getFramework } = require('./frameworks')\nconst makeResolver = require('./make-resolver')\nconst { forwardRequestToNodeServer, respondToEventSourceWithError } = require('./transport')\nconst { DEFAULT_BINARY_ENCODINGS, DEFAULT_BINARY_CONTENT_TYPES } = require('./constants')\n\nfunction getDefaultBinarySettings (deprecatedBinaryMimeTypes) {\n  return {\n    contentTypes: deprecatedBinaryMimeTypes || DEFAULT_BINARY_CONTENT_TYPES,\n    contentEncodings: DEFAULT_BINARY_ENCODINGS\n  }\n}\n\nfunction configure ({\n  app: configureApp,\n  logSettings,\n  log: configureLog = logger(logSettings),\n  framework: configureFramework = getFramework({ app: configureApp, log: configureLog }),\n  binaryMimeTypes: configureBinaryMimeTypes,\n  binarySettings: configureBinarySettings,\n  resolutionMode: configureResolutionMode = 'PROMISE',\n  eventSourceName: configureEventSourceName,\n  eventSource: configureEventFns,\n  eventSourceRoutes: configureEventSourceRoutes,\n  respondWithErrors: configureRespondWithErrors = process.env.NODE_ENV === 'development'\n} = {}) {\n  function proxy ({\n    app = configureApp,\n    framework = configureFramework,\n    event = {},\n    context = {},\n    callback = null,\n    resolutionMode = configureResolutionMode,\n    eventSourceName = configureEventSourceName || getEventSourceNameBasedOnEvent({ event }),\n    binaryMimeTypes = configureBinaryMimeTypes,\n    binarySettings = configureBinarySettings || getDefaultBinarySettings(binaryMimeTypes),\n    eventSource = configureEventFns || getEventSource({ eventSourceName }),\n    eventSourceRoutes = configureEventSourceRoutes || {},\n    log = configureLog,\n    respondWithErrors = configureRespondWithErrors\n  }) {\n    log.debug('SERVERLESS_EXPRESS:PROXY', () => ({\n      event: util.inspect(event, { depth: null }),\n      context: util.inspect(context, { depth: null }),\n      resolutionMode,\n      eventSourceName,\n      binarySettings,\n      respondWithErrors\n    }))\n\n    if (binaryMimeTypes) {\n      console.warn('[DEPRECATION NOTICE] { binaryMimeTypes: [] } is deprecated. base64 encoding is now automatically determined based on response content-type and content-encoding. If you need to manually set binary content types, instead, use { binarySettings: { contentTypes: [] } }')\n    }\n\n    setCurrentInvoke({ event, context })\n    return new Promise((resolve, reject) => {\n      const promise = {\n        resolve,\n        reject\n      }\n      const resolver = makeResolver({\n        context,\n        callback,\n        promise,\n        resolutionMode\n      })\n\n      try {\n        forwardRequestToNodeServer({\n          app,\n          framework,\n          event,\n          context,\n          resolver,\n          eventSourceName,\n          binarySettings,\n          eventSource,\n          eventSourceRoutes,\n          log\n        })\n      } catch (error) {\n        respondToEventSourceWithError({\n          error,\n          resolver,\n          log,\n          respondWithErrors,\n          eventSourceName,\n          eventSource\n        })\n      }\n    })\n  }\n\n  function handler (event, context, callback) {\n    return proxy({\n      event,\n      context,\n      callback\n    })\n  }\n\n  handler.handler = (...params) => {\n    console.warn('[DEPRECATION NOTICE] You\\'re using the deprecated `serverlessExpress({...}).handler({...})` method. This will be removed in a future version of @vendia/serverless-express. Instead, simply return `serverlessExpress({...})` as your handler.')\n    return handler(...params)\n  }\n\n  handler.proxy = (...params) => {\n    console.warn('[DEPRECATION NOTICE] You\\'re using the deprecated `serverlessExpress({...}).proxy({...})` method. This will be removed in a future version of @vendia/serverless-express. Instead, simply return `serverlessExpress({...})` as your handler.')\n    return proxy(...params)\n  }\n\n  handler.log = configureLog\n\n  return handler\n}\n\nmodule.exports = configure\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}