{"ast":null,"code":"\"use strict\";\n\nconst AWS = require('aws-sdk');\n\n/**\n * This method is used only in sls offline to call the remote lambda authorizer\n * {@link https://www.serverless.com/plugins/serverless-offline-local-authorizers-plugin}\n * @param {*} event {@link APIGatewayRequestAuthorizerEvent}\n * @param {*} context {@link Context}\n * @returns\n */\nconst localAuthProxyFn = async event => {\n  // Use this until your function is deployed. Once it is, set to false\n  process.env.IS_TEST = true;\n  if (process.env.IS_TEST) {\n    console.log('ðŸ”’ TEST Authorizer enabled ðŸ”’');\n    return {\n      principalId: 'user|a1b2c3d4',\n      policyDocument: {\n        Version: '2012-10-17',\n        Statement: [{\n          Action: 'execute-api:Invoke',\n          Effect: 'Allow',\n          Resource: event.methodArn\n        }]\n      },\n      context: {\n        scope: 'user',\n        userId: 'a1b2c3d4'\n      }\n    };\n  }\n  const lambda = new AWS.Lambda();\n  const result = await lambda.invoke({\n    FunctionName: process.env.AUTHORIZER_NAME,\n    InvocationType: 'RequestResponse',\n    Payload: JSON.stringify(event)\n  }).promise();\n  if (result.StatusCode === 200) {\n    return JSON.parse(result.Payload);\n  }\n  throw Error('Authorizer error');\n};\nmodule.exports = {\n  localAuthProxyFn\n};","map":{"version":3,"names":["AWS","require","localAuthProxyFn","event","process","env","IS_TEST","console","log","principalId","policyDocument","Version","Statement","Action","Effect","Resource","methodArn","context","scope","userId","lambda","Lambda","result","invoke","FunctionName","AUTHORIZER_NAME","InvocationType","Payload","JSON","stringify","promise","StatusCode","parse","Error","module","exports"],"sources":["/Users/pom/Code/serverless-ts-yarn-pnp/local-authorizers.js"],"sourcesContent":["const AWS = require('aws-sdk')\n\n/**\n * This method is used only in sls offline to call the remote lambda authorizer\n * {@link https://www.serverless.com/plugins/serverless-offline-local-authorizers-plugin}\n * @param {*} event {@link APIGatewayRequestAuthorizerEvent}\n * @param {*} context {@link Context}\n * @returns\n */\nconst localAuthProxyFn = async (event) => {\n  // Use this until your function is deployed. Once it is, set to false\n  process.env.IS_TEST = true\n  if (process.env.IS_TEST) {\n    console.log('ðŸ”’ TEST Authorizer enabled ðŸ”’')\n    return {\n      principalId: 'user|a1b2c3d4',\n      policyDocument: {\n        Version: '2012-10-17',\n        Statement: [\n          {\n            Action: 'execute-api:Invoke',\n            Effect: 'Allow',\n            Resource: event.methodArn\n          }\n        ]\n      },\n      context: {\n        scope: 'user',\n        userId: 'a1b2c3d4'\n      }\n    }\n  }\n  const lambda = new AWS.Lambda()\n  const result = await lambda\n    .invoke({\n      FunctionName: process.env.AUTHORIZER_NAME,\n      InvocationType: 'RequestResponse',\n      Payload: JSON.stringify(event)\n    })\n    .promise()\n\n  if (result.StatusCode === 200) {\n    return JSON.parse(result.Payload)\n  }\n\n  throw Error('Authorizer error')\n}\n\nmodule.exports = { localAuthProxyFn }\n"],"mappings":";;AAAA,MAAMA,GAAG,GAAGC,OAAO,CAAC,SAAS,CAAC;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,gBAAgB,GAAG,MAAOC,KAAK,IAAK;EACxC;EACAC,OAAO,CAACC,GAAG,CAACC,OAAO,GAAG,IAAI;EAC1B,IAAIF,OAAO,CAACC,GAAG,CAACC,OAAO,EAAE;IACvBC,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;IAC5C,OAAO;MACLC,WAAW,EAAE,eAAe;MAC5BC,cAAc,EAAE;QACdC,OAAO,EAAE,YAAY;QACrBC,SAAS,EAAE,CACT;UACEC,MAAM,EAAE,oBAAoB;UAC5BC,MAAM,EAAE,OAAO;UACfC,QAAQ,EAAEZ,KAAK,CAACa;QAClB,CAAC;MAEL,CAAC;MACDC,OAAO,EAAE;QACPC,KAAK,EAAE,MAAM;QACbC,MAAM,EAAE;MACV;IACF,CAAC;EACH;EACA,MAAMC,MAAM,GAAG,IAAIpB,GAAG,CAACqB,MAAM,CAAC,CAAC;EAC/B,MAAMC,MAAM,GAAG,MAAMF,MAAM,CACxBG,MAAM,CAAC;IACNC,YAAY,EAAEpB,OAAO,CAACC,GAAG,CAACoB,eAAe;IACzCC,cAAc,EAAE,iBAAiB;IACjCC,OAAO,EAAEC,IAAI,CAACC,SAAS,CAAC1B,KAAK;EAC/B,CAAC,CAAC,CACD2B,OAAO,CAAC,CAAC;EAEZ,IAAIR,MAAM,CAACS,UAAU,KAAK,GAAG,EAAE;IAC7B,OAAOH,IAAI,CAACI,KAAK,CAACV,MAAM,CAACK,OAAO,CAAC;EACnC;EAEA,MAAMM,KAAK,CAAC,kBAAkB,CAAC;AACjC,CAAC;AAEDC,MAAM,CAACC,OAAO,GAAG;EAAEjC;AAAiB,CAAC"},"metadata":{},"sourceType":"module"}