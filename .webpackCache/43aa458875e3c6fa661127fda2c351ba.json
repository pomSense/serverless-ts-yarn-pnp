{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = undefined && undefined.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ApolloServerPluginUsageReportingDisabled = exports.makeHTTPRequestHeaders = exports.ApolloServerPluginUsageReporting = void 0;\nconst os_1 = __importDefault(require(\"os\"));\nconst zlib_1 = require(\"zlib\");\nconst async_retry_1 = __importDefault(require(\"async-retry\"));\nconst apollo_reporting_protobuf_1 = require(\"apollo-reporting-protobuf\");\nconst apollo_server_env_1 = require(\"apollo-server-env\");\nconst apollo_server_types_1 = require(\"apollo-server-types\");\nconst operationDerivedDataCache_1 = require(\"./operationDerivedDataCache\");\nconst utils_usagereporting_1 = require(\"@apollo/utils.usagereporting\");\nconst traceTreeBuilder_1 = require(\"../traceTreeBuilder\");\nconst traceDetails_1 = require(\"./traceDetails\");\nconst graphql_1 = require(\"graphql\");\nconst schemaReporting_1 = require(\"../schemaReporting\");\nconst stats_1 = require(\"./stats\");\nconst defaultSendOperationsAsTrace_1 = require(\"./defaultSendOperationsAsTrace\");\nconst utils_usagereporting_2 = require(\"@apollo/utils.usagereporting\");\nconst reportHeaderDefaults = {\n  hostname: os_1.default.hostname(),\n  agentVersion: `apollo-server-core@${require('../../../package.json').version}`,\n  runtimeVersion: `node ${process.version}`,\n  uname: `${os_1.default.platform()}, ${os_1.default.type()}, ${os_1.default.release()}, ${os_1.default.arch()})`\n};\nclass ReportData {\n  constructor(executableSchemaId, graphRef) {\n    this.header = new apollo_reporting_protobuf_1.ReportHeader({\n      ...reportHeaderDefaults,\n      executableSchemaId,\n      graphRef\n    });\n    this.reset();\n  }\n  reset() {\n    this.report = new stats_1.OurReport(this.header);\n  }\n}\nfunction ApolloServerPluginUsageReporting(options = Object.create(null)) {\n  const fieldLevelInstrumentationOption = options.fieldLevelInstrumentation;\n  const fieldLevelInstrumentation = typeof fieldLevelInstrumentationOption === 'number' ? async () => Math.random() < fieldLevelInstrumentationOption ? 1 / fieldLevelInstrumentationOption : 0 : fieldLevelInstrumentationOption ? fieldLevelInstrumentationOption : async () => true;\n  let requestDidStartHandler;\n  return {\n    __internal_plugin_id__() {\n      return 'UsageReporting';\n    },\n    async requestDidStart(requestContext) {\n      if (!requestDidStartHandler) {\n        throw Error('The usage reporting plugin has been asked to handle a request before the ' + 'server has started. See https://github.com/apollographql/apollo-server/issues/4588 ' + 'for more details.');\n      }\n      return requestDidStartHandler(requestContext);\n    },\n    async serverWillStart({\n      logger: serverLogger,\n      apollo,\n      serverlessFramework\n    }) {\n      var _a, _b, _c, _d;\n      const logger = (_a = options.logger) !== null && _a !== void 0 ? _a : serverLogger;\n      const {\n        key,\n        graphRef\n      } = apollo;\n      if (!(key && graphRef)) {\n        throw new Error(\"You've enabled usage reporting via ApolloServerPluginUsageReporting, \" + 'but you also need to provide your Apollo API key and graph ref, via ' + 'the APOLLO_KEY/APOLLO_GRAPH_REF environment ' + 'variables or via `new ApolloServer({apollo: {key, graphRef})`.');\n      }\n      logger.info('Apollo usage reporting starting! See your graph at ' + `https://studio.apollographql.com/graph/${encodeURI(graphRef)}/`);\n      const sendReportsImmediately = (_b = options.sendReportsImmediately) !== null && _b !== void 0 ? _b : serverlessFramework;\n      let operationDerivedDataCache = null;\n      const reportDataByExecutableSchemaId = Object.create(null);\n      const overriddenExecutableSchemaId = options.overrideReportedSchema ? (0, schemaReporting_1.computeCoreSchemaHash)(options.overrideReportedSchema) : undefined;\n      let lastSeenExecutableSchemaToId;\n      let reportTimer;\n      if (!sendReportsImmediately) {\n        reportTimer = setInterval(() => sendAllReportsAndReportErrors(), options.reportIntervalMs || 10 * 1000);\n      }\n      let graphMightSupportTraces = true;\n      const sendOperationAsTrace = (_c = options.experimental_sendOperationAsTrace) !== null && _c !== void 0 ? _c : (0, defaultSendOperationsAsTrace_1.defaultSendOperationsAsTrace)();\n      const includeTracesContributingToStats = (_d = options.internal_includeTracesContributingToStats) !== null && _d !== void 0 ? _d : false;\n      let stopped = false;\n      function executableSchemaIdForSchema(schema) {\n        if ((lastSeenExecutableSchemaToId === null || lastSeenExecutableSchemaToId === void 0 ? void 0 : lastSeenExecutableSchemaToId.executableSchema) === schema) {\n          return lastSeenExecutableSchemaToId.executableSchemaId;\n        }\n        const id = (0, schemaReporting_1.computeCoreSchemaHash)((0, graphql_1.printSchema)(schema));\n        lastSeenExecutableSchemaToId = {\n          executableSchema: schema,\n          executableSchemaId: id\n        };\n        return id;\n      }\n      const getReportData = executableSchemaId => {\n        const existing = reportDataByExecutableSchemaId[executableSchemaId];\n        if (existing) {\n          return existing;\n        }\n        const reportData = new ReportData(executableSchemaId, graphRef);\n        reportDataByExecutableSchemaId[executableSchemaId] = reportData;\n        return reportData;\n      };\n      async function sendAllReportsAndReportErrors() {\n        await Promise.all(Object.keys(reportDataByExecutableSchemaId).map(executableSchemaId => sendReportAndReportErrors(executableSchemaId)));\n      }\n      async function sendReportAndReportErrors(executableSchemaId) {\n        return sendReport(executableSchemaId).catch(err => {\n          if (options.reportErrorFunction) {\n            options.reportErrorFunction(err);\n          } else {\n            logger.error(err.message);\n          }\n        });\n      }\n      const sendReport = async executableSchemaId => {\n        var _a, _b;\n        const reportData = getReportData(executableSchemaId);\n        const {\n          report\n        } = reportData;\n        reportData.reset();\n        if (Object.keys(report.tracesPerQuery).length === 0 && report.operationCount === 0) {\n          return;\n        }\n        report.endTime = (0, traceTreeBuilder_1.dateToProtoTimestamp)(new Date());\n        report.ensureCountsAreIntegers();\n        const protobufError = apollo_reporting_protobuf_1.Report.verify(report);\n        if (protobufError) {\n          throw new Error(`Error encoding report: ${protobufError}`);\n        }\n        const message = apollo_reporting_protobuf_1.Report.encode(report).finish();\n        if (options.debugPrintReports) {\n          const decodedReport = apollo_reporting_protobuf_1.Report.decode(message);\n          logger.warn(`Apollo usage report: ${JSON.stringify(decodedReport.toJSON())}`);\n        }\n        const compressed = await new Promise((resolve, reject) => {\n          const messageBuffer = Buffer.from(message.buffer, message.byteOffset, message.byteLength);\n          (0, zlib_1.gzip)(messageBuffer, (err, gzipResult) => {\n            if (err) {\n              reject(err);\n            } else {\n              resolve(gzipResult);\n            }\n          });\n        });\n        const fetcher = (_a = options.fetcher) !== null && _a !== void 0 ? _a : apollo_server_env_1.fetch;\n        const response = await (0, async_retry_1.default)(async () => {\n          const curResponse = await fetcher((options.endpointUrl || 'https://usage-reporting.api.apollographql.com') + '/api/ingress/traces', {\n            method: 'POST',\n            headers: {\n              'user-agent': 'ApolloServerPluginUsageReporting',\n              'x-api-key': key,\n              'content-encoding': 'gzip',\n              accept: 'application/json'\n            },\n            body: compressed,\n            agent: options.requestAgent\n          });\n          if (curResponse.status >= 500 && curResponse.status < 600) {\n            throw new Error(`HTTP status ${curResponse.status}, ${(await curResponse.text()) || '(no body)'}`);\n          } else {\n            return curResponse;\n          }\n        }, {\n          retries: (options.maxAttempts || 5) - 1,\n          minTimeout: options.minimumRetryDelayMs || 100,\n          factor: 2\n        }).catch(err => {\n          throw new Error(`Error sending report to Apollo servers: ${err.message}`);\n        });\n        if (response.status < 200 || response.status >= 300) {\n          throw new Error(`Error sending report to Apollo servers: HTTP status ${response.status}, ${(await response.text()) || '(no body)'}`);\n        }\n        if (graphMightSupportTraces && response.status === 200 && ((_b = response.headers.get('content-type')) === null || _b === void 0 ? void 0 : _b.match(/^\\s*application\\/json\\s*(?:;|$)/i))) {\n          const body = await response.text();\n          let parsedBody;\n          try {\n            parsedBody = JSON.parse(body);\n          } catch (e) {\n            throw new Error(`Error parsing response from Apollo servers: ${e}`);\n          }\n          if (parsedBody.tracesIgnored === true) {\n            logger.debug(\"This graph's organization does not have access to traces; sending all \" + 'subsequent operations as traces.');\n            graphMightSupportTraces = false;\n          }\n        }\n        if (options.debugPrintReports) {\n          logger.warn(`Apollo usage report: status ${response.status}`);\n        }\n      };\n      requestDidStartHandler = ({\n        logger: requestLogger,\n        metrics,\n        schema,\n        request: {\n          http,\n          variables\n        }\n      }) => {\n        var _a;\n        const logger = (_a = requestLogger !== null && requestLogger !== void 0 ? requestLogger : options.logger) !== null && _a !== void 0 ? _a : serverLogger;\n        const treeBuilder = new traceTreeBuilder_1.TraceTreeBuilder({\n          rewriteError: options.rewriteError,\n          logger\n        });\n        treeBuilder.startTiming();\n        metrics.startHrTime = treeBuilder.startHrTime;\n        let graphqlValidationFailure = false;\n        let graphqlUnknownOperationName = false;\n        let includeOperationInUsageReporting = null;\n        if (http) {\n          treeBuilder.trace.http = new apollo_reporting_protobuf_1.Trace.HTTP({\n            method: apollo_reporting_protobuf_1.Trace.HTTP.Method[http.method] || apollo_reporting_protobuf_1.Trace.HTTP.Method.UNKNOWN,\n            host: null,\n            path: null\n          });\n          if (options.sendHeaders) {\n            makeHTTPRequestHeaders(treeBuilder.trace.http, http.headers, options.sendHeaders);\n          }\n        }\n        async function maybeCallIncludeRequestHook(requestContext) {\n          if (includeOperationInUsageReporting !== null) return;\n          if (typeof options.includeRequest !== 'function') {\n            includeOperationInUsageReporting = true;\n            return;\n          }\n          includeOperationInUsageReporting = await options.includeRequest(requestContext);\n          if (typeof includeOperationInUsageReporting !== 'boolean') {\n            logger.warn(\"The 'includeRequest' async predicate function must return a boolean value.\");\n            includeOperationInUsageReporting = true;\n          }\n        }\n        let didResolveSource = false;\n        return {\n          async didResolveSource(requestContext) {\n            didResolveSource = true;\n            if (metrics.persistedQueryHit) {\n              treeBuilder.trace.persistedQueryHit = true;\n            }\n            if (metrics.persistedQueryRegister) {\n              treeBuilder.trace.persistedQueryRegister = true;\n            }\n            if (variables) {\n              treeBuilder.trace.details = (0, traceDetails_1.makeTraceDetails)(variables, options.sendVariableValues, requestContext.source);\n            }\n            const clientInfo = (options.generateClientInfo || defaultGenerateClientInfo)(requestContext);\n            if (clientInfo) {\n              const {\n                clientName,\n                clientVersion\n              } = clientInfo;\n              treeBuilder.trace.clientVersion = clientVersion || '';\n              treeBuilder.trace.clientName = clientName || '';\n            }\n          },\n          async validationDidStart() {\n            return async validationErrors => {\n              graphqlValidationFailure = validationErrors ? validationErrors.length !== 0 : false;\n            };\n          },\n          async didResolveOperation(requestContext) {\n            graphqlUnknownOperationName = requestContext.operation === undefined;\n            await maybeCallIncludeRequestHook(requestContext);\n            if (includeOperationInUsageReporting && !graphqlUnknownOperationName) {\n              if (metrics.captureTraces === undefined) {\n                const rawWeight = await fieldLevelInstrumentation(requestContext);\n                treeBuilder.trace.fieldExecutionWeight = typeof rawWeight === 'number' ? rawWeight : rawWeight ? 1 : 0;\n                metrics.captureTraces = !!treeBuilder.trace.fieldExecutionWeight;\n              }\n            }\n          },\n          async executionDidStart() {\n            if (!metrics.captureTraces) return;\n            return {\n              willResolveField({\n                info\n              }) {\n                return treeBuilder.willResolveField(info);\n              }\n            };\n          },\n          async willSendResponse(requestContext) {\n            if (!didResolveSource) return;\n            if (requestContext.errors) {\n              treeBuilder.didEncounterErrors(requestContext.errors);\n            }\n            const resolvedOperation = !!requestContext.operation;\n            await maybeCallIncludeRequestHook(requestContext);\n            treeBuilder.stopTiming();\n            const executableSchemaId = overriddenExecutableSchemaId !== null && overriddenExecutableSchemaId !== void 0 ? overriddenExecutableSchemaId : executableSchemaIdForSchema(schema);\n            const reportData = getReportData(executableSchemaId);\n            if (includeOperationInUsageReporting === false) {\n              if (resolvedOperation) reportData.report.operationCount++;\n              return;\n            }\n            treeBuilder.trace.fullQueryCacheHit = !!metrics.responseCacheHit;\n            treeBuilder.trace.forbiddenOperation = !!metrics.forbiddenOperation;\n            treeBuilder.trace.registeredOperation = !!metrics.registeredOperation;\n            const policyIfCacheable = requestContext.overallCachePolicy.policyIfCacheable();\n            if (policyIfCacheable) {\n              treeBuilder.trace.cachePolicy = new apollo_reporting_protobuf_1.Trace.CachePolicy({\n                scope: policyIfCacheable.scope === apollo_server_types_1.CacheScope.Private ? apollo_reporting_protobuf_1.Trace.CachePolicy.Scope.PRIVATE : policyIfCacheable.scope === apollo_server_types_1.CacheScope.Public ? apollo_reporting_protobuf_1.Trace.CachePolicy.Scope.PUBLIC : apollo_reporting_protobuf_1.Trace.CachePolicy.Scope.UNKNOWN,\n                maxAgeNs: policyIfCacheable.maxAge * 1e9\n              });\n            }\n            if (metrics.queryPlanTrace) {\n              treeBuilder.trace.queryPlan = metrics.queryPlanTrace;\n            }\n            addTrace().catch(logger.error);\n            async function addTrace() {\n              if (stopped) {\n                return;\n              }\n              await new Promise(res => setImmediate(res));\n              const executableSchemaId = overriddenExecutableSchemaId !== null && overriddenExecutableSchemaId !== void 0 ? overriddenExecutableSchemaId : executableSchemaIdForSchema(schema);\n              const reportData = getReportData(executableSchemaId);\n              const {\n                report\n              } = reportData;\n              const {\n                trace\n              } = treeBuilder;\n              let statsReportKey = undefined;\n              let referencedFieldsByType;\n              if (!requestContext.document) {\n                statsReportKey = `## GraphQLParseFailure\\n`;\n              } else if (graphqlValidationFailure) {\n                statsReportKey = `## GraphQLValidationFailure\\n`;\n              } else if (graphqlUnknownOperationName) {\n                statsReportKey = `## GraphQLUnknownOperationName\\n`;\n              }\n              const isExecutable = statsReportKey === undefined;\n              if (statsReportKey) {\n                if (options.sendUnexecutableOperationDocuments) {\n                  trace.unexecutedOperationBody = requestContext.source;\n                  trace.unexecutedOperationName = requestContext.request.operationName || '';\n                }\n                referencedFieldsByType = Object.create(null);\n              } else {\n                const operationDerivedData = getOperationDerivedData();\n                statsReportKey = `# ${requestContext.operationName || '-'}\\n${operationDerivedData.signature}`;\n                referencedFieldsByType = operationDerivedData.referencedFieldsByType;\n              }\n              const protobufError = apollo_reporting_protobuf_1.Trace.verify(trace);\n              if (protobufError) {\n                throw new Error(`Error encoding trace: ${protobufError}`);\n              }\n              if (resolvedOperation) report.operationCount++;\n              report.addTrace({\n                statsReportKey,\n                trace,\n                asTrace: graphMightSupportTraces && (!isExecutable || !!metrics.captureTraces) && sendOperationAsTrace(trace, statsReportKey),\n                includeTracesContributingToStats,\n                referencedFieldsByType\n              });\n              if (sendReportsImmediately || report.sizeEstimator.bytes >= (options.maxUncompressedReportSize || 4 * 1024 * 1024)) {\n                await sendReportAndReportErrors(executableSchemaId);\n              }\n            }\n            function getOperationDerivedData() {\n              var _a;\n              if (!requestContext.document) {\n                throw new Error('No document?');\n              }\n              const cacheKey = (0, operationDerivedDataCache_1.operationDerivedDataCacheKey)(requestContext.queryHash, requestContext.operationName || '');\n              if (!operationDerivedDataCache || operationDerivedDataCache.forSchema !== schema) {\n                operationDerivedDataCache = {\n                  forSchema: schema,\n                  cache: (0, operationDerivedDataCache_1.createOperationDerivedDataCache)({\n                    logger\n                  })\n                };\n              }\n              const cachedOperationDerivedData = operationDerivedDataCache.cache.get(cacheKey);\n              if (cachedOperationDerivedData) {\n                return cachedOperationDerivedData;\n              }\n              const generatedSignature = (options.calculateSignature || utils_usagereporting_1.usageReportingSignature)(requestContext.document, requestContext.operationName || '');\n              const generatedOperationDerivedData = {\n                signature: generatedSignature,\n                referencedFieldsByType: (0, utils_usagereporting_2.calculateReferencedFieldsByType)({\n                  document: requestContext.document,\n                  schema,\n                  resolvedOperationName: (_a = requestContext.operationName) !== null && _a !== void 0 ? _a : null\n                })\n              };\n              operationDerivedDataCache.cache.set(cacheKey, generatedOperationDerivedData);\n              return generatedOperationDerivedData;\n            }\n          }\n        };\n      };\n      return {\n        async serverWillStop() {\n          if (reportTimer) {\n            clearInterval(reportTimer);\n            reportTimer = undefined;\n          }\n          stopped = true;\n          await sendAllReportsAndReportErrors();\n        }\n      };\n    }\n  };\n}\nexports.ApolloServerPluginUsageReporting = ApolloServerPluginUsageReporting;\nfunction makeHTTPRequestHeaders(http, headers, sendHeaders) {\n  if (!sendHeaders || 'none' in sendHeaders && sendHeaders.none || 'all' in sendHeaders && !sendHeaders.all) {\n    return;\n  }\n  for (const [key, value] of headers) {\n    const lowerCaseKey = key.toLowerCase();\n    if ('exceptNames' in sendHeaders && sendHeaders.exceptNames.some(exceptHeader => {\n      return exceptHeader.toLowerCase() === lowerCaseKey;\n    }) || 'onlyNames' in sendHeaders && !sendHeaders.onlyNames.some(header => {\n      return header.toLowerCase() === lowerCaseKey;\n    })) {\n      continue;\n    }\n    switch (key) {\n      case 'authorization':\n      case 'cookie':\n      case 'set-cookie':\n        break;\n      default:\n        http.requestHeaders[key] = new apollo_reporting_protobuf_1.Trace.HTTP.Values({\n          value: [value]\n        });\n    }\n  }\n}\nexports.makeHTTPRequestHeaders = makeHTTPRequestHeaders;\nfunction defaultGenerateClientInfo({\n  request\n}) {\n  var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n  const clientNameHeaderKey = 'apollographql-client-name';\n  const clientVersionHeaderKey = 'apollographql-client-version';\n  if (((_b = (_a = request.http) === null || _a === void 0 ? void 0 : _a.headers) === null || _b === void 0 ? void 0 : _b.get(clientNameHeaderKey)) || ((_d = (_c = request.http) === null || _c === void 0 ? void 0 : _c.headers) === null || _d === void 0 ? void 0 : _d.get(clientVersionHeaderKey))) {\n    return {\n      clientName: (_f = (_e = request.http) === null || _e === void 0 ? void 0 : _e.headers) === null || _f === void 0 ? void 0 : _f.get(clientNameHeaderKey),\n      clientVersion: (_h = (_g = request.http) === null || _g === void 0 ? void 0 : _g.headers) === null || _h === void 0 ? void 0 : _h.get(clientVersionHeaderKey)\n    };\n  } else if ((_j = request.extensions) === null || _j === void 0 ? void 0 : _j.clientInfo) {\n    return request.extensions.clientInfo;\n  } else {\n    return {};\n  }\n}\nfunction ApolloServerPluginUsageReportingDisabled() {\n  return {\n    __internal_plugin_id__() {\n      return 'UsageReporting';\n    }\n  };\n}\nexports.ApolloServerPluginUsageReportingDisabled = ApolloServerPluginUsageReportingDisabled;","map":{"version":3,"mappings":"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","names":["os_1","__importDefault","require","zlib_1","async_retry_1","apollo_reporting_protobuf_1","apollo_server_env_1","apollo_server_types_1","operationDerivedDataCache_1","utils_usagereporting_1","traceTreeBuilder_1","traceDetails_1","graphql_1","schemaReporting_1","stats_1","defaultSendOperationsAsTrace_1","utils_usagereporting_2","reportHeaderDefaults","hostname","default","agentVersion","version","runtimeVersion","process","uname","platform","type","release","arch","ReportData","constructor","executableSchemaId","graphRef","header","ReportHeader","reset","report","OurReport","ApolloServerPluginUsageReporting","options","Object","create","fieldLevelInstrumentationOption","fieldLevelInstrumentation","Math","random","requestDidStartHandler","__internal_plugin_id__","requestDidStart","requestContext","Error","serverWillStart","logger","serverLogger","apollo","serverlessFramework","_a","key","info","encodeURI","sendReportsImmediately","_b","operationDerivedDataCache","reportDataByExecutableSchemaId","overriddenExecutableSchemaId","overrideReportedSchema","computeCoreSchemaHash","undefined","lastSeenExecutableSchemaToId","reportTimer","setInterval","sendAllReportsAndReportErrors","reportIntervalMs","graphMightSupportTraces","sendOperationAsTrace","_c","experimental_sendOperationAsTrace","defaultSendOperationsAsTrace","includeTracesContributingToStats","_d","internal_includeTracesContributingToStats","stopped","executableSchemaIdForSchema","schema","executableSchema","id","printSchema","getReportData","existing","reportData","Promise","all","keys","map","sendReportAndReportErrors","sendReport","catch","err","reportErrorFunction","error","message","tracesPerQuery","length","operationCount","endTime","dateToProtoTimestamp","Date","ensureCountsAreIntegers","protobufError","Report","verify","encode","finish","debugPrintReports","decodedReport","decode","warn","JSON","stringify","toJSON","compressed","resolve","reject","messageBuffer","Buffer","from","buffer","byteOffset","byteLength","gzip","gzipResult","fetcher","fetch","response","curResponse","endpointUrl","method","headers","accept","body","agent","requestAgent","status","text","retries","maxAttempts","minTimeout","minimumRetryDelayMs","factor","get","match","parsedBody","parse","e","tracesIgnored","debug","requestLogger","metrics","request","http","variables","treeBuilder","TraceTreeBuilder","rewriteError","startTiming","startHrTime","graphqlValidationFailure","graphqlUnknownOperationName","includeOperationInUsageReporting","trace","Trace","HTTP","Method","UNKNOWN","host","path","sendHeaders","makeHTTPRequestHeaders","maybeCallIncludeRequestHook","includeRequest","didResolveSource","persistedQueryHit","persistedQueryRegister","details","makeTraceDetails","sendVariableValues","source","clientInfo","generateClientInfo","defaultGenerateClientInfo","clientName","clientVersion","validationDidStart","validationErrors","didResolveOperation","operation","captureTraces","rawWeight","fieldExecutionWeight","executionDidStart","willResolveField","willSendResponse","errors","didEncounterErrors","resolvedOperation","stopTiming","fullQueryCacheHit","responseCacheHit","forbiddenOperation","registeredOperation","policyIfCacheable","overallCachePolicy","cachePolicy","CachePolicy","scope","CacheScope","Private","Scope","PRIVATE","Public","PUBLIC","maxAgeNs","maxAge","queryPlanTrace","queryPlan","addTrace","res","setImmediate","statsReportKey","referencedFieldsByType","document","isExecutable","sendUnexecutableOperationDocuments","unexecutedOperationBody","unexecutedOperationName","operationName","operationDerivedData","getOperationDerivedData","signature","asTrace","sizeEstimator","bytes","maxUncompressedReportSize","cacheKey","operationDerivedDataCacheKey","queryHash","forSchema","cache","createOperationDerivedDataCache","cachedOperationDerivedData","generatedSignature","calculateSignature","usageReportingSignature","generatedOperationDerivedData","calculateReferencedFieldsByType","resolvedOperationName","set","serverWillStop","clearInterval","exports","none","value","lowerCaseKey","toLowerCase","exceptNames","some","exceptHeader","onlyNames","requestHeaders","Values","clientNameHeaderKey","clientVersionHeaderKey","_f","_e","_h","_g","_j","extensions","ApolloServerPluginUsageReportingDisabled"],"sourceRoot":"","sources":["../../../src/plugin/usageReporting/plugin.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}