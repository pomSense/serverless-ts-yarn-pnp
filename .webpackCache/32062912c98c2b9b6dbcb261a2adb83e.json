{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.removeInactiveProvidesAndRequires = exports.addSubgraphToError = exports.addSubgraphToASTNode = exports.Subgraph = exports.FEDERATION_OPERATION_FIELDS = exports.entitiesFieldName = exports.serviceFieldName = exports.FEDERATION_OPERATION_TYPES = exports.entityTypeSpec = exports.serviceTypeSpec = exports.anyTypeSpec = exports.Subgraphs = exports.subgraphsFromServiceList = exports.collectTargetFields = exports.parseFieldSetArgument = exports.newEmptyFederation2Schema = exports.buildSubgraph = exports.isInterfaceObjectType = exports.isEntityType = exports.isFederationField = exports.isFederationSubgraphSchema = exports.federationMetadata = exports.printSubgraphNames = exports.asFed2SubgraphDocument = exports.FEDERATION2_LINK_WITH_AUTO_EXPANDED_IMPORTS = exports.FEDERATION2_LINK_WITH_FULL_IMPORTS = exports.setSchemaAsFed2Subgraph = exports.FederationBlueprint = exports.hasAppliedDirective = exports.isFederationDirectiveDefinedInSchema = exports.FederationMetadata = exports.collectUsedFields = exports.FEDERATION_UNNAMED_SUBGRAPH_NAME = exports.FEDERATION_RESERVED_SUBGRAPH_NAME = void 0;\nconst definitions_1 = require(\"./definitions\");\nconst utils_1 = require(\"./utils\");\nconst specifiedRules_1 = require(\"graphql/validation/specifiedRules\");\nconst graphql_1 = require(\"graphql\");\nconst KnownTypeNamesInFederationRule_1 = require(\"./validation/KnownTypeNamesInFederationRule\");\nconst buildSchema_1 = require(\"./buildSchema\");\nconst operations_1 = require(\"./operations\");\nconst tagSpec_1 = require(\"./tagSpec\");\nconst error_1 = require(\"./error\");\nconst precompute_1 = require(\"./precompute\");\nconst coreSpec_1 = require(\"./coreSpec\");\nconst federationSpec_1 = require(\"./federationSpec\");\nconst print_1 = require(\"./print\");\nconst directiveAndTypeSpecification_1 = require(\"./directiveAndTypeSpecification\");\nconst suggestions_1 = require(\"./suggestions\");\nconst knownCoreFeatures_1 = require(\"./knownCoreFeatures\");\nconst joinSpec_1 = require(\"./joinSpec\");\nconst linkSpec = coreSpec_1.LINK_VERSIONS.latest();\nconst tagSpec = tagSpec_1.TAG_VERSIONS.latest();\nconst federationSpec = federationSpec_1.FEDERATION_VERSIONS.latest();\nconst autoExpandedFederationSpec = federationSpec_1.FEDERATION_VERSIONS.find(new coreSpec_1.FeatureVersion(2, 4));\nexports.FEDERATION_RESERVED_SUBGRAPH_NAME = '_';\nexports.FEDERATION_UNNAMED_SUBGRAPH_NAME = '<unnamed>';\nconst FEDERATION_OMITTED_VALIDATION_RULES = [graphql_1.PossibleTypeExtensionsRule, graphql_1.KnownTypeNamesRule];\nconst FEDERATION_SPECIFIC_VALIDATION_RULES = [KnownTypeNamesInFederationRule_1.KnownTypeNamesInFederationRule];\nconst FEDERATION_VALIDATION_RULES = specifiedRules_1.specifiedSDLRules.filter(rule => !FEDERATION_OMITTED_VALIDATION_RULES.includes(rule)).concat(FEDERATION_SPECIFIC_VALIDATION_RULES);\nconst ALL_DEFAULT_FEDERATION_DIRECTIVE_NAMES = Object.values(federationSpec_1.FederationDirectiveName);\nconst FAKE_FED1_CORE_FEATURE_TO_RENAME_TYPES = new definitions_1.CoreFeature(new coreSpec_1.FeatureUrl('<fed1>', 'fed1', new coreSpec_1.FeatureVersion(0, 1)), 'fed1', new definitions_1.Directive('fed1'), federationSpec_1.FEDERATION1_TYPES.map(spec => ({\n  name: spec.name,\n  as: '_' + spec.name\n})));\nfunction validateFieldSetSelections({\n  directiveName,\n  selectionSet,\n  hasExternalInParents,\n  metadata,\n  onError,\n  allowOnNonExternalLeafFields,\n  allowFieldsWithArguments\n}) {\n  for (const selection of selectionSet.selections()) {\n    const appliedDirectives = selection.element.appliedDirectives;\n    if (appliedDirectives.length > 0) {\n      onError(error_1.ERROR_CATEGORIES.DIRECTIVE_IN_FIELDS_ARG.get(directiveName).err(`cannot have directive applications in the @${directiveName}(fields:) argument but found ${appliedDirectives.join(', ')}.`));\n    }\n    if (selection.kind === 'FieldSelection') {\n      const field = selection.element.definition;\n      const isExternal = metadata.isFieldExternal(field);\n      if (!allowFieldsWithArguments && field.hasArguments()) {\n        onError(error_1.ERROR_CATEGORIES.FIELDS_HAS_ARGS.get(directiveName).err(`field ${field.coordinate} cannot be included because it has arguments (fields with argument are not allowed in @${directiveName})`, {\n          nodes: field.sourceAST\n        }));\n      }\n      const mustBeExternal = !selection.selectionSet && !allowOnNonExternalLeafFields && !hasExternalInParents;\n      if (!isExternal && mustBeExternal) {\n        const errorCode = error_1.ERROR_CATEGORIES.DIRECTIVE_FIELDS_MISSING_EXTERNAL.get(directiveName);\n        if (metadata.isFieldFakeExternal(field)) {\n          onError(errorCode.err(`field \"${field.coordinate}\" should not be part of a @${directiveName} since it is already \"effectively\" provided by this subgraph ` + `(while it is marked @${federationSpec_1.FederationDirectiveName.EXTERNAL}, it is a @${federationSpec_1.FederationDirectiveName.KEY} field of an extension type, which are not internally considered external for historical/backward compatibility reasons)`, {\n            nodes: field.sourceAST\n          }));\n        } else {\n          onError(errorCode.err(`field \"${field.coordinate}\" should not be part of a @${directiveName} since it is already provided by this subgraph (it is not marked @${federationSpec_1.FederationDirectiveName.EXTERNAL})`, {\n            nodes: field.sourceAST\n          }));\n        }\n      }\n      if (selection.selectionSet) {\n        let newHasExternalInParents = hasExternalInParents || isExternal;\n        const parentType = field.parent;\n        if (!newHasExternalInParents && (0, definitions_1.isInterfaceType)(parentType)) {\n          for (const implem of parentType.possibleRuntimeTypes()) {\n            const fieldInImplem = implem.field(field.name);\n            if (fieldInImplem && metadata.isFieldExternal(fieldInImplem)) {\n              newHasExternalInParents = true;\n              break;\n            }\n          }\n        }\n        validateFieldSetSelections({\n          directiveName,\n          selectionSet: selection.selectionSet,\n          hasExternalInParents: newHasExternalInParents,\n          metadata,\n          onError,\n          allowOnNonExternalLeafFields,\n          allowFieldsWithArguments\n        });\n      }\n    } else {\n      validateFieldSetSelections({\n        directiveName,\n        selectionSet: selection.selectionSet,\n        hasExternalInParents,\n        metadata,\n        onError,\n        allowOnNonExternalLeafFields,\n        allowFieldsWithArguments\n      });\n    }\n  }\n}\nfunction validateFieldSet({\n  type,\n  directive,\n  metadata,\n  errorCollector,\n  allowOnNonExternalLeafFields,\n  allowFieldsWithArguments,\n  onFields\n}) {\n  try {\n    const fieldAccessor = onFields ? (type, fieldName) => {\n      const field = type.field(fieldName);\n      if (field) {\n        onFields(field);\n      }\n      return field;\n    } : undefined;\n    const selectionSet = parseFieldSetArgument({\n      parentType: type,\n      directive,\n      fieldAccessor\n    });\n    validateFieldSetSelections({\n      directiveName: directive.name,\n      selectionSet,\n      hasExternalInParents: false,\n      metadata,\n      onError: error => errorCollector.push(handleFieldSetValidationError(directive, error)),\n      allowOnNonExternalLeafFields,\n      allowFieldsWithArguments\n    });\n  } catch (e) {\n    if (e instanceof graphql_1.GraphQLError) {\n      errorCollector.push(e);\n    } else {\n      throw e;\n    }\n  }\n}\nfunction handleFieldSetValidationError(directive, originalError, messageUpdater) {\n  const nodes = (0, definitions_1.sourceASTs)(directive);\n  if (originalError.nodes) {\n    nodes.push(...originalError.nodes);\n  }\n  let codeDef = (0, error_1.errorCodeDef)(originalError);\n  if (!codeDef || codeDef === error_1.ERRORS.INVALID_GRAPHQL) {\n    codeDef = error_1.ERROR_CATEGORIES.DIRECTIVE_INVALID_FIELDS.get(directive.name);\n  }\n  let msg = originalError.message.trim();\n  if (messageUpdater) {\n    msg = messageUpdater(msg);\n  }\n  return codeDef.err(`${fieldSetErrorDescriptor(directive)}: ${msg}`, {\n    nodes,\n    originalError\n  });\n}\nfunction fieldSetErrorDescriptor(directive) {\n  return `On ${fieldSetTargetDescription(directive)}, for ${directiveStrUsingASTIfPossible(directive)}`;\n}\nfunction directiveStrUsingASTIfPossible(directive) {\n  return directive.sourceAST ? (0, graphql_1.print)(directive.sourceAST) : directive.toString();\n}\nfunction fieldSetTargetDescription(directive) {\n  var _a;\n  const targetKind = directive.parent instanceof definitions_1.FieldDefinition ? \"field\" : \"type\";\n  return `${targetKind} \"${(_a = directive.parent) === null || _a === void 0 ? void 0 : _a.coordinate}\"`;\n}\nfunction validateAllFieldSet({\n  definition,\n  targetTypeExtractor,\n  errorCollector,\n  metadata,\n  isOnParentType = false,\n  allowOnNonExternalLeafFields = false,\n  allowFieldsWithArguments = false,\n  allowOnInterface = false,\n  onFields\n}) {\n  for (const application of definition.applications()) {\n    const elt = application.parent;\n    const type = targetTypeExtractor(elt);\n    const parentType = isOnParentType ? type : elt.parent;\n    if ((0, definitions_1.isInterfaceType)(parentType) && !allowOnInterface) {\n      const code = error_1.ERROR_CATEGORIES.DIRECTIVE_UNSUPPORTED_ON_INTERFACE.get(definition.name);\n      errorCollector.push(code.err(isOnParentType ? `Cannot use ${definition.coordinate} on interface \"${parentType.coordinate}\": ${definition.coordinate} is not yet supported on interfaces` : `Cannot use ${definition.coordinate} on ${fieldSetTargetDescription(application)} of parent type \"${parentType}\": ${definition.coordinate} is not yet supported within interfaces`, {\n        nodes: (0, definitions_1.sourceASTs)(application).concat(isOnParentType ? [] : (0, definitions_1.sourceASTs)(type))\n      }));\n    }\n    validateFieldSet({\n      type,\n      directive: application,\n      metadata,\n      errorCollector,\n      allowOnNonExternalLeafFields,\n      allowFieldsWithArguments,\n      onFields\n    });\n  }\n}\nfunction collectUsedFields(metadata) {\n  const usedFields = new Set();\n  collectUsedFieldsForDirective(metadata.keyDirective(), type => type, usedFields);\n  collectUsedFieldsForDirective(metadata.requiresDirective(), field => field.parent, usedFields);\n  collectUsedFieldsForDirective(metadata.providesDirective(), field => {\n    const type = (0, definitions_1.baseType)(field.type);\n    return (0, definitions_1.isCompositeType)(type) ? type : undefined;\n  }, usedFields);\n  for (const itfType of metadata.schema.interfaceTypes()) {\n    const runtimeTypes = itfType.possibleRuntimeTypes();\n    for (const field of itfType.fields()) {\n      for (const runtimeType of runtimeTypes) {\n        const implemField = runtimeType.field(field.name);\n        if (implemField) {\n          usedFields.add(implemField);\n        }\n      }\n    }\n  }\n  return usedFields;\n}\nexports.collectUsedFields = collectUsedFields;\nfunction collectUsedFieldsForDirective(definition, targetTypeExtractor, usedFieldDefs) {\n  for (const application of definition.applications()) {\n    const type = targetTypeExtractor(application.parent);\n    if (!type) {\n      continue;\n    }\n    collectTargetFields({\n      parentType: type,\n      directive: application,\n      includeInterfaceFieldsImplementations: true,\n      validate: false\n    }).forEach(field => usedFieldDefs.add(field));\n  }\n}\nfunction validateAllExternalFieldsUsed(metadata, errorCollector) {\n  for (const type of metadata.schema.types()) {\n    if (!(0, definitions_1.isObjectType)(type) && !(0, definitions_1.isInterfaceType)(type)) {\n      continue;\n    }\n    for (const field of type.fields()) {\n      if (!metadata.isFieldExternal(field) || metadata.isFieldUsed(field)) {\n        continue;\n      }\n      errorCollector.push(error_1.ERRORS.EXTERNAL_UNUSED.err(`Field \"${field.coordinate}\" is marked @external but is not used in any federation directive (@key, @provides, @requires) or to satisfy an interface;` + ' the field declaration has no use and should be removed (or the field should not be @external).', {\n        nodes: field.sourceAST\n      }));\n    }\n  }\n}\nfunction validateNoExternalOnInterfaceFields(metadata, errorCollector) {\n  for (const itf of metadata.schema.interfaceTypes()) {\n    for (const field of itf.fields()) {\n      if (metadata.isFieldExternal(field)) {\n        errorCollector.push(error_1.ERRORS.EXTERNAL_ON_INTERFACE.err(`Interface type field \"${field.coordinate}\" is marked @external but @external is not allowed on interface fields (it is nonsensical).`, {\n          nodes: field.sourceAST\n        }));\n      }\n    }\n  }\n}\nfunction validateKeyOnInterfacesAreAlsoOnAllImplementations(metadata, errorCollector) {\n  for (const itfType of metadata.schema.interfaceTypes()) {\n    const implementations = itfType.possibleRuntimeTypes();\n    for (const keyApplication of itfType.appliedDirectivesOf(metadata.keyDirective())) {\n      const fields = parseFieldSetArgument({\n        parentType: itfType,\n        directive: keyApplication,\n        validate: false\n      });\n      const isResolvable = !(keyApplication.arguments().resolvable === false);\n      const implementationsWithKeyButNotResolvable = new Array();\n      const implementationsMissingKey = new Array();\n      for (const type of implementations) {\n        const matchingApp = type.appliedDirectivesOf(metadata.keyDirective()).find(app => {\n          const appFields = parseFieldSetArgument({\n            parentType: type,\n            directive: app,\n            validate: false\n          });\n          return fields.equals(appFields);\n        });\n        if (matchingApp) {\n          if (isResolvable && matchingApp.arguments().resolvable === false) {\n            implementationsWithKeyButNotResolvable.push(type);\n          }\n        } else {\n          implementationsMissingKey.push(type);\n        }\n      }\n      if (implementationsMissingKey.length > 0) {\n        const typesString = (0, utils_1.printHumanReadableList)(implementationsMissingKey.map(i => `\"${i.coordinate}\"`), {\n          prefix: 'type',\n          prefixPlural: 'types'\n        });\n        errorCollector.push(error_1.ERRORS.INTERFACE_KEY_NOT_ON_IMPLEMENTATION.err(`Key ${keyApplication} on interface type \"${itfType.coordinate}\" is missing on implementation ${typesString}.`, {\n          nodes: (0, definitions_1.sourceASTs)(...implementationsMissingKey)\n        }));\n      } else if (implementationsWithKeyButNotResolvable.length > 0) {\n        const typesString = (0, utils_1.printHumanReadableList)(implementationsWithKeyButNotResolvable.map(i => `\"${i.coordinate}\"`), {\n          prefix: 'type',\n          prefixPlural: 'types'\n        });\n        errorCollector.push(error_1.ERRORS.INTERFACE_KEY_NOT_ON_IMPLEMENTATION.err(`Key ${keyApplication} on interface type \"${itfType.coordinate}\" should be resolvable on all implementation types, but is declared with argument \"@key(resolvable:)\" set to false in ${typesString}.`, {\n          nodes: (0, definitions_1.sourceASTs)(...implementationsWithKeyButNotResolvable)\n        }));\n      }\n    }\n  }\n}\nfunction validateInterfaceObjectsAreOnEntities(metadata, errorCollector) {\n  for (const application of metadata.interfaceObjectDirective().applications()) {\n    if (!isEntityType(application.parent)) {\n      errorCollector.push(error_1.ERRORS.INTERFACE_OBJECT_USAGE_ERROR.err(`The @interfaceObject directive can only be applied to entity types but type \"${application.parent.coordinate}\" has no @key in this subgraph.`, {\n        nodes: application.parent.sourceAST\n      }));\n    }\n  }\n}\nfunction validateShareableNotRepeatedOnSameDeclaration(element, metadata, errorCollector) {\n  const shareableApplications = element.appliedDirectivesOf(metadata.shareableDirective());\n  if (shareableApplications.length <= 1) {\n    return;\n  }\n  const byExtensions = shareableApplications.reduce((acc, v) => {\n    const ext = v.ofExtension();\n    if (ext) {\n      acc.with.add(ext, v);\n    } else {\n      acc.without.push(v);\n    }\n    return acc;\n  }, {\n    without: [],\n    with: new utils_1.MultiMap()\n  });\n  const groups = [byExtensions.without].concat((0, utils_1.mapValues)(byExtensions.with));\n  for (const group of groups) {\n    if (group.length > 1) {\n      const eltStr = element.kind === 'ObjectType' ? `the same type declaration of \"${element.coordinate}\"` : `field \"${element.coordinate}\"`;\n      errorCollector.push(error_1.ERRORS.INVALID_SHAREABLE_USAGE.err(`Invalid duplicate application of @shareable on ${eltStr}: ` + '@shareable is only repeatable on types so it can be used simultaneously on a type definition and its extensions, but it should not be duplicated on the same definition/extension declaration', {\n        nodes: (0, definitions_1.sourceASTs)(...group)\n      }));\n    }\n  }\n}\nclass FederationMetadata {\n  constructor(schema) {\n    this.schema = schema;\n  }\n  onInvalidate() {\n    this._externalTester = undefined;\n    this._sharingPredicate = undefined;\n    this._isFed2Schema = undefined;\n    this._fieldUsedPredicate = undefined;\n  }\n  isFed2Schema() {\n    if (!this._isFed2Schema) {\n      const feature = this.federationFeature();\n      this._isFed2Schema = !!feature && feature.url.version.satisfies(new coreSpec_1.FeatureVersion(2, 0));\n    }\n    return this._isFed2Schema;\n  }\n  federationFeature() {\n    var _a;\n    return (_a = this.schema.coreFeatures) === null || _a === void 0 ? void 0 : _a.getByIdentity(federationSpec.identity);\n  }\n  externalTester() {\n    if (!this._externalTester) {\n      this._externalTester = new ExternalTester(this.schema, this.isFed2Schema());\n    }\n    return this._externalTester;\n  }\n  sharingPredicate() {\n    if (!this._sharingPredicate) {\n      this._sharingPredicate = (0, precompute_1.computeShareables)(this.schema);\n    }\n    return this._sharingPredicate;\n  }\n  fieldUsedPredicate() {\n    if (!this._fieldUsedPredicate) {\n      const usedFields = collectUsedFields(this);\n      this._fieldUsedPredicate = field => !!usedFields.has(field);\n    }\n    return this._fieldUsedPredicate;\n  }\n  isFieldUsed(field) {\n    return this.fieldUsedPredicate()(field);\n  }\n  isFieldExternal(field) {\n    return this.externalTester().isExternal(field);\n  }\n  isFieldPartiallyExternal(field) {\n    return this.externalTester().isPartiallyExternal(field);\n  }\n  isFieldFullyExternal(field) {\n    return this.externalTester().isFullyExternal(field);\n  }\n  isFieldFakeExternal(field) {\n    return this.externalTester().isFakeExternal(field);\n  }\n  selectionSelectsAnyExternalField(selectionSet) {\n    return this.externalTester().selectsAnyExternalField(selectionSet);\n  }\n  isFieldShareable(field) {\n    return this.sharingPredicate()(field);\n  }\n  isInterfaceObjectType(type) {\n    return (0, definitions_1.isObjectType)(type) && hasAppliedDirective(type, this.interfaceObjectDirective());\n  }\n  federationDirectiveNameInSchema(name) {\n    if (this.isFed2Schema()) {\n      const coreFeatures = this.schema.coreFeatures;\n      (0, utils_1.assert)(coreFeatures, 'Schema should be a core schema');\n      const federationFeature = coreFeatures.getByIdentity(federationSpec.identity);\n      (0, utils_1.assert)(federationFeature, 'Schema should have the federation feature');\n      return federationFeature.directiveNameInSchema(name);\n    } else {\n      return name;\n    }\n  }\n  federationTypeNameInSchema(name) {\n    if (name.charAt(0) === '_') {\n      return name;\n    }\n    if (this.isFed2Schema()) {\n      const coreFeatures = this.schema.coreFeatures;\n      (0, utils_1.assert)(coreFeatures, 'Schema should be a core schema');\n      const federationFeature = coreFeatures.getByIdentity(federationSpec.identity);\n      (0, utils_1.assert)(federationFeature, 'Schema should have the federation feature');\n      return federationFeature.typeNameInSchema(name);\n    } else {\n      return '_' + name;\n    }\n  }\n  getLegacyFederationDirective(name) {\n    const directive = this.getFederationDirective(name);\n    (0, utils_1.assert)(directive, `The provided schema does not have federation directive @${name}`);\n    return directive;\n  }\n  getFederationDirective(name) {\n    return this.schema.directive(this.federationDirectiveNameInSchema(name));\n  }\n  getPost20FederationDirective(name) {\n    var _a;\n    return (_a = this.getFederationDirective(name)) !== null && _a !== void 0 ? _a : {\n      name,\n      applications: () => new Array()\n    };\n  }\n  keyDirective() {\n    return this.getLegacyFederationDirective(federationSpec_1.FederationDirectiveName.KEY);\n  }\n  overrideDirective() {\n    return this.getLegacyFederationDirective(federationSpec_1.FederationDirectiveName.OVERRIDE);\n  }\n  extendsDirective() {\n    return this.getLegacyFederationDirective(federationSpec_1.FederationDirectiveName.EXTENDS);\n  }\n  externalDirective() {\n    return this.getLegacyFederationDirective(federationSpec_1.FederationDirectiveName.EXTERNAL);\n  }\n  requiresDirective() {\n    return this.getLegacyFederationDirective(federationSpec_1.FederationDirectiveName.REQUIRES);\n  }\n  providesDirective() {\n    return this.getLegacyFederationDirective(federationSpec_1.FederationDirectiveName.PROVIDES);\n  }\n  shareableDirective() {\n    return this.getLegacyFederationDirective(federationSpec_1.FederationDirectiveName.SHAREABLE);\n  }\n  tagDirective() {\n    return this.getLegacyFederationDirective(federationSpec_1.FederationDirectiveName.TAG);\n  }\n  composeDirective() {\n    return this.getPost20FederationDirective(federationSpec_1.FederationDirectiveName.COMPOSE_DIRECTIVE);\n  }\n  inaccessibleDirective() {\n    return this.getLegacyFederationDirective(federationSpec_1.FederationDirectiveName.INACCESSIBLE);\n  }\n  interfaceObjectDirective() {\n    return this.getPost20FederationDirective(federationSpec_1.FederationDirectiveName.INTERFACE_OBJECT);\n  }\n  authenticatedDirective() {\n    return this.getPost20FederationDirective(federationSpec_1.FederationDirectiveName.AUTHENTICATED);\n  }\n  requiresScopesDirective() {\n    return this.getPost20FederationDirective(federationSpec_1.FederationDirectiveName.REQUIRES_SCOPES);\n  }\n  allFederationDirectives() {\n    const baseDirectives = [this.keyDirective(), this.externalDirective(), this.requiresDirective(), this.providesDirective(), this.tagDirective(), this.extendsDirective()];\n    if (!this.isFed2Schema()) {\n      return baseDirectives;\n    }\n    baseDirectives.push(this.shareableDirective());\n    baseDirectives.push(this.inaccessibleDirective());\n    baseDirectives.push(this.overrideDirective());\n    const composeDirective = this.composeDirective();\n    if (isFederationDirectiveDefinedInSchema(composeDirective)) {\n      baseDirectives.push(composeDirective);\n    }\n    const interfaceObjectDirective = this.interfaceObjectDirective();\n    if (isFederationDirectiveDefinedInSchema(interfaceObjectDirective)) {\n      baseDirectives.push(interfaceObjectDirective);\n    }\n    const authenticatedDirective = this.authenticatedDirective();\n    if (isFederationDirectiveDefinedInSchema(authenticatedDirective)) {\n      baseDirectives.push(authenticatedDirective);\n    }\n    const requiresScopesDirective = this.requiresScopesDirective();\n    if (isFederationDirectiveDefinedInSchema(requiresScopesDirective)) {\n      baseDirectives.push(requiresScopesDirective);\n    }\n    return baseDirectives;\n  }\n  entityType() {\n    return this.schema.type(this.federationTypeNameInSchema(exports.entityTypeSpec.name));\n  }\n  anyType() {\n    return this.schema.type(this.federationTypeNameInSchema(exports.anyTypeSpec.name));\n  }\n  serviceType() {\n    return this.schema.type(this.federationTypeNameInSchema(exports.serviceTypeSpec.name));\n  }\n  fieldSetType() {\n    return this.schema.type(this.federationTypeNameInSchema(federationSpec_1.FederationTypeName.FIELD_SET));\n  }\n  allFederationTypes() {\n    const fedTypes = [this.anyType(), this.serviceType()];\n    const fedFeature = this.federationFeature();\n    if (fedFeature) {\n      const featureDef = federationSpec_1.FEDERATION_VERSIONS.find(fedFeature.url.version);\n      (0, utils_1.assert)(featureDef, () => `Federation spec should be known, but got ${fedFeature.url}`);\n      for (const typeSpec of featureDef.typeSpecs()) {\n        const type = this.schema.type(fedFeature.typeNameInSchema(typeSpec.name));\n        if (type) {\n          fedTypes.push(type);\n        }\n      }\n    } else {\n      fedTypes.push(this.fieldSetType());\n    }\n    const entityType = this.entityType();\n    if (entityType) {\n      fedTypes.push(entityType);\n    }\n    return fedTypes;\n  }\n}\nexports.FederationMetadata = FederationMetadata;\nfunction isFederationDirectiveDefinedInSchema(definition) {\n  return definition instanceof definitions_1.DirectiveDefinition;\n}\nexports.isFederationDirectiveDefinedInSchema = isFederationDirectiveDefinedInSchema;\nfunction hasAppliedDirective(type, definition) {\n  return isFederationDirectiveDefinedInSchema(definition) && type.hasAppliedDirective(definition);\n}\nexports.hasAppliedDirective = hasAppliedDirective;\nclass FederationBlueprint extends definitions_1.SchemaBlueprint {\n  constructor(withRootTypeRenaming) {\n    super();\n    this.withRootTypeRenaming = withRootTypeRenaming;\n  }\n  onAddedCoreFeature(schema, feature) {\n    super.onAddedCoreFeature(schema, feature);\n    if (feature.url.identity === federationSpec_1.federationIdentity) {\n      const spec = federationSpec_1.FEDERATION_VERSIONS.find(feature.url.version);\n      if (spec) {\n        spec.addElementsToSchema(schema);\n      }\n    }\n  }\n  onMissingDirectiveDefinition(schema, directive) {\n    if (directive.name === coreSpec_1.linkDirectiveDefaultName) {\n      const args = directive.arguments();\n      const url = args && args['url'];\n      let as = undefined;\n      let imports = [];\n      if (url && url.startsWith(linkSpec.identity)) {\n        as = args['as'];\n        imports = (0, coreSpec_1.extractCoreFeatureImports)(linkSpec.url, directive);\n      }\n      const errors = linkSpec.addDefinitionsToSchema(schema, as, imports);\n      return errors.length > 0 ? errors : schema.directive(directive.name);\n    }\n    return super.onMissingDirectiveDefinition(schema, directive);\n  }\n  ignoreParsedField(type, fieldName) {\n    if (!exports.FEDERATION_OPERATION_FIELDS.includes(fieldName)) {\n      return false;\n    }\n    const metadata = federationMetadata(type.schema());\n    return !!metadata && !metadata.isFed2Schema();\n  }\n  onConstructed(schema) {\n    const existing = federationMetadata(schema);\n    if (!existing) {\n      schema['_federationMetadata'] = new FederationMetadata(schema);\n    }\n  }\n  onDirectiveDefinitionAndSchemaParsed(schema) {\n    const errors = completeSubgraphSchema(schema);\n    schema.schemaDefinition.processUnappliedDirectives();\n    return errors;\n  }\n  onInvalidation(schema) {\n    super.onInvalidation(schema);\n    const metadata = federationMetadata(schema);\n    (0, utils_1.assert)(metadata, 'Federation schema should have had its metadata set on construction');\n    FederationMetadata.prototype['onInvalidate'].call(metadata);\n  }\n  onValidation(schema) {\n    var _a;\n    const errorCollector = super.onValidation(schema);\n    if (this.withRootTypeRenaming) {\n      for (const k of definitions_1.allSchemaRootKinds) {\n        const type = (_a = schema.schemaDefinition.root(k)) === null || _a === void 0 ? void 0 : _a.type;\n        const defaultName = (0, definitions_1.defaultRootName)(k);\n        if (type && type.name !== defaultName) {\n          const existing = schema.type(defaultName);\n          if (existing) {\n            errorCollector.push(error_1.ERROR_CATEGORIES.ROOT_TYPE_USED.get(k).err(`The schema has a type named \"${defaultName}\" but it is not set as the ${k} root type (\"${type.name}\" is instead): ` + 'this is not supported by federation. ' + 'If a root type does not use its default name, there should be no other type with that default name.', {\n              nodes: (0, definitions_1.sourceASTs)(type, existing)\n            }));\n          }\n          type.rename(defaultName);\n        }\n      }\n    }\n    const metadata = federationMetadata(schema);\n    (0, utils_1.assert)(metadata, 'Federation schema should have had its metadata set on construction');\n    if (!metadata.isFed2Schema()) {\n      return errorCollector;\n    }\n    const keyDirective = metadata.keyDirective();\n    validateAllFieldSet({\n      definition: keyDirective,\n      targetTypeExtractor: type => type,\n      errorCollector,\n      metadata,\n      isOnParentType: true,\n      allowOnNonExternalLeafFields: true,\n      allowOnInterface: metadata.federationFeature().url.version.compareTo(new coreSpec_1.FeatureVersion(2, 3)) >= 0,\n      onFields: field => {\n        const type = (0, definitions_1.baseType)(field.type);\n        if ((0, definitions_1.isUnionType)(type) || (0, definitions_1.isInterfaceType)(type)) {\n          let kind = type.kind;\n          kind = kind.slice(0, kind.length - 'Type'.length);\n          throw error_1.ERRORS.KEY_FIELDS_SELECT_INVALID_TYPE.err(`field \"${field.coordinate}\" is a ${kind} type which is not allowed in @key`);\n        }\n      }\n    });\n    validateAllFieldSet({\n      definition: metadata.requiresDirective(),\n      targetTypeExtractor: field => field.parent,\n      errorCollector,\n      metadata,\n      allowFieldsWithArguments: true\n    });\n    validateAllFieldSet({\n      definition: metadata.providesDirective(),\n      targetTypeExtractor: field => {\n        if (metadata.isFieldExternal(field)) {\n          throw error_1.ERRORS.EXTERNAL_COLLISION_WITH_ANOTHER_DIRECTIVE.err(`Cannot have both @provides and @external on field \"${field.coordinate}\"`, {\n            nodes: field.sourceAST\n          });\n        }\n        const type = (0, definitions_1.baseType)(field.type);\n        if (!(0, definitions_1.isCompositeType)(type)) {\n          throw error_1.ERRORS.PROVIDES_ON_NON_OBJECT_FIELD.err(`Invalid @provides directive on field \"${field.coordinate}\": field has type \"${field.type}\" which is not a Composite Type`, {\n            nodes: field.sourceAST\n          });\n        }\n        return type;\n      },\n      errorCollector,\n      metadata\n    });\n    validateNoExternalOnInterfaceFields(metadata, errorCollector);\n    validateAllExternalFieldsUsed(metadata, errorCollector);\n    validateKeyOnInterfacesAreAlsoOnAllImplementations(metadata, errorCollector);\n    validateInterfaceObjectsAreOnEntities(metadata, errorCollector);\n    const tagDirective = metadata.tagDirective();\n    if (tagDirective) {\n      const error = tagSpec.checkCompatibleDirective(tagDirective);\n      if (error) {\n        errorCollector.push(error);\n      }\n    }\n    for (const objectType of schema.objectTypes()) {\n      validateShareableNotRepeatedOnSameDeclaration(objectType, metadata, errorCollector);\n      for (const field of objectType.fields()) {\n        validateShareableNotRepeatedOnSameDeclaration(field, metadata, errorCollector);\n      }\n    }\n    for (const shareableApplication of metadata.shareableDirective().applications()) {\n      const element = shareableApplication.parent;\n      if (element instanceof definitions_1.FieldDefinition && !(0, definitions_1.isObjectType)(element.parent)) {\n        errorCollector.push(error_1.ERRORS.INVALID_SHAREABLE_USAGE.err(`Invalid use of @shareable on field \"${element.coordinate}\": only object type fields can be marked with @shareable`, {\n          nodes: (0, definitions_1.sourceASTs)(shareableApplication, element.parent)\n        }));\n      }\n    }\n    return errorCollector;\n  }\n  validationRules() {\n    return FEDERATION_VALIDATION_RULES;\n  }\n  onUnknownDirectiveValidationError(schema, unknownDirectiveName, error) {\n    const metadata = federationMetadata(schema);\n    (0, utils_1.assert)(metadata, `This method should only have been called on a subgraph schema`);\n    if (ALL_DEFAULT_FEDERATION_DIRECTIVE_NAMES.includes(unknownDirectiveName)) {\n      if (metadata.isFed2Schema()) {\n        const federationFeature = metadata.federationFeature();\n        (0, utils_1.assert)(federationFeature, 'Fed2 subgraph _must_ link to the federation feature');\n        const directiveNameInSchema = federationFeature.directiveNameInSchema(unknownDirectiveName);\n        if (directiveNameInSchema.startsWith(federationFeature.nameInSchema + '__')) {\n          return (0, error_1.withModifiedErrorMessage)(error, `${error.message} If you meant the \"@${unknownDirectiveName}\" federation directive, you should use fully-qualified name \"@${directiveNameInSchema}\" or add \"@${unknownDirectiveName}\" to the \\`import\\` argument of the @link to the federation specification.`);\n        } else {\n          return (0, error_1.withModifiedErrorMessage)(error, `${error.message} If you meant the \"@${unknownDirectiveName}\" federation directive, you should use \"@${directiveNameInSchema}\" as it is imported under that name in the @link to the federation specification of this schema.`);\n        }\n      } else {\n        return (0, error_1.withModifiedErrorMessage)(error, `${error.message} If you meant the \"@${unknownDirectiveName}\" federation 2 directive, note that this schema is a federation 1 schema. To be a federation 2 schema, it needs to @link to the federation specifcation v2.`);\n      }\n    } else if (!metadata.isFed2Schema()) {\n      const suggestions = (0, suggestions_1.suggestionList)(unknownDirectiveName, ALL_DEFAULT_FEDERATION_DIRECTIVE_NAMES);\n      if (suggestions.length > 0) {\n        return (0, error_1.withModifiedErrorMessage)(error, `${error.message}${(0, suggestions_1.didYouMean)(suggestions.map(s => '@' + s))} If so, note that ${suggestions.length === 1 ? 'it is a federation 2 directive' : 'they are federation 2 directives'} but this schema is a federation 1 one. To be a federation 2 schema, it needs to @link to the federation specifcation v2.`);\n      }\n    }\n    return error;\n  }\n  applyDirectivesAfterParsing() {\n    return true;\n  }\n}\nexports.FederationBlueprint = FederationBlueprint;\nfunction findUnusedNamedForLinkDirective(schema) {\n  if (!schema.directive(linkSpec.url.name)) {\n    return undefined;\n  }\n  const baseName = linkSpec.url.name;\n  const n = 1;\n  for (;;) {\n    const candidate = baseName + n;\n    if (!schema.directive(candidate)) {\n      return candidate;\n    }\n  }\n}\nfunction setSchemaAsFed2Subgraph(schema) {\n  let core = schema.coreFeatures;\n  let spec;\n  if (core) {\n    spec = core.coreDefinition;\n    (0, utils_1.assert)(spec.url.version.satisfies(linkSpec.version), `Fed2 schema must use @link with version >= 1.0, but schema uses ${spec.url}`);\n  } else {\n    const alias = findUnusedNamedForLinkDirective(schema);\n    const errors = linkSpec.addToSchema(schema, alias);\n    if (errors.length > 0) {\n      throw (0, definitions_1.ErrGraphQLValidationFailed)(errors);\n    }\n    spec = linkSpec;\n    core = schema.coreFeatures;\n    (0, utils_1.assert)(core, 'Schema should now be a core schema');\n  }\n  (0, utils_1.assert)(!core.getByIdentity(federationSpec.identity), 'Schema already set as a federation subgraph');\n  schema.schemaDefinition.applyDirective(core.coreItself.nameInSchema, {\n    url: federationSpec.url.toString(),\n    import: autoExpandedFederationSpec.directiveSpecs().map(spec => `@${spec.name}`)\n  });\n  const errors = completeSubgraphSchema(schema);\n  if (errors.length > 0) {\n    throw (0, definitions_1.ErrGraphQLValidationFailed)(errors);\n  }\n}\nexports.setSchemaAsFed2Subgraph = setSchemaAsFed2Subgraph;\nexports.FEDERATION2_LINK_WITH_FULL_IMPORTS = '@link(url: \"https://specs.apollo.dev/federation/v2.5\", import: [\"@key\", \"@requires\", \"@provides\", \"@external\", \"@tag\", \"@extends\", \"@shareable\", \"@inaccessible\", \"@override\", \"@composeDirective\", \"@interfaceObject\", \"@authenticated\", \"@requiresScopes\"])';\nexports.FEDERATION2_LINK_WITH_AUTO_EXPANDED_IMPORTS = '@link(url: \"https://specs.apollo.dev/federation/v2.5\", import: [\"@key\", \"@requires\", \"@provides\", \"@external\", \"@tag\", \"@extends\", \"@shareable\", \"@inaccessible\", \"@override\", \"@composeDirective\", \"@interfaceObject\"])';\nfunction asFed2SubgraphDocument(document, options) {\n  var _a, _b;\n  const importedDirectives = (options === null || options === void 0 ? void 0 : options.includeAllImports) ? federationSpec.directiveSpecs() : autoExpandedFederationSpec.directiveSpecs();\n  const directiveToAdd = {\n    kind: graphql_1.Kind.DIRECTIVE,\n    name: {\n      kind: graphql_1.Kind.NAME,\n      value: coreSpec_1.linkDirectiveDefaultName\n    },\n    arguments: [{\n      kind: graphql_1.Kind.ARGUMENT,\n      name: {\n        kind: graphql_1.Kind.NAME,\n        value: 'url'\n      },\n      value: {\n        kind: graphql_1.Kind.STRING,\n        value: federationSpec.url.toString()\n      }\n    }, {\n      kind: graphql_1.Kind.ARGUMENT,\n      name: {\n        kind: graphql_1.Kind.NAME,\n        value: 'import'\n      },\n      value: {\n        kind: graphql_1.Kind.LIST,\n        values: importedDirectives.map(spec => ({\n          kind: graphql_1.Kind.STRING,\n          value: `@${spec.name}`\n        }))\n      }\n    }]\n  };\n  if ((_a = options === null || options === void 0 ? void 0 : options.addAsSchemaExtension) !== null && _a !== void 0 ? _a : true) {\n    return {\n      kind: graphql_1.Kind.DOCUMENT,\n      loc: document.loc,\n      definitions: document.definitions.concat({\n        kind: graphql_1.Kind.SCHEMA_EXTENSION,\n        directives: [directiveToAdd]\n      })\n    };\n  }\n  const existingSchemaDefinition = document.definitions.find(d => d.kind == graphql_1.Kind.SCHEMA_DEFINITION);\n  if (existingSchemaDefinition) {\n    return {\n      kind: graphql_1.Kind.DOCUMENT,\n      loc: document.loc,\n      definitions: document.definitions.filter(d => d !== existingSchemaDefinition).concat([{\n        ...existingSchemaDefinition,\n        directives: [directiveToAdd].concat((_b = existingSchemaDefinition.directives) !== null && _b !== void 0 ? _b : [])\n      }])\n    };\n  } else {\n    const hasMutation = document.definitions.some(d => d.kind === graphql_1.Kind.OBJECT_TYPE_DEFINITION && d.name.value === 'Mutation');\n    const makeOpType = (opType, name) => ({\n      kind: graphql_1.Kind.OPERATION_TYPE_DEFINITION,\n      operation: opType,\n      type: {\n        kind: graphql_1.Kind.NAMED_TYPE,\n        name: {\n          kind: graphql_1.Kind.NAME,\n          value: name\n        }\n      }\n    });\n    return {\n      kind: graphql_1.Kind.DOCUMENT,\n      loc: document.loc,\n      definitions: document.definitions.concat({\n        kind: graphql_1.Kind.SCHEMA_DEFINITION,\n        directives: [directiveToAdd],\n        operationTypes: [makeOpType(graphql_1.OperationTypeNode.QUERY, 'Query')].concat(hasMutation ? makeOpType(graphql_1.OperationTypeNode.MUTATION, 'Mutation') : [])\n      })\n    };\n  }\n}\nexports.asFed2SubgraphDocument = asFed2SubgraphDocument;\nfunction printSubgraphNames(names) {\n  return (0, utils_1.printHumanReadableList)(names.map(n => `\"${n}\"`), {\n    prefix: 'subgraph',\n    prefixPlural: 'subgraphs'\n  });\n}\nexports.printSubgraphNames = printSubgraphNames;\nfunction federationMetadata(schema) {\n  return schema['_federationMetadata'];\n}\nexports.federationMetadata = federationMetadata;\nfunction isFederationSubgraphSchema(schema) {\n  return !!federationMetadata(schema);\n}\nexports.isFederationSubgraphSchema = isFederationSubgraphSchema;\nfunction isFederationField(field) {\n  var _a;\n  if (field.parent === ((_a = field.schema().schemaDefinition.root(\"query\")) === null || _a === void 0 ? void 0 : _a.type)) {\n    return exports.FEDERATION_OPERATION_FIELDS.includes(field.name);\n  }\n  return false;\n}\nexports.isFederationField = isFederationField;\nfunction isEntityType(type) {\n  if (!(0, definitions_1.isObjectType)(type) && !(0, definitions_1.isInterfaceType)(type)) {\n    return false;\n  }\n  const metadata = federationMetadata(type.schema());\n  return !!metadata && type.hasAppliedDirective(metadata.keyDirective());\n}\nexports.isEntityType = isEntityType;\nfunction isInterfaceObjectType(type) {\n  if (!(0, definitions_1.isObjectType)(type)) {\n    return false;\n  }\n  const metadata = federationMetadata(type.schema());\n  return !!metadata && metadata.isInterfaceObjectType(type);\n}\nexports.isInterfaceObjectType = isInterfaceObjectType;\nfunction buildSubgraph(name, url, source, withRootTypeRenaming = true) {\n  const buildOptions = {\n    blueprint: new FederationBlueprint(withRootTypeRenaming),\n    validate: false\n  };\n  let subgraph;\n  try {\n    const schema = typeof source === 'string' ? (0, buildSchema_1.buildSchema)(new graphql_1.Source(source, name), buildOptions) : (0, buildSchema_1.buildSchemaFromAST)(source, buildOptions);\n    subgraph = new Subgraph(name, url, schema);\n  } catch (e) {\n    if (e instanceof graphql_1.GraphQLError && name !== exports.FEDERATION_UNNAMED_SUBGRAPH_NAME) {\n      throw addSubgraphToError(e, name, error_1.ERRORS.INVALID_GRAPHQL);\n    } else {\n      throw e;\n    }\n  }\n  return subgraph.validate();\n}\nexports.buildSubgraph = buildSubgraph;\nfunction newEmptyFederation2Schema(config) {\n  const schema = new definitions_1.Schema(new FederationBlueprint(true), config);\n  setSchemaAsFed2Subgraph(schema);\n  return schema;\n}\nexports.newEmptyFederation2Schema = newEmptyFederation2Schema;\nfunction completeSubgraphSchema(schema) {\n  const coreFeatures = schema.coreFeatures;\n  if (coreFeatures) {\n    const fedFeature = coreFeatures.getByIdentity(federationSpec_1.federationIdentity);\n    if (fedFeature) {\n      return completeFed2SubgraphSchema(schema);\n    } else {\n      return completeFed1SubgraphSchema(schema);\n    }\n  } else {\n    const fedLink = schema.schemaDefinition.appliedDirectivesOf(coreSpec_1.linkDirectiveDefaultName).find(isFedSpecLinkDirective);\n    if (fedLink) {\n      const errors = linkSpec.addToSchema(schema);\n      if (errors.length > 0) {\n        return errors;\n      }\n      return completeFed2SubgraphSchema(schema);\n    } else {\n      return completeFed1SubgraphSchema(schema);\n    }\n  }\n}\nfunction isFedSpecLinkDirective(directive) {\n  const args = directive.arguments();\n  return directive.name === coreSpec_1.linkDirectiveDefaultName && args['url'] && args['url'].startsWith(federationSpec_1.federationIdentity);\n}\nfunction completeFed1SubgraphSchema(schema) {\n  var _a, _b;\n  for (const name of [federationSpec_1.FederationDirectiveName.KEY, federationSpec_1.FederationDirectiveName.PROVIDES, federationSpec_1.FederationDirectiveName.REQUIRES]) {\n    const directive = schema.directive(name);\n    if (!directive) {\n      continue;\n    }\n    (0, utils_1.assert)(directive.applications().length === 0, `${directive} shouldn't have had validation at that places`);\n    const fieldType = (_b = (_a = directive.argument('fields')) === null || _a === void 0 ? void 0 : _a.type) === null || _b === void 0 ? void 0 : _b.toString();\n    const fieldTypeIsWrongInKnownWays = !!fieldType && directive.arguments().length === 1 && (fieldType === 'String' || fieldType === '_FieldSet' || fieldType === 'FieldSet');\n    if (directive.arguments().length === 0 || fieldTypeIsWrongInKnownWays) {\n      directive.remove();\n    }\n  }\n  const errors = federationSpec_1.FEDERATION1_TYPES.map(spec => spec.checkOrAdd(schema, FAKE_FED1_CORE_FEATURE_TO_RENAME_TYPES)).concat(federationSpec_1.FEDERATION1_DIRECTIVES.map(spec => spec.checkOrAdd(schema))).flat();\n  return errors.length === 0 ? expandKnownFeatures(schema) : errors;\n}\nfunction completeFed2SubgraphSchema(schema) {\n  const coreFeatures = schema.coreFeatures;\n  (0, utils_1.assert)(coreFeatures, 'This method should not have been called on a non-core schema');\n  const fedFeature = coreFeatures.getByIdentity(federationSpec_1.federationIdentity);\n  (0, utils_1.assert)(fedFeature, 'This method should not have been called on a schema with no @link for federation');\n  const spec = federationSpec_1.FEDERATION_VERSIONS.find(fedFeature.url.version);\n  if (!spec) {\n    return [error_1.ERRORS.UNKNOWN_FEDERATION_LINK_VERSION.err(`Invalid version ${fedFeature.url.version} for the federation feature in @link direction on schema`, {\n      nodes: fedFeature.directive.sourceAST\n    })];\n  }\n  const errors = spec.addElementsToSchema(schema);\n  return errors.length === 0 ? expandKnownFeatures(schema) : errors;\n}\nfunction expandKnownFeatures(schema) {\n  const coreFeatures = schema.coreFeatures;\n  if (!coreFeatures) {\n    return [];\n  }\n  let errors = [];\n  for (const feature of coreFeatures.allFeatures()) {\n    if (feature === coreFeatures.coreItself || feature.url.identity === federationSpec_1.federationIdentity || feature.url.identity === joinSpec_1.joinIdentity) {\n      continue;\n    }\n    const spec = (0, knownCoreFeatures_1.coreFeatureDefinitionIfKnown)(feature.url);\n    if (!spec) {\n      continue;\n    }\n    errors = errors.concat(spec.addElementsToSchema(schema));\n  }\n  return errors;\n}\nfunction parseFieldSetArgument({\n  parentType,\n  directive,\n  fieldAccessor,\n  validate,\n  decorateValidationErrors = true\n}) {\n  try {\n    const selectionSet = (0, operations_1.parseSelectionSet)({\n      parentType,\n      source: validateFieldSetValue(directive),\n      fieldAccessor,\n      validate\n    });\n    if (validate !== null && validate !== void 0 ? validate : true) {\n      selectionSet.forEachElement(elt => {\n        if (elt.kind === 'Field' && elt.alias) {\n          throw new graphql_1.GraphQLError(`Cannot use alias \"${elt.alias}\" in \"${elt}\": aliases are not currently supported in @${directive.name}`);\n        }\n      });\n    }\n    return selectionSet;\n  } catch (e) {\n    if (!(e instanceof graphql_1.GraphQLError) || !decorateValidationErrors) {\n      throw e;\n    }\n    throw handleFieldSetValidationError(directive, e, msg => {\n      if (msg.startsWith('Cannot query field')) {\n        if (msg.endsWith('.')) {\n          msg = msg.slice(0, msg.length - 1);\n        }\n        if (directive.name === federationSpec_1.FederationDirectiveName.KEY) {\n          msg = msg + ' (the field should either be added to this subgraph or, if it should not be resolved by this subgraph, you need to add it to this subgraph with @external).';\n        } else {\n          msg = msg + ' (if the field is defined in another subgraph, you need to add it to this subgraph with @external).';\n        }\n      }\n      return msg;\n    });\n  }\n}\nexports.parseFieldSetArgument = parseFieldSetArgument;\nfunction collectTargetFields({\n  parentType,\n  directive,\n  includeInterfaceFieldsImplementations,\n  validate = true\n}) {\n  const fields = [];\n  try {\n    parseFieldSetArgument({\n      parentType,\n      directive,\n      fieldAccessor: (t, f) => {\n        const field = t.field(f);\n        if (field) {\n          fields.push(field);\n          if (includeInterfaceFieldsImplementations && (0, definitions_1.isInterfaceType)(t)) {\n            for (const implType of t.possibleRuntimeTypes()) {\n              const implField = implType.field(f);\n              if (implField) {\n                fields.push(implField);\n              }\n            }\n          }\n        }\n        return field;\n      },\n      validate\n    });\n  } catch (e) {\n    const isGraphQLError = (0, error_1.errorCauses)(e) !== undefined;\n    if (!isGraphQLError || validate) {\n      throw e;\n    }\n  }\n  return fields;\n}\nexports.collectTargetFields = collectTargetFields;\nfunction validateFieldSetValue(directive) {\n  var _a;\n  const fields = directive.arguments().fields;\n  const nodes = directive.sourceAST;\n  if (typeof fields !== 'string') {\n    throw error_1.ERROR_CATEGORIES.DIRECTIVE_INVALID_FIELDS_TYPE.get(directive.name).err(`Invalid value for argument \"${directive.definition.argument('fields').name}\": must be a string.`, {\n      nodes\n    });\n  }\n  if (nodes && nodes.kind === 'Directive') {\n    for (const argNode of (_a = nodes.arguments) !== null && _a !== void 0 ? _a : []) {\n      if (argNode.name.value === 'fields') {\n        if (argNode.value.kind !== 'StringValue') {\n          throw error_1.ERROR_CATEGORIES.DIRECTIVE_INVALID_FIELDS_TYPE.get(directive.name).err(`Invalid value for argument \"${directive.definition.argument('fields').name}\": must be a string.`, {\n            nodes\n          });\n        }\n        break;\n      }\n    }\n  }\n  return fields;\n}\nfunction subgraphsFromServiceList(serviceList) {\n  var _a;\n  let errors = [];\n  const subgraphs = new Subgraphs();\n  for (const service of serviceList) {\n    try {\n      subgraphs.add(buildSubgraph(service.name, (_a = service.url) !== null && _a !== void 0 ? _a : '', service.typeDefs));\n    } catch (e) {\n      const causes = (0, error_1.errorCauses)(e);\n      if (causes) {\n        errors = errors.concat(causes);\n      } else {\n        throw e;\n      }\n    }\n  }\n  return errors.length === 0 ? subgraphs : errors;\n}\nexports.subgraphsFromServiceList = subgraphsFromServiceList;\nclass Subgraphs {\n  constructor() {\n    this.subgraphs = new utils_1.OrderedMap();\n  }\n  add(subgraph) {\n    if (this.subgraphs.has(subgraph.name)) {\n      throw new Error(`A subgraph named ${subgraph.name} already exists` + (subgraph.url ? ` (with url '${subgraph.url}')` : ''));\n    }\n    this.subgraphs.add(subgraph.name, subgraph);\n    return subgraph;\n  }\n  get(name) {\n    return this.subgraphs.get(name);\n  }\n  size() {\n    return this.subgraphs.size;\n  }\n  names() {\n    return this.subgraphs.keys();\n  }\n  values() {\n    return this.subgraphs.values();\n  }\n  *[Symbol.iterator]() {\n    for (const subgraph of this.subgraphs) {\n      yield subgraph;\n    }\n  }\n  validate() {\n    let errors = [];\n    for (const subgraph of this.values()) {\n      try {\n        subgraph.validate();\n      } catch (e) {\n        const causes = (0, error_1.errorCauses)(e);\n        if (!causes) {\n          throw e;\n        }\n        errors = errors.concat(causes);\n      }\n    }\n    return errors.length === 0 ? undefined : errors;\n  }\n  toString() {\n    return '[' + this.subgraphs.keys().join(', ') + ']';\n  }\n}\nexports.Subgraphs = Subgraphs;\nexports.anyTypeSpec = (0, directiveAndTypeSpecification_1.createScalarTypeSpecification)({\n  name: '_Any'\n});\nexports.serviceTypeSpec = (0, directiveAndTypeSpecification_1.createObjectTypeSpecification)({\n  name: '_Service',\n  fieldsFct: schema => [{\n    name: 'sdl',\n    type: schema.stringType()\n  }]\n});\nexports.entityTypeSpec = (0, directiveAndTypeSpecification_1.createUnionTypeSpecification)({\n  name: '_Entity',\n  membersFct: schema => {\n    return schema.objectTypes().filter(isEntityType).map(t => t.name);\n  }\n});\nexports.FEDERATION_OPERATION_TYPES = [exports.anyTypeSpec, exports.serviceTypeSpec, exports.entityTypeSpec];\nexports.serviceFieldName = '_service';\nexports.entitiesFieldName = '_entities';\nexports.FEDERATION_OPERATION_FIELDS = [exports.serviceFieldName, exports.entitiesFieldName];\nclass Subgraph {\n  constructor(name, url, schema) {\n    this.name = name;\n    this.url = url;\n    this.schema = schema;\n    if (name === exports.FEDERATION_RESERVED_SUBGRAPH_NAME) {\n      throw error_1.ERRORS.INVALID_SUBGRAPH_NAME.err(`Invalid name ${exports.FEDERATION_RESERVED_SUBGRAPH_NAME} for a subgraph: this name is reserved`);\n    }\n  }\n  metadata() {\n    const metadata = federationMetadata(this.schema);\n    (0, utils_1.assert)(metadata, 'The subgraph schema should have built with the federation built-ins.');\n    return metadata;\n  }\n  isFed2Subgraph() {\n    return this.metadata().isFed2Schema();\n  }\n  addFederationOperations() {\n    const metadata = this.metadata();\n    for (const type of exports.FEDERATION_OPERATION_TYPES) {\n      type.checkOrAdd(this.schema);\n    }\n    const queryRoot = this.schema.schemaDefinition.root(\"query\");\n    const queryType = queryRoot ? queryRoot.type : this.schema.addType(new definitions_1.ObjectType(\"Query\"));\n    const entityField = queryType.field(exports.entitiesFieldName);\n    const entityType = metadata.entityType();\n    if (entityType) {\n      const entityFieldType = new definitions_1.NonNullType(new definitions_1.ListType(entityType));\n      if (!entityField) {\n        queryType.addField(exports.entitiesFieldName, entityFieldType).addArgument('representations', new definitions_1.NonNullType(new definitions_1.ListType(new definitions_1.NonNullType(metadata.anyType()))));\n      } else if (!entityField.type) {\n        entityField.type = entityType;\n      }\n    } else if (entityField) {\n      entityField.remove();\n    }\n    if (!queryType.field(exports.serviceFieldName)) {\n      queryType.addField(exports.serviceFieldName, new definitions_1.NonNullType(metadata.serviceType()));\n    }\n  }\n  assumeValid() {\n    this.addFederationOperations();\n    this.schema.assumeValid();\n    return this;\n  }\n  validate() {\n    try {\n      this.addFederationOperations();\n      this.schema.validate();\n      return this;\n    } catch (e) {\n      if (e instanceof graphql_1.GraphQLError) {\n        throw addSubgraphToError(e, this.name, error_1.ERRORS.INVALID_GRAPHQL);\n      } else {\n        throw e;\n      }\n    }\n  }\n  isPrintedDirective(d) {\n    var _a;\n    if (this.metadata().allFederationDirectives().includes(d)) {\n      return false;\n    }\n    const core = this.schema.coreFeatures;\n    return !core || ((_a = core.sourceFeature(d)) === null || _a === void 0 ? void 0 : _a.feature.url.identity) !== coreSpec_1.linkIdentity;\n  }\n  isPrintedType(t) {\n    var _a;\n    if (this.metadata().allFederationTypes().includes(t)) {\n      return false;\n    }\n    if ((0, definitions_1.isObjectType)(t) && t.isQueryRootType() && t.fields().filter(f => !isFederationField(f)).length === 0) {\n      return false;\n    }\n    const core = this.schema.coreFeatures;\n    return !core || ((_a = core.sourceFeature(t)) === null || _a === void 0 ? void 0 : _a.feature.url.identity) !== coreSpec_1.linkIdentity;\n  }\n  isPrintedDirectiveApplication(d) {\n    if (!this.schema.coreFeatures || d.name !== linkSpec.url.name) {\n      return true;\n    }\n    const args = d.arguments();\n    let urlArg = undefined;\n    if ('url' in args) {\n      try {\n        urlArg = coreSpec_1.FeatureUrl.parse(args['url']);\n      } catch (e) {}\n    }\n    const isDefaultLinkToLink = (urlArg === null || urlArg === void 0 ? void 0 : urlArg.identity) === coreSpec_1.linkIdentity && Object.keys(args).length === 1;\n    return !isDefaultLinkToLink;\n  }\n  toString(basePrintOptions = print_1.defaultPrintOptions) {\n    return (0, print_1.printSchema)(this.schema, {\n      ...basePrintOptions,\n      directiveDefinitionFilter: d => this.isPrintedDirective(d),\n      typeFilter: t => this.isPrintedType(t),\n      fieldFilter: f => !isFederationField(f),\n      directiveApplicationFilter: d => this.isPrintedDirectiveApplication(d)\n    });\n  }\n}\nexports.Subgraph = Subgraph;\nfunction addSubgraphToASTNode(node, subgraph) {\n  if ('subgraph' in node) {\n    return node;\n  }\n  return {\n    ...node,\n    subgraph\n  };\n}\nexports.addSubgraphToASTNode = addSubgraphToASTNode;\nfunction addSubgraphToError(e, subgraphName, errorCode) {\n  const updatedCauses = (0, error_1.errorCauses)(e).map(cause => {\n    var _a;\n    const message = `[${subgraphName}] ${cause.message}`;\n    const nodes = cause.nodes ? cause.nodes.map(node => addSubgraphToASTNode(node, subgraphName)) : undefined;\n    const code = (_a = (0, error_1.errorCodeDef)(cause)) !== null && _a !== void 0 ? _a : errorCode;\n    const options = {\n      ...(0, error_1.extractGraphQLErrorOptions)(cause),\n      nodes,\n      originalError: cause\n    };\n    return code ? code.err(message, options) : new graphql_1.GraphQLError(message, options);\n  });\n  return updatedCauses.length === 1 ? updatedCauses[0] : (0, definitions_1.ErrGraphQLValidationFailed)(updatedCauses);\n}\nexports.addSubgraphToError = addSubgraphToError;\nclass ExternalTester {\n  constructor(schema, isFed2Schema) {\n    this.schema = schema;\n    this.isFed2Schema = isFed2Schema;\n    this.fakeExternalFields = new Set();\n    this.providedFields = new Set();\n    this.externalFieldsOnType = new Set();\n    this.externalDirective = this.metadata().externalDirective();\n    this.collectFakeExternals();\n    this.collectProvidedFields();\n    this.collectExternalsOnType();\n  }\n  metadata() {\n    const metadata = federationMetadata(this.schema);\n    (0, utils_1.assert)(metadata, 'Schema should be a subgraphs schema');\n    return metadata;\n  }\n  collectFakeExternals() {\n    const metadata = this.metadata();\n    const extendsDirective = metadata.extendsDirective();\n    for (const key of metadata.keyDirective().applications()) {\n      const parentType = key.parent;\n      if (!(key.ofExtension() || parentType.hasAppliedDirective(extendsDirective))) {\n        continue;\n      }\n      collectTargetFields({\n        parentType,\n        directive: key,\n        includeInterfaceFieldsImplementations: false,\n        validate: false\n      }).filter(field => field.hasAppliedDirective(this.externalDirective)).forEach(field => this.fakeExternalFields.add(field.coordinate));\n    }\n  }\n  collectProvidedFields() {\n    for (const provides of this.metadata().providesDirective().applications()) {\n      const parent = provides.parent;\n      const parentType = (0, definitions_1.baseType)(parent.type);\n      if ((0, definitions_1.isCompositeType)(parentType)) {\n        collectTargetFields({\n          parentType,\n          directive: provides,\n          includeInterfaceFieldsImplementations: true,\n          validate: false\n        }).forEach(f => this.providedFields.add(f.coordinate));\n      }\n    }\n  }\n  collectExternalsOnType() {\n    if (!this.isFed2Schema) {\n      return;\n    }\n    for (const type of this.schema.objectTypes()) {\n      if (type.hasAppliedDirective(this.externalDirective)) {\n        for (const field of type.fields()) {\n          this.externalFieldsOnType.add(field.coordinate);\n        }\n      }\n    }\n  }\n  isExternal(field) {\n    return (field.hasAppliedDirective(this.externalDirective) || this.externalFieldsOnType.has(field.coordinate)) && !this.isFakeExternal(field);\n  }\n  isFakeExternal(field) {\n    return this.fakeExternalFields.has(field.coordinate);\n  }\n  selectsAnyExternalField(selectionSet) {\n    for (const selection of selectionSet.selections()) {\n      if (selection.kind === 'FieldSelection' && this.isExternal(selection.element.definition)) {\n        return true;\n      }\n      if (selection.selectionSet) {\n        if (this.selectsAnyExternalField(selection.selectionSet)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  isPartiallyExternal(field) {\n    return this.isExternal(field) && this.providedFields.has(field.coordinate);\n  }\n  isFullyExternal(field) {\n    return this.isExternal(field) && !this.providedFields.has(field.coordinate);\n  }\n}\nfunction removeInactiveProvidesAndRequires(schema, onModified = () => {}) {\n  const metadata = federationMetadata(schema);\n  if (!metadata) {\n    return;\n  }\n  const providesDirective = metadata.providesDirective();\n  const requiresDirective = metadata.requiresDirective();\n  for (const type of schema.types()) {\n    if (!(0, definitions_1.isObjectType)(type) && !(0, definitions_1.isInterfaceType)(type)) {\n      continue;\n    }\n    for (const field of type.fields()) {\n      const fieldBaseType = (0, definitions_1.baseType)(field.type);\n      removeInactiveApplications(providesDirective, field, fieldBaseType, onModified);\n      removeInactiveApplications(requiresDirective, field, type, onModified);\n    }\n  }\n}\nexports.removeInactiveProvidesAndRequires = removeInactiveProvidesAndRequires;\nfunction removeInactiveApplications(directiveDefinition, field, parentType, onModified) {\n  for (const application of field.appliedDirectivesOf(directiveDefinition)) {\n    let selection;\n    try {\n      selection = parseFieldSetArgument({\n        parentType,\n        directive: application\n      });\n    } catch (e) {\n      continue;\n    }\n    if (selectsNonExternalLeafField(selection)) {\n      application.remove();\n      const updated = withoutNonExternalLeafFields(selection);\n      if (!updated.isEmpty()) {\n        const updatedDirective = field.applyDirective(directiveDefinition, {\n          fields: updated.toString(true, false)\n        });\n        onModified(field, application, updatedDirective);\n      } else {\n        onModified(field, application);\n      }\n    }\n  }\n}\nfunction isExternalOrHasExternalImplementations(field) {\n  const metadata = federationMetadata(field.schema());\n  if (!metadata) {\n    return false;\n  }\n  if (field.hasAppliedDirective(metadata.externalDirective())) {\n    return true;\n  }\n  const parentType = field.parent;\n  if ((0, definitions_1.isInterfaceType)(parentType)) {\n    for (const implem of parentType.possibleRuntimeTypes()) {\n      const fieldInImplem = implem.field(field.name);\n      if (fieldInImplem && fieldInImplem.hasAppliedDirective(metadata.externalDirective())) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\nfunction selectsNonExternalLeafField(selection) {\n  return selection.selections().some(s => {\n    if (s.kind === 'FieldSelection') {\n      if (isExternalOrHasExternalImplementations(s.element.definition)) {\n        return false;\n      }\n      return !s.selectionSet || selectsNonExternalLeafField(s.selectionSet);\n    } else {\n      return selectsNonExternalLeafField(s.selectionSet);\n    }\n  });\n}\nfunction withoutNonExternalLeafFields(selectionSet) {\n  return selectionSet.lazyMap(selection => {\n    if (selection.kind === 'FieldSelection') {\n      if (isExternalOrHasExternalImplementations(selection.element.definition)) {\n        return selection;\n      }\n    }\n    if (selection.selectionSet) {\n      const updated = withoutNonExternalLeafFields(selection.selectionSet);\n      if (!updated.isEmpty()) {\n        return selection.withUpdatedSelectionSet(updated);\n      }\n    }\n    return undefined;\n  });\n}","map":{"version":3,"mappings":"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","names":["definitions_1","require","utils_1","specifiedRules_1","graphql_1","KnownTypeNamesInFederationRule_1","buildSchema_1","operations_1","tagSpec_1","error_1","precompute_1","coreSpec_1","federationSpec_1","print_1","directiveAndTypeSpecification_1","suggestions_1","knownCoreFeatures_1","joinSpec_1","linkSpec","LINK_VERSIONS","latest","tagSpec","TAG_VERSIONS","federationSpec","FEDERATION_VERSIONS","autoExpandedFederationSpec","find","FeatureVersion","exports","FEDERATION_RESERVED_SUBGRAPH_NAME","FEDERATION_UNNAMED_SUBGRAPH_NAME","FEDERATION_OMITTED_VALIDATION_RULES","PossibleTypeExtensionsRule","KnownTypeNamesRule","FEDERATION_SPECIFIC_VALIDATION_RULES","KnownTypeNamesInFederationRule","FEDERATION_VALIDATION_RULES","specifiedSDLRules","filter","rule","includes","concat","ALL_DEFAULT_FEDERATION_DIRECTIVE_NAMES","Object","values","FederationDirectiveName","FAKE_FED1_CORE_FEATURE_TO_RENAME_TYPES","CoreFeature","FeatureUrl","Directive","FEDERATION1_TYPES","map","spec","name","as","validateFieldSetSelections","directiveName","selectionSet","hasExternalInParents","metadata","onError","allowOnNonExternalLeafFields","allowFieldsWithArguments","selection","selections","appliedDirectives","element","length","ERROR_CATEGORIES","DIRECTIVE_IN_FIELDS_ARG","get","err","join","kind","field","definition","isExternal","isFieldExternal","hasArguments","FIELDS_HAS_ARGS","coordinate","nodes","sourceAST","mustBeExternal","errorCode","DIRECTIVE_FIELDS_MISSING_EXTERNAL","isFieldFakeExternal","EXTERNAL","KEY","newHasExternalInParents","parentType","parent","isInterfaceType","implem","possibleRuntimeTypes","fieldInImplem","validateFieldSet","type","directive","errorCollector","onFields","fieldAccessor","fieldName","undefined","parseFieldSetArgument","error","push","handleFieldSetValidationError","e","GraphQLError","originalError","messageUpdater","sourceASTs","codeDef","errorCodeDef","ERRORS","INVALID_GRAPHQL","DIRECTIVE_INVALID_FIELDS","msg","message","trim","fieldSetErrorDescriptor","fieldSetTargetDescription","directiveStrUsingASTIfPossible","print","toString","targetKind","FieldDefinition","_a","validateAllFieldSet","targetTypeExtractor","isOnParentType","allowOnInterface","application","applications","elt","code","DIRECTIVE_UNSUPPORTED_ON_INTERFACE","collectUsedFields","usedFields","Set","collectUsedFieldsForDirective","keyDirective","requiresDirective","providesDirective","baseType","isCompositeType","itfType","schema","interfaceTypes","runtimeTypes","fields","runtimeType","implemField","add","usedFieldDefs","collectTargetFields","includeInterfaceFieldsImplementations","validate","forEach","validateAllExternalFieldsUsed","types","isObjectType","isFieldUsed","EXTERNAL_UNUSED","validateNoExternalOnInterfaceFields","itf","EXTERNAL_ON_INTERFACE","validateKeyOnInterfacesAreAlsoOnAllImplementations","implementations","keyApplication","appliedDirectivesOf","isResolvable","arguments","resolvable","implementationsWithKeyButNotResolvable","Array","implementationsMissingKey","matchingApp","app","appFields","equals","typesString","printHumanReadableList","i","prefix","prefixPlural","INTERFACE_KEY_NOT_ON_IMPLEMENTATION","validateInterfaceObjectsAreOnEntities","interfaceObjectDirective","isEntityType","INTERFACE_OBJECT_USAGE_ERROR","validateShareableNotRepeatedOnSameDeclaration","shareableApplications","shareableDirective","byExtensions","reduce","acc","v","ext","ofExtension","with","without","MultiMap","groups","mapValues","group","eltStr","INVALID_SHAREABLE_USAGE","FederationMetadata","constructor","onInvalidate","_externalTester","_sharingPredicate","_isFed2Schema","_fieldUsedPredicate","isFed2Schema","feature","federationFeature","url","version","satisfies","coreFeatures","getByIdentity","identity","externalTester","ExternalTester","sharingPredicate","computeShareables","fieldUsedPredicate","has","isFieldPartiallyExternal","isPartiallyExternal","isFieldFullyExternal","isFullyExternal","isFakeExternal","selectionSelectsAnyExternalField","selectsAnyExternalField","isFieldShareable","isInterfaceObjectType","hasAppliedDirective","federationDirectiveNameInSchema","assert","directiveNameInSchema","federationTypeNameInSchema","charAt","typeNameInSchema","getLegacyFederationDirective","getFederationDirective","getPost20FederationDirective","overrideDirective","OVERRIDE","extendsDirective","EXTENDS","externalDirective","REQUIRES","PROVIDES","SHAREABLE","tagDirective","TAG","composeDirective","COMPOSE_DIRECTIVE","inaccessibleDirective","INACCESSIBLE","INTERFACE_OBJECT","authenticatedDirective","AUTHENTICATED","requiresScopesDirective","REQUIRES_SCOPES","allFederationDirectives","baseDirectives","isFederationDirectiveDefinedInSchema","entityType","entityTypeSpec","anyType","anyTypeSpec","serviceType","serviceTypeSpec","fieldSetType","FederationTypeName","FIELD_SET","allFederationTypes","fedTypes","fedFeature","featureDef","typeSpec","typeSpecs","DirectiveDefinition","FederationBlueprint","SchemaBlueprint","withRootTypeRenaming","onAddedCoreFeature","federationIdentity","addElementsToSchema","onMissingDirectiveDefinition","linkDirectiveDefaultName","args","imports","startsWith","extractCoreFeatureImports","errors","addDefinitionsToSchema","ignoreParsedField","FEDERATION_OPERATION_FIELDS","federationMetadata","onConstructed","existing","onDirectiveDefinitionAndSchemaParsed","completeSubgraphSchema","schemaDefinition","processUnappliedDirectives","onInvalidation","prototype","call","onValidation","k","allSchemaRootKinds","root","defaultName","defaultRootName","ROOT_TYPE_USED","rename","compareTo","isUnionType","slice","KEY_FIELDS_SELECT_INVALID_TYPE","EXTERNAL_COLLISION_WITH_ANOTHER_DIRECTIVE","PROVIDES_ON_NON_OBJECT_FIELD","checkCompatibleDirective","objectType","objectTypes","shareableApplication","validationRules","onUnknownDirectiveValidationError","unknownDirectiveName","nameInSchema","withModifiedErrorMessage","suggestions","suggestionList","didYouMean","s","applyDirectivesAfterParsing","findUnusedNamedForLinkDirective","baseName","n","candidate","setSchemaAsFed2Subgraph","core","coreDefinition","alias","addToSchema","ErrGraphQLValidationFailed","applyDirective","coreItself","import","directiveSpecs","FEDERATION2_LINK_WITH_FULL_IMPORTS","FEDERATION2_LINK_WITH_AUTO_EXPANDED_IMPORTS","asFed2SubgraphDocument","document","options","importedDirectives","includeAllImports","directiveToAdd","Kind","DIRECTIVE","NAME","value","ARGUMENT","STRING","LIST","addAsSchemaExtension","DOCUMENT","loc","definitions","SCHEMA_EXTENSION","directives","existingSchemaDefinition","d","SCHEMA_DEFINITION","_b","hasMutation","some","OBJECT_TYPE_DEFINITION","makeOpType","opType","OPERATION_TYPE_DEFINITION","operation","NAMED_TYPE","operationTypes","OperationTypeNode","QUERY","MUTATION","printSubgraphNames","names","isFederationSubgraphSchema","isFederationField","buildSubgraph","source","buildOptions","blueprint","subgraph","buildSchema","Source","buildSchemaFromAST","Subgraph","addSubgraphToError","newEmptyFederation2Schema","config","Schema","completeFed2SubgraphSchema","completeFed1SubgraphSchema","fedLink","isFedSpecLinkDirective","fieldType","argument","fieldTypeIsWrongInKnownWays","remove","checkOrAdd","FEDERATION1_DIRECTIVES","flat","expandKnownFeatures","UNKNOWN_FEDERATION_LINK_VERSION","allFeatures","joinIdentity","coreFeatureDefinitionIfKnown","decorateValidationErrors","parseSelectionSet","validateFieldSetValue","forEachElement","endsWith","t","f","implType","implField","isGraphQLError","errorCauses","DIRECTIVE_INVALID_FIELDS_TYPE","argNode","subgraphsFromServiceList","serviceList","subgraphs","Subgraphs","service","typeDefs","causes","OrderedMap","Error","size","keys","Symbol","iterator","createScalarTypeSpecification","createObjectTypeSpecification","fieldsFct","stringType","createUnionTypeSpecification","membersFct","FEDERATION_OPERATION_TYPES","serviceFieldName","entitiesFieldName","INVALID_SUBGRAPH_NAME","isFed2Subgraph","addFederationOperations","queryRoot","queryType","addType","ObjectType","entityField","entityFieldType","NonNullType","ListType","addField","addArgument","assumeValid","isPrintedDirective","sourceFeature","linkIdentity","isPrintedType","isQueryRootType","isPrintedDirectiveApplication","urlArg","parse","isDefaultLinkToLink","basePrintOptions","defaultPrintOptions","printSchema","directiveDefinitionFilter","typeFilter","fieldFilter","directiveApplicationFilter","addSubgraphToASTNode","node","subgraphName","updatedCauses","cause","extractGraphQLErrorOptions","fakeExternalFields","providedFields","externalFieldsOnType","collectFakeExternals","collectProvidedFields","collectExternalsOnType","key","provides","removeInactiveProvidesAndRequires","onModified","fieldBaseType","removeInactiveApplications","directiveDefinition","selectsNonExternalLeafField","updated","withoutNonExternalLeafFields","isEmpty","updatedDirective","isExternalOrHasExternalImplementations","lazyMap","withUpdatedSelectionSet"],"sourceRoot":"","sources":["../src/federation.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}