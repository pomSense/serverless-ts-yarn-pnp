{"ast":null,"code":"\"use strict\";\n\n/**\n * DynamoDB Toolbox: A simple set of tools for working with Amazon DynamoDB\n * @author Jeremy Daly <jeremy@jeremydaly.com>\n * @license MIT\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.transformAttr = exports.conditonError = exports.keyTypeError = exports.typeError = exports.error = exports.isEmpty = exports.hasValue = exports.toBool = exports.validKeyTypes = exports.validTypes = void 0;\nexports.validTypes = ['string', 'boolean', 'number', 'list', 'map', 'binary', 'set'];\nexports.validKeyTypes = ['string', 'number', 'binary'];\n// Boolean conversion\nconst toBool = val => typeof val === 'boolean' ? val : ['false', '0', 'no'].includes(String(val).toLowerCase()) ? false : Boolean(val);\nexports.toBool = toBool;\n// has value shortcut\nconst hasValue = val => val !== undefined && val !== null;\nexports.hasValue = hasValue;\n// isEmpty object shortcut\nconst isEmpty = val => val === undefined || typeof val === 'object' && Object.keys(val).length === 0;\nexports.isEmpty = isEmpty;\n// Inline error handler\nconst error = err => {\n  throw new Error(err);\n};\nexports.error = error;\n// Standard type error\nconst typeError = field => {\n  exports.error(`Invalid or missing type for '${field}'. ` + `Valid types are '${exports.validTypes.slice(0, -1).join(`', '`)}',` + ` and '${exports.validTypes.slice(-1)}'.`);\n};\nexports.typeError = typeError;\n// Key type error\nconst keyTypeError = field => {\n  exports.error(`Invalid or missing type for '${field}'. ` + `Valid types for partitionKey and sortKey are 'string','number' and 'binary'`);\n};\nexports.keyTypeError = keyTypeError;\n// Condition error\nconst conditonError = op => exports.error(`You can only supply one sortKey condition per query. Already using '${op}'`);\nexports.conditonError = conditonError;\n// Transform attribute values\nconst transformAttr = (mapping, value, data) => {\n  value = mapping.transform ? mapping.transform(value, data) : value;\n  return mapping.prefix || mapping.suffix ? `${mapping.prefix || ''}${value}${mapping.suffix || ''}` : value;\n};\nexports.transformAttr = transformAttr;","map":{"version":3,"names":["Object","defineProperty","exports","value","transformAttr","conditonError","keyTypeError","typeError","error","isEmpty","hasValue","toBool","validKeyTypes","validTypes","val","includes","String","toLowerCase","Boolean","undefined","keys","length","err","Error","field","slice","join","op","mapping","data","transform","prefix","suffix"],"sources":["/Users/pom/Code/serverless-ts-yarn-pnp/.yarn/cache/dynamodb-toolbox-npm-0.3.5-3ff4bf5328-d75542b529.zip/node_modules/dynamodb-toolbox/dist/lib/utils.js"],"sourcesContent":["\"use strict\";\n/**\n * DynamoDB Toolbox: A simple set of tools for working with Amazon DynamoDB\n * @author Jeremy Daly <jeremy@jeremydaly.com>\n * @license MIT\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.transformAttr = exports.conditonError = exports.keyTypeError = exports.typeError = exports.error = exports.isEmpty = exports.hasValue = exports.toBool = exports.validKeyTypes = exports.validTypes = void 0;\nexports.validTypes = ['string', 'boolean', 'number', 'list', 'map', 'binary', 'set'];\nexports.validKeyTypes = ['string', 'number', 'binary'];\n// Boolean conversion\nconst toBool = (val) => typeof val === 'boolean' ? val\n    : ['false', '0', 'no'].includes(String(val).toLowerCase()) ? false\n        : Boolean(val);\nexports.toBool = toBool;\n// has value shortcut\nconst hasValue = (val) => val !== undefined && val !== null;\nexports.hasValue = hasValue;\n// isEmpty object shortcut\nconst isEmpty = (val) => val === undefined || (typeof val === 'object' && Object.keys(val).length === 0);\nexports.isEmpty = isEmpty;\n// Inline error handler\nconst error = (err) => { throw new Error(err); };\nexports.error = error;\n// Standard type error\nconst typeError = (field) => {\n    exports.error(`Invalid or missing type for '${field}'. `\n        + `Valid types are '${exports.validTypes.slice(0, -1).join(`', '`)}',`\n        + ` and '${exports.validTypes.slice(-1)}'.`);\n};\nexports.typeError = typeError;\n// Key type error\nconst keyTypeError = (field) => {\n    exports.error(`Invalid or missing type for '${field}'. `\n        + `Valid types for partitionKey and sortKey are 'string','number' and 'binary'`);\n};\nexports.keyTypeError = keyTypeError;\n// Condition error\nconst conditonError = (op) => exports.error(`You can only supply one sortKey condition per query. Already using '${op}'`);\nexports.conditonError = conditonError;\n// Transform attribute values\nconst transformAttr = (mapping, value, data) => {\n    value = mapping.transform ? mapping.transform(value, data) : value;\n    return mapping.prefix || mapping.suffix ?\n        `${mapping.prefix || ''}${value}${mapping.suffix || ''}`\n        : value;\n};\nexports.transformAttr = transformAttr;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,aAAa,GAAGF,OAAO,CAACG,aAAa,GAAGH,OAAO,CAACI,YAAY,GAAGJ,OAAO,CAACK,SAAS,GAAGL,OAAO,CAACM,KAAK,GAAGN,OAAO,CAACO,OAAO,GAAGP,OAAO,CAACQ,QAAQ,GAAGR,OAAO,CAACS,MAAM,GAAGT,OAAO,CAACU,aAAa,GAAGV,OAAO,CAACW,UAAU,GAAG,KAAK,CAAC;AACpNX,OAAO,CAACW,UAAU,GAAG,CAAC,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,CAAC;AACpFX,OAAO,CAACU,aAAa,GAAG,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC;AACtD;AACA,MAAMD,MAAM,GAAIG,GAAG,IAAK,OAAOA,GAAG,KAAK,SAAS,GAAGA,GAAG,GAChD,CAAC,OAAO,EAAE,GAAG,EAAE,IAAI,CAAC,CAACC,QAAQ,CAACC,MAAM,CAACF,GAAG,CAAC,CAACG,WAAW,CAAC,CAAC,CAAC,GAAG,KAAK,GAC5DC,OAAO,CAACJ,GAAG,CAAC;AACtBZ,OAAO,CAACS,MAAM,GAAGA,MAAM;AACvB;AACA,MAAMD,QAAQ,GAAII,GAAG,IAAKA,GAAG,KAAKK,SAAS,IAAIL,GAAG,KAAK,IAAI;AAC3DZ,OAAO,CAACQ,QAAQ,GAAGA,QAAQ;AAC3B;AACA,MAAMD,OAAO,GAAIK,GAAG,IAAKA,GAAG,KAAKK,SAAS,IAAK,OAAOL,GAAG,KAAK,QAAQ,IAAId,MAAM,CAACoB,IAAI,CAACN,GAAG,CAAC,CAACO,MAAM,KAAK,CAAE;AACxGnB,OAAO,CAACO,OAAO,GAAGA,OAAO;AACzB;AACA,MAAMD,KAAK,GAAIc,GAAG,IAAK;EAAE,MAAM,IAAIC,KAAK,CAACD,GAAG,CAAC;AAAE,CAAC;AAChDpB,OAAO,CAACM,KAAK,GAAGA,KAAK;AACrB;AACA,MAAMD,SAAS,GAAIiB,KAAK,IAAK;EACzBtB,OAAO,CAACM,KAAK,CAAE,gCAA+BgB,KAAM,KAAI,GACjD,oBAAmBtB,OAAO,CAACW,UAAU,CAACY,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACC,IAAI,CAAE,MAAK,CAAE,IAAG,GACnE,SAAQxB,OAAO,CAACW,UAAU,CAACY,KAAK,CAAC,CAAC,CAAC,CAAE,IAAG,CAAC;AACpD,CAAC;AACDvB,OAAO,CAACK,SAAS,GAAGA,SAAS;AAC7B;AACA,MAAMD,YAAY,GAAIkB,KAAK,IAAK;EAC5BtB,OAAO,CAACM,KAAK,CAAE,gCAA+BgB,KAAM,KAAI,GACjD,6EAA4E,CAAC;AACxF,CAAC;AACDtB,OAAO,CAACI,YAAY,GAAGA,YAAY;AACnC;AACA,MAAMD,aAAa,GAAIsB,EAAE,IAAKzB,OAAO,CAACM,KAAK,CAAE,uEAAsEmB,EAAG,GAAE,CAAC;AACzHzB,OAAO,CAACG,aAAa,GAAGA,aAAa;AACrC;AACA,MAAMD,aAAa,GAAGA,CAACwB,OAAO,EAAEzB,KAAK,EAAE0B,IAAI,KAAK;EAC5C1B,KAAK,GAAGyB,OAAO,CAACE,SAAS,GAAGF,OAAO,CAACE,SAAS,CAAC3B,KAAK,EAAE0B,IAAI,CAAC,GAAG1B,KAAK;EAClE,OAAOyB,OAAO,CAACG,MAAM,IAAIH,OAAO,CAACI,MAAM,GAClC,GAAEJ,OAAO,CAACG,MAAM,IAAI,EAAG,GAAE5B,KAAM,GAAEyB,OAAO,CAACI,MAAM,IAAI,EAAG,EAAC,GACtD7B,KAAK;AACf,CAAC;AACDD,OAAO,CAACE,aAAa,GAAGA,aAAa"},"metadata":{},"sourceType":"module"}