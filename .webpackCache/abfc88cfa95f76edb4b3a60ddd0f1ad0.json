{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.typesCanBeMerged = exports.isStrictSubtype = exports.isSubtype = exports.isDirectSubtype = exports.sameType = exports.DEFAULT_SUBTYPING_RULES = exports.ALL_SUBTYPING_RULES = void 0;\nconst definitions_1 = require(\"./definitions\");\nexports.ALL_SUBTYPING_RULES = ['direct', 'nonNullable_downgrade', 'list_upgrade', 'list_propagation', 'nonNullable_propagation'];\nexports.DEFAULT_SUBTYPING_RULES = exports.ALL_SUBTYPING_RULES.filter(r => r !== \"list_upgrade\");\nfunction sameType(t1, t2) {\n  switch (t1.kind) {\n    case 'ListType':\n      return (0, definitions_1.isListType)(t2) && sameType(t1.ofType, t2.ofType);\n    case 'NonNullType':\n      return (0, definitions_1.isNonNullType)(t2) && sameType(t1.ofType, t2.ofType);\n    default:\n      return (0, definitions_1.isNamedType)(t2) && t1.name === t2.name;\n  }\n}\nexports.sameType = sameType;\nfunction isDirectSubtype(type, maybeSubType, unionMembershipTester = (u, m) => u.hasTypeMember(m), implementsInterfaceTester = (m, i) => m.implementsInterface(i)) {\n  if ((0, definitions_1.isUnionType)(type)) {\n    return (0, definitions_1.isObjectType)(maybeSubType) && unionMembershipTester(type, maybeSubType);\n  }\n  return implementsInterfaceTester(maybeSubType, type);\n}\nexports.isDirectSubtype = isDirectSubtype;\nfunction isSubtype(type, maybeSubType, allowedRules = exports.DEFAULT_SUBTYPING_RULES, unionMembershipTester = (u, m) => u.hasTypeMember(m), implementsInterfaceTester = (m, i) => m.implementsInterface(i)) {\n  return sameType(type, maybeSubType) || isStrictSubtype(type, maybeSubType, allowedRules, unionMembershipTester, implementsInterfaceTester);\n}\nexports.isSubtype = isSubtype;\nfunction isStrictSubtype(type, maybeSubType, allowedRules = exports.DEFAULT_SUBTYPING_RULES, unionMembershipTester = (u, m) => u.hasTypeMember(m), implementsInterfaceTester = (m, i) => m.implementsInterface(i)) {\n  switch (maybeSubType.kind) {\n    case 'ListType':\n      return allowedRules.includes('list_propagation') && (0, definitions_1.isListType)(type) && isSubtype(type.ofType, maybeSubType.ofType, allowedRules, unionMembershipTester, implementsInterfaceTester);\n    case 'NonNullType':\n      if ((0, definitions_1.isNonNullType)(type)) {\n        return allowedRules.includes('nonNullable_propagation') && isSubtype(type.ofType, maybeSubType.ofType, allowedRules, unionMembershipTester, implementsInterfaceTester);\n      }\n      return allowedRules.includes('nonNullable_downgrade') && isSubtype(type, maybeSubType.ofType, allowedRules, unionMembershipTester, implementsInterfaceTester);\n    case 'ObjectType':\n    case 'InterfaceType':\n      if ((0, definitions_1.isListType)(type)) {\n        return allowedRules.includes('list_upgrade') && isSubtype(type.ofType, maybeSubType, allowedRules, unionMembershipTester, implementsInterfaceTester);\n      }\n      return allowedRules.includes('direct') && ((0, definitions_1.isInterfaceType)(type) || (0, definitions_1.isUnionType)(type)) && isDirectSubtype(type, maybeSubType, unionMembershipTester, implementsInterfaceTester);\n    default:\n      return (0, definitions_1.isListType)(type) && allowedRules.includes('list_upgrade') && isSubtype(type.ofType, maybeSubType, allowedRules, unionMembershipTester, implementsInterfaceTester);\n  }\n}\nexports.isStrictSubtype = isStrictSubtype;\nfunction typesCanBeMerged(t1, t2) {\n  if ((0, definitions_1.isNonNullType)(t1)) {\n    return (0, definitions_1.isNonNullType)(t2) ? typesCanBeMerged(t1.ofType, t2.ofType) : false;\n  }\n  if ((0, definitions_1.isListType)(t1)) {\n    return (0, definitions_1.isListType)(t2) ? typesCanBeMerged(t1.ofType, t2.ofType) : false;\n  }\n  if ((0, definitions_1.isCompositeType)(t1)) {\n    return (0, definitions_1.isCompositeType)(t2);\n  }\n  return sameType(t1, t2);\n}\nexports.typesCanBeMerged = typesCanBeMerged;","map":{"version":3,"mappings":";;;;;;AAIA,MAAAA,aAAA,GAAAC,OAAA;AAeaC,OAAA,CAAAC,mBAAmB,GAAG,CACjC,QAAiB,EACjB,uBAAgC,EAChC,cAAuB,EACvB,kBAA2B,EAC3B,yBAAkC,CACnC;AAKYD,OAAA,CAAAE,uBAAuB,GAAGF,OAAA,CAAAC,mBAAmB,CAACE,MAAM,CAACC,CAAC,IAAIA,CAAC,KAAK,cAAc,CAAC;AAc5F,SAAgBC,QAAQA,CAACC,EAAQ,EAAEC,EAAQ;EACzC,QAAQD,EAAE,CAACE,IAAI;IACb,KAAK,UAAU;MACb,OAAO,IAAAV,aAAA,CAAAW,UAAU,EAACF,EAAE,CAAC,IAAIF,QAAQ,CAACC,EAAE,CAACI,MAAM,EAAEH,EAAE,CAACG,MAAM,CAAC;IACzD,KAAK,aAAa;MAChB,OAAO,IAAAZ,aAAA,CAAAa,aAAa,EAACJ,EAAE,CAAC,IAAIF,QAAQ,CAACC,EAAE,CAACI,MAAM,EAAEH,EAAE,CAACG,MAAM,CAAC;IAC5D;MACE,OAAO,IAAAZ,aAAA,CAAAc,WAAW,EAACL,EAAE,CAAC,IAAID,EAAE,CAACO,IAAI,KAAKN,EAAE,CAACM,IAAI;;AAEnD;AATAb,OAAA,CAAAK,QAAA,GAAAA,QAAA;AAyBA,SAAgBS,eAAeA,CAC7BC,IAAkB,EAClBC,YAAwC,EACxCC,qBAAA,GAAgFA,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACE,aAAa,CAACD,CAAC,CAAC,EAC5GE,yBAAA,GAA2GA,CAACF,CAAC,EAAEG,CAAC,KAAKH,CAAC,CAACI,mBAAmB,CAACD,CAAC,CAAC;EAE7I,IAAI,IAAAxB,aAAA,CAAA0B,WAAW,EAACT,IAAI,CAAC,EAAE;IACrB,OAAO,IAAAjB,aAAA,CAAA2B,YAAY,EAACT,YAAY,CAAC,IAAIC,qBAAqB,CAACF,IAAI,EAAEC,YAAY,CAAC;;EAEhF,OAAOK,yBAAyB,CAACL,YAAY,EAAED,IAAI,CAAC;AACtD;AAVAf,OAAA,CAAAc,eAAA,GAAAA,eAAA;AA4BA,SAAgBY,SAASA,CACvBX,IAAU,EACVC,YAAkB,EAClBW,YAAA,GAAgC3B,OAAA,CAAAE,uBAAuB,EACvDe,qBAAA,GAAgFA,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACE,aAAa,CAACD,CAAC,CAAC,EAC5GE,yBAAA,GAA2GA,CAACF,CAAC,EAAEG,CAAC,KAAKH,CAAC,CAACI,mBAAmB,CAACD,CAAC,CAAC;EAE7I,OAAOjB,QAAQ,CAACU,IAAI,EAAEC,YAAY,CAAC,IAAIY,eAAe,CAACb,IAAI,EAAEC,YAAY,EAAEW,YAAY,EAAEV,qBAAqB,EAAEI,yBAAyB,CAAC;AAC5I;AARArB,OAAA,CAAA0B,SAAA,GAAAA,SAAA;AAgBA,SAAgBE,eAAeA,CAC7Bb,IAAU,EACVC,YAAkB,EAClBW,YAAA,GAAgC3B,OAAA,CAAAE,uBAAuB,EACvDe,qBAAA,GAAgFA,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACE,aAAa,CAACD,CAAC,CAAC,EAC5GE,yBAAA,GAA2GA,CAACF,CAAC,EAAEG,CAAC,KAAKH,CAAC,CAACI,mBAAmB,CAACD,CAAC,CAAC;EAE7I,QAAQN,YAAY,CAACR,IAAI;IACvB,KAAK,UAAU;MACb,OAAOmB,YAAY,CAACE,QAAQ,CAAC,kBAAkB,CAAC,IAC3C,IAAA/B,aAAA,CAAAW,UAAU,EAACM,IAAI,CAAC,IAChBW,SAAS,CAACX,IAAI,CAACL,MAAM,EAAEM,YAAY,CAACN,MAAM,EAAEiB,YAAY,EAAEV,qBAAqB,EAAEI,yBAAyB,CAAC;IAClH,KAAK,aAAa;MAChB,IAAI,IAAAvB,aAAA,CAAAa,aAAa,EAACI,IAAI,CAAC,EAAE;QACvB,OAAOY,YAAY,CAACE,QAAQ,CAAC,yBAAyB,CAAC,IAClDH,SAAS,CAACX,IAAI,CAACL,MAAM,EAAEM,YAAY,CAACN,MAAM,EAAEiB,YAAY,EAAEV,qBAAqB,EAAEI,yBAAyB,CAAC;;MAElH,OAAOM,YAAY,CAACE,QAAQ,CAAC,uBAAuB,CAAC,IAChDH,SAAS,CAACX,IAAI,EAAEC,YAAY,CAACN,MAAM,EAAEiB,YAAY,EAAEV,qBAAqB,EAAEI,yBAAyB,CAAC;IAC3G,KAAK,YAAY;IACjB,KAAK,eAAe;MAClB,IAAI,IAAAvB,aAAA,CAAAW,UAAU,EAACM,IAAI,CAAC,EAAE;QACpB,OAAOY,YAAY,CAACE,QAAQ,CAAC,cAAc,CAAC,IACvCH,SAAS,CAACX,IAAI,CAACL,MAAM,EAAEM,YAAY,EAAEW,YAAY,EAAEV,qBAAqB,EAAEI,yBAAyB,CAAC;;MAE3G,OAAOM,YAAY,CAACE,QAAQ,CAAC,QAAQ,CAAC,KAChC,IAAA/B,aAAA,CAAAgC,eAAe,EAACf,IAAI,CAAC,IAAI,IAAAjB,aAAA,CAAA0B,WAAW,EAACT,IAAI,CAAC,CAAC,IAC5CD,eAAe,CAACC,IAAI,EAAEC,YAAY,EAAEC,qBAAqB,EAAEI,yBAAyB,CAAC;IAC5F;MACE,OAAO,IAAAvB,aAAA,CAAAW,UAAU,EAACM,IAAI,CAAC,IAClBY,YAAY,CAACE,QAAQ,CAAC,cAAc,CAAC,IACrCH,SAAS,CAACX,IAAI,CAACL,MAAM,EAAEM,YAAY,EAAEW,YAAY,EAAEV,qBAAqB,EAAEI,yBAAyB,CAAC;;AAE/G;AAjCArB,OAAA,CAAA4B,eAAA,GAAAA,eAAA;AAyCA,SAAgBG,gBAAgBA,CAACzB,EAAQ,EAAEC,EAAQ;EACjD,IAAI,IAAAT,aAAA,CAAAa,aAAa,EAACL,EAAE,CAAC,EAAE;IACrB,OAAO,IAAAR,aAAA,CAAAa,aAAa,EAACJ,EAAE,CAAC,GAAGwB,gBAAgB,CAACzB,EAAE,CAACI,MAAM,EAAEH,EAAE,CAACG,MAAM,CAAC,GAAG,KAAK;;EAE3E,IAAI,IAAAZ,aAAA,CAAAW,UAAU,EAACH,EAAE,CAAC,EAAE;IAClB,OAAO,IAAAR,aAAA,CAAAW,UAAU,EAACF,EAAE,CAAC,GAAGwB,gBAAgB,CAACzB,EAAE,CAACI,MAAM,EAAEH,EAAE,CAACG,MAAM,CAAC,GAAG,KAAK;;EAExE,IAAI,IAAAZ,aAAA,CAAAkC,eAAe,EAAC1B,EAAE,CAAC,EAAE;IACvB,OAAO,IAAAR,aAAA,CAAAkC,eAAe,EAACzB,EAAE,CAAC;;EAE5B,OAAOF,QAAQ,CAACC,EAAE,EAAEC,EAAE,CAAC;AACzB;AAXAP,OAAA,CAAA+B,gBAAA,GAAAA,gBAAA","names":["definitions_1","require","exports","ALL_SUBTYPING_RULES","DEFAULT_SUBTYPING_RULES","filter","r","sameType","t1","t2","kind","isListType","ofType","isNonNullType","isNamedType","name","isDirectSubtype","type","maybeSubType","unionMembershipTester","u","m","hasTypeMember","implementsInterfaceTester","i","implementsInterface","isUnionType","isObjectType","isSubtype","allowedRules","isStrictSubtype","includes","isInterfaceType","typesCanBeMerged","isCompositeType"],"sourceRoot":"","sources":["../src/types.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}