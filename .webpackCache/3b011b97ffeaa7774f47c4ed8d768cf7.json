{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = undefined && undefined.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nvar _a;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.cloneObject = exports.processHTTPRequest = exports.runHttpQuery = exports.throwHttpGraphQLError = exports.isHttpQueryError = exports.HttpQueryError = void 0;\nconst apollo_server_env_1 = require(\"apollo-server-env\");\nconst apollo_server_errors_1 = require(\"apollo-server-errors\");\nconst whatwg_mimetype_1 = __importDefault(require(\"whatwg-mimetype\"));\nconst cachePolicy_1 = require(\"./cachePolicy\");\nconst graphqlOptions_1 = require(\"./graphqlOptions\");\nconst requestPipeline_1 = require(\"./requestPipeline\");\nclass HttpQueryError extends Error {\n  constructor(statusCode, message, isGraphQLError = false, headers) {\n    super(message);\n    this.name = 'HttpQueryError';\n    this.statusCode = statusCode;\n    this.isGraphQLError = isGraphQLError;\n    this.headers = headers;\n  }\n}\nexports.HttpQueryError = HttpQueryError;\nfunction isHttpQueryError(e) {\n  return (e === null || e === void 0 ? void 0 : e.name) === 'HttpQueryError';\n}\nexports.isHttpQueryError = isHttpQueryError;\nfunction throwHttpGraphQLError(statusCode, errors, options, extensions, headers) {\n  const allHeaders = {\n    'Content-Type': 'application/json'\n  };\n  if (headers) {\n    for (const [name, value] of headers) {\n      allHeaders[name] = value;\n    }\n  }\n  const result = {\n    errors: options ? (0, apollo_server_errors_1.formatApolloErrors)(errors, {\n      debug: options.debug,\n      formatter: options.formatError\n    }) : errors\n  };\n  if (extensions) {\n    result.extensions = extensions;\n  }\n  throw new HttpQueryError(statusCode, prettyJSONStringify(result), true, allHeaders);\n}\nexports.throwHttpGraphQLError = throwHttpGraphQLError;\nconst NODE_ENV = (_a = process.env.NODE_ENV) !== null && _a !== void 0 ? _a : '';\nconst NON_PREFLIGHTED_CONTENT_TYPES = ['application/x-www-form-urlencoded', 'multipart/form-data', 'text/plain'];\nfunction preventCsrf(headers, csrfPreventionRequestHeaders) {\n  const contentType = headers.get('content-type');\n  if (contentType !== null) {\n    const contentTypeParsed = whatwg_mimetype_1.default.parse(contentType);\n    if (contentTypeParsed === null) {\n      return;\n    }\n    if (!NON_PREFLIGHTED_CONTENT_TYPES.includes(contentTypeParsed.essence)) {\n      return;\n    }\n  }\n  if (csrfPreventionRequestHeaders.some(header => {\n    const value = headers.get(header);\n    return value !== null && value.length > 0;\n  })) {\n    return;\n  }\n  throw new HttpQueryError(400, `This operation has been blocked as a potential Cross-Site Request Forgery ` + `(CSRF). Please either specify a 'content-type' header (with a type that ` + `is not one of ${NON_PREFLIGHTED_CONTENT_TYPES.join(', ')}) or provide ` + `a non-empty value for one of the following headers: ${csrfPreventionRequestHeaders.join(', ')}\\n`);\n}\nasync function runHttpQuery(handlerArguments, request, csrfPreventionRequestHeaders) {\n  function debugFromNodeEnv(nodeEnv = NODE_ENV) {\n    return nodeEnv !== 'production' && nodeEnv !== 'test';\n  }\n  if (csrfPreventionRequestHeaders) {\n    preventCsrf(request.request.headers, csrfPreventionRequestHeaders);\n  }\n  let options;\n  try {\n    options = await (0, graphqlOptions_1.resolveGraphqlOptions)(request.options, ...handlerArguments);\n  } catch (e) {\n    return throwHttpGraphQLError(500, [e], {\n      debug: debugFromNodeEnv()\n    });\n  }\n  if (options.debug === undefined) {\n    options.debug = debugFromNodeEnv(options.nodeEnv);\n  }\n  if (typeof options.context === 'function') {\n    try {\n      options.context();\n    } catch (e) {\n      e.message = `Context creation failed: ${e.message}`;\n      if (e.extensions && e.extensions.code && e.extensions.code !== 'INTERNAL_SERVER_ERROR') {\n        return throwHttpGraphQLError(400, [e], options);\n      } else {\n        return throwHttpGraphQLError(500, [e], options);\n      }\n    }\n  }\n  const config = {\n    schema: options.schema,\n    schemaHash: options.schemaHash,\n    logger: options.logger,\n    rootValue: options.rootValue,\n    context: options.context || {},\n    validationRules: options.validationRules,\n    executor: options.executor,\n    fieldResolver: options.fieldResolver,\n    cache: options.cache,\n    dataSources: options.dataSources,\n    documentStore: options.documentStore,\n    persistedQueries: options.persistedQueries,\n    formatError: options.formatError,\n    formatResponse: options.formatResponse,\n    debug: options.debug,\n    plugins: options.plugins || [],\n    allowBatchedHttpRequests: options.allowBatchedHttpRequests\n  };\n  return processHTTPRequest(config, request);\n}\nexports.runHttpQuery = runHttpQuery;\nasync function processHTTPRequest(options, httpRequest) {\n  var _a, _b;\n  let requestPayload;\n  switch (httpRequest.method) {\n    case 'POST':\n      if (!httpRequest.query || typeof httpRequest.query === 'string' || Buffer.isBuffer(httpRequest.query) || Object.keys(httpRequest.query).length === 0) {\n        throw new HttpQueryError(400, 'POST body missing, invalid Content-Type, or JSON object has no keys.');\n      }\n      requestPayload = httpRequest.query;\n      break;\n    case 'GET':\n      if (!httpRequest.query || Object.keys(httpRequest.query).length === 0) {\n        throw new HttpQueryError(400, 'GET query missing.');\n      }\n      requestPayload = httpRequest.query;\n      break;\n    default:\n      throw new HttpQueryError(405, 'Apollo Server supports only GET/POST requests.', false, {\n        Allow: 'GET, POST'\n      });\n  }\n  options = {\n    ...options,\n    plugins: [checkOperationPlugin, ...options.plugins]\n  };\n  function buildRequestContext(request, requestIsBatched) {\n    const context = cloneObject(options.context);\n    return {\n      logger: options.logger || console,\n      schema: options.schema,\n      schemaHash: options.schemaHash,\n      request,\n      response: {\n        http: {\n          headers: new apollo_server_env_1.Headers()\n        }\n      },\n      context,\n      cache: options.cache,\n      debug: options.debug,\n      metrics: {},\n      overallCachePolicy: (0, cachePolicy_1.newCachePolicy)(),\n      requestIsBatched\n    };\n  }\n  const responseInit = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  let body;\n  try {\n    if (Array.isArray(requestPayload)) {\n      if (options.allowBatchedHttpRequests === false) {\n        return throwHttpGraphQLError(400, [new Error('Operation batching disabled.')], options);\n      }\n      const requests = requestPayload.map(requestParams => parseGraphQLRequest(httpRequest.request, requestParams));\n      const responses = await Promise.all(requests.map(async request => {\n        try {\n          const requestContext = buildRequestContext(request, true);\n          const response = await (0, requestPipeline_1.processGraphQLRequest)(options, requestContext);\n          if (response.http) {\n            for (const [name, value] of response.http.headers) {\n              responseInit.headers[name] = value;\n            }\n            if (response.http.status) {\n              responseInit.status = response.http.status;\n            }\n          }\n          return response;\n        } catch (error) {\n          return {\n            errors: (0, apollo_server_errors_1.formatApolloErrors)([error], options)\n          };\n        }\n      }));\n      body = prettyJSONStringify(responses.map(serializeGraphQLResponse));\n    } else {\n      const request = parseGraphQLRequest(httpRequest.request, requestPayload);\n      const requestContext = buildRequestContext(request, false);\n      const response = await (0, requestPipeline_1.processGraphQLRequest)(options, requestContext);\n      if (response.errors && typeof response.data === 'undefined') {\n        return throwHttpGraphQLError(((_a = response.http) === null || _a === void 0 ? void 0 : _a.status) || 400, response.errors, undefined, response.extensions, (_b = response.http) === null || _b === void 0 ? void 0 : _b.headers);\n      }\n      if (response.http) {\n        for (const [name, value] of response.http.headers) {\n          responseInit.headers[name] = value;\n        }\n        if (response.http.status) {\n          responseInit.status = response.http.status;\n        }\n      }\n      body = prettyJSONStringify(serializeGraphQLResponse(response));\n    }\n  } catch (error) {\n    if (error instanceof HttpQueryError) {\n      throw error;\n    }\n    return throwHttpGraphQLError(500, [error], options);\n  }\n  responseInit.headers['Content-Length'] = Buffer.byteLength(body, 'utf8').toString();\n  return {\n    graphqlResponse: body,\n    responseInit\n  };\n}\nexports.processHTTPRequest = processHTTPRequest;\nfunction parseGraphQLRequest(httpRequest, requestParams) {\n  let queryString = requestParams.query;\n  let extensions = requestParams.extensions;\n  if (typeof extensions === 'string' && extensions !== '') {\n    try {\n      extensions = JSON.parse(extensions);\n    } catch (error) {\n      throw new HttpQueryError(400, 'Extensions are invalid JSON.');\n    }\n  }\n  if (queryString && typeof queryString !== 'string') {\n    if (queryString.kind === 'Document') {\n      throw new HttpQueryError(400, \"GraphQL queries must be strings. It looks like you're sending the \" + 'internal graphql-js representation of a parsed query in your ' + 'request instead of a request in the GraphQL query language. You ' + 'can convert an AST to a string using the `print` function from ' + '`graphql`, or use a client like `apollo-client` which converts ' + 'the internal representation to a string for you.');\n    } else {\n      throw new HttpQueryError(400, 'GraphQL queries must be strings.');\n    }\n  }\n  const operationName = requestParams.operationName;\n  let variables = requestParams.variables;\n  if (typeof variables === 'string' && variables !== '') {\n    try {\n      variables = JSON.parse(variables);\n    } catch (error) {\n      throw new HttpQueryError(400, 'Variables are invalid JSON.');\n    }\n  }\n  return {\n    query: queryString,\n    operationName,\n    variables,\n    extensions,\n    http: httpRequest\n  };\n}\nconst checkOperationPlugin = {\n  async requestDidStart() {\n    return {\n      async didResolveOperation({\n        request,\n        operation\n      }) {\n        if (!request.http) return;\n        if (request.http.method === 'GET' && operation.operation !== 'query') {\n          throw new HttpQueryError(405, `GET supports only query operation`, false, {\n            Allow: 'POST'\n          });\n        }\n      }\n    };\n  }\n};\nfunction serializeGraphQLResponse(response) {\n  return {\n    errors: response.errors,\n    data: response.data,\n    extensions: response.extensions\n  };\n}\nfunction prettyJSONStringify(value) {\n  return JSON.stringify(value) + '\\n';\n}\nfunction cloneObject(object) {\n  return Object.assign(Object.create(Object.getPrototypeOf(object)), object);\n}\nexports.cloneObject = cloneObject;","map":{"version":3,"mappings":"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","names":["apollo_server_env_1","require","apollo_server_errors_1","whatwg_mimetype_1","__importDefault","cachePolicy_1","graphqlOptions_1","requestPipeline_1","HttpQueryError","Error","constructor","statusCode","message","isGraphQLError","headers","name","exports","isHttpQueryError","e","throwHttpGraphQLError","errors","options","extensions","allHeaders","value","result","formatApolloErrors","debug","formatter","formatError","prettyJSONStringify","NODE_ENV","_a","process","env","NON_PREFLIGHTED_CONTENT_TYPES","preventCsrf","csrfPreventionRequestHeaders","contentType","get","contentTypeParsed","default","parse","includes","essence","some","header","length","join","runHttpQuery","handlerArguments","request","debugFromNodeEnv","nodeEnv","resolveGraphqlOptions","undefined","context","code","config","schema","schemaHash","logger","rootValue","validationRules","executor","fieldResolver","cache","dataSources","documentStore","persistedQueries","formatResponse","plugins","allowBatchedHttpRequests","processHTTPRequest","httpRequest","requestPayload","method","query","Buffer","isBuffer","Object","keys","Allow","checkOperationPlugin","buildRequestContext","requestIsBatched","cloneObject","console","response","http","Headers","metrics","overallCachePolicy","newCachePolicy","responseInit","body","Array","isArray","requests","map","requestParams","parseGraphQLRequest","responses","Promise","all","requestContext","processGraphQLRequest","status","error","serializeGraphQLResponse","data","_b","byteLength","toString","graphqlResponse","queryString","JSON","kind","operationName","variables","requestDidStart","didResolveOperation","operation","stringify","object","assign","create","getPrototypeOf"],"sourceRoot":"","sources":["../src/runHttpQuery.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}