{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FEDERATION_VERSIONS = exports.FederationSpecDefinition = exports.FEDERATION1_DIRECTIVES = exports.FEDERATION1_TYPES = exports.FederationDirectiveName = exports.FederationTypeName = exports.federationIdentity = void 0;\nconst definitions_1 = require(\"./definitions\");\nconst coreSpec_1 = require(\"./coreSpec\");\nconst directiveAndTypeSpecification_1 = require(\"./directiveAndTypeSpecification\");\nconst graphql_1 = require(\"graphql\");\nconst utils_1 = require(\"./utils\");\nconst tagSpec_1 = require(\"./tagSpec\");\nconst federation_1 = require(\"./federation\");\nconst knownCoreFeatures_1 = require(\"./knownCoreFeatures\");\nconst inaccessibleSpec_1 = require(\"./inaccessibleSpec\");\nconst authenticatedSpec_1 = require(\"./authenticatedSpec\");\nconst requiresScopesSpec_1 = require(\"./requiresScopesSpec\");\nexports.federationIdentity = 'https://specs.apollo.dev/federation';\nvar FederationTypeName;\n(function (FederationTypeName) {\n  FederationTypeName[\"FIELD_SET\"] = \"FieldSet\";\n})(FederationTypeName || (exports.FederationTypeName = FederationTypeName = {}));\nvar FederationDirectiveName;\n(function (FederationDirectiveName) {\n  FederationDirectiveName[\"KEY\"] = \"key\";\n  FederationDirectiveName[\"EXTERNAL\"] = \"external\";\n  FederationDirectiveName[\"REQUIRES\"] = \"requires\";\n  FederationDirectiveName[\"PROVIDES\"] = \"provides\";\n  FederationDirectiveName[\"EXTENDS\"] = \"extends\";\n  FederationDirectiveName[\"SHAREABLE\"] = \"shareable\";\n  FederationDirectiveName[\"OVERRIDE\"] = \"override\";\n  FederationDirectiveName[\"TAG\"] = \"tag\";\n  FederationDirectiveName[\"INACCESSIBLE\"] = \"inaccessible\";\n  FederationDirectiveName[\"COMPOSE_DIRECTIVE\"] = \"composeDirective\";\n  FederationDirectiveName[\"INTERFACE_OBJECT\"] = \"interfaceObject\";\n  FederationDirectiveName[\"AUTHENTICATED\"] = \"authenticated\";\n  FederationDirectiveName[\"REQUIRES_SCOPES\"] = \"requiresScopes\";\n})(FederationDirectiveName || (exports.FederationDirectiveName = FederationDirectiveName = {}));\nconst fieldSetTypeSpec = (0, directiveAndTypeSpecification_1.createScalarTypeSpecification)({\n  name: FederationTypeName.FIELD_SET\n});\nconst fieldsArgument = {\n  name: 'fields',\n  type: schema => fieldSetType(schema)\n};\nconst keyDirectiveSpec = (0, directiveAndTypeSpecification_1.createDirectiveSpecification)({\n  name: FederationDirectiveName.KEY,\n  locations: [graphql_1.DirectiveLocation.OBJECT, graphql_1.DirectiveLocation.INTERFACE],\n  repeatable: true,\n  args: [fieldsArgument, {\n    name: 'resolvable',\n    type: schema => schema.booleanType(),\n    defaultValue: true\n  }]\n});\nconst extendsDirectiveSpec = (0, directiveAndTypeSpecification_1.createDirectiveSpecification)({\n  name: FederationDirectiveName.EXTENDS,\n  locations: [graphql_1.DirectiveLocation.OBJECT, graphql_1.DirectiveLocation.INTERFACE]\n});\nconst externalDirectiveSpec = (0, directiveAndTypeSpecification_1.createDirectiveSpecification)({\n  name: FederationDirectiveName.EXTERNAL,\n  locations: [graphql_1.DirectiveLocation.OBJECT, graphql_1.DirectiveLocation.FIELD_DEFINITION],\n  args: [{\n    name: 'reason',\n    type: schema => schema.stringType()\n  }]\n});\nconst requiresDirectiveSpec = (0, directiveAndTypeSpecification_1.createDirectiveSpecification)({\n  name: FederationDirectiveName.REQUIRES,\n  locations: [graphql_1.DirectiveLocation.FIELD_DEFINITION],\n  args: [fieldsArgument]\n});\nconst providesDirectiveSpec = (0, directiveAndTypeSpecification_1.createDirectiveSpecification)({\n  name: FederationDirectiveName.PROVIDES,\n  locations: [graphql_1.DirectiveLocation.FIELD_DEFINITION],\n  args: [fieldsArgument]\n});\nconst legacyFederationTypes = [fieldSetTypeSpec];\nconst legacyFederationDirectives = [keyDirectiveSpec, requiresDirectiveSpec, providesDirectiveSpec, externalDirectiveSpec, tagSpec_1.TAG_VERSIONS.find(new coreSpec_1.FeatureVersion(0, 2)).tagDirectiveSpec, extendsDirectiveSpec];\nexports.FEDERATION1_TYPES = legacyFederationTypes;\nexports.FEDERATION1_DIRECTIVES = legacyFederationDirectives;\nfunction fieldSetType(schema) {\n  const metadata = (0, federation_1.federationMetadata)(schema);\n  (0, utils_1.assert)(metadata, `The schema is not a federation subgraph`);\n  return new definitions_1.NonNullType(metadata.fieldSetType());\n}\nclass FederationSpecDefinition extends coreSpec_1.FeatureDefinition {\n  constructor(version) {\n    super(new coreSpec_1.FeatureUrl(exports.federationIdentity, 'federation', version));\n    for (const type of legacyFederationTypes) {\n      this.registerType(type);\n    }\n    for (const directive of legacyFederationDirectives) {\n      this.registerDirective(directive);\n    }\n    this.registerDirective((0, directiveAndTypeSpecification_1.createDirectiveSpecification)({\n      name: FederationDirectiveName.SHAREABLE,\n      locations: [graphql_1.DirectiveLocation.OBJECT, graphql_1.DirectiveLocation.FIELD_DEFINITION],\n      repeatable: version >= new coreSpec_1.FeatureVersion(2, 2)\n    }));\n    this.registerSubFeature(inaccessibleSpec_1.INACCESSIBLE_VERSIONS.getMinimumRequiredVersion(version));\n    this.registerDirective((0, directiveAndTypeSpecification_1.createDirectiveSpecification)({\n      name: FederationDirectiveName.OVERRIDE,\n      locations: [graphql_1.DirectiveLocation.FIELD_DEFINITION],\n      args: [{\n        name: 'from',\n        type: schema => new definitions_1.NonNullType(schema.stringType())\n      }]\n    }));\n    if (version >= new coreSpec_1.FeatureVersion(2, 1)) {\n      this.registerDirective((0, directiveAndTypeSpecification_1.createDirectiveSpecification)({\n        name: FederationDirectiveName.COMPOSE_DIRECTIVE,\n        locations: [graphql_1.DirectiveLocation.SCHEMA],\n        repeatable: true,\n        args: [{\n          name: 'name',\n          type: schema => schema.stringType()\n        }]\n      }));\n    }\n    if (version >= new coreSpec_1.FeatureVersion(2, 3)) {\n      this.registerDirective((0, directiveAndTypeSpecification_1.createDirectiveSpecification)({\n        name: FederationDirectiveName.INTERFACE_OBJECT,\n        locations: [graphql_1.DirectiveLocation.OBJECT]\n      }));\n      this.registerSubFeature(tagSpec_1.TAG_VERSIONS.find(new coreSpec_1.FeatureVersion(0, 3)));\n    }\n    if (version >= new coreSpec_1.FeatureVersion(2, 5)) {\n      this.registerSubFeature(authenticatedSpec_1.AUTHENTICATED_VERSIONS.find(new coreSpec_1.FeatureVersion(0, 1)));\n      this.registerSubFeature(requiresScopesSpec_1.REQUIRES_SCOPES_VERSIONS.find(new coreSpec_1.FeatureVersion(0, 1)));\n    }\n  }\n}\nexports.FederationSpecDefinition = FederationSpecDefinition;\nexports.FEDERATION_VERSIONS = new coreSpec_1.FeatureDefinitions(exports.federationIdentity).add(new FederationSpecDefinition(new coreSpec_1.FeatureVersion(2, 0))).add(new FederationSpecDefinition(new coreSpec_1.FeatureVersion(2, 1))).add(new FederationSpecDefinition(new coreSpec_1.FeatureVersion(2, 2))).add(new FederationSpecDefinition(new coreSpec_1.FeatureVersion(2, 3))).add(new FederationSpecDefinition(new coreSpec_1.FeatureVersion(2, 4))).add(new FederationSpecDefinition(new coreSpec_1.FeatureVersion(2, 5)));\n(0, knownCoreFeatures_1.registerKnownFeature)(exports.FEDERATION_VERSIONS);","map":{"version":3,"mappings":"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","names":["definitions_1","require","coreSpec_1","directiveAndTypeSpecification_1","graphql_1","utils_1","tagSpec_1","federation_1","knownCoreFeatures_1","inaccessibleSpec_1","authenticatedSpec_1","requiresScopesSpec_1","exports","federationIdentity","FederationTypeName","FederationDirectiveName","fieldSetTypeSpec","createScalarTypeSpecification","name","FIELD_SET","fieldsArgument","type","schema","fieldSetType","keyDirectiveSpec","createDirectiveSpecification","KEY","locations","DirectiveLocation","OBJECT","INTERFACE","repeatable","args","booleanType","defaultValue","extendsDirectiveSpec","EXTENDS","externalDirectiveSpec","EXTERNAL","FIELD_DEFINITION","stringType","requiresDirectiveSpec","REQUIRES","providesDirectiveSpec","PROVIDES","legacyFederationTypes","legacyFederationDirectives","TAG_VERSIONS","find","FeatureVersion","tagDirectiveSpec","FEDERATION1_TYPES","FEDERATION1_DIRECTIVES","metadata","federationMetadata","assert","NonNullType","FederationSpecDefinition","FeatureDefinition","constructor","version","FeatureUrl","registerType","directive","registerDirective","SHAREABLE","registerSubFeature","INACCESSIBLE_VERSIONS","getMinimumRequiredVersion","OVERRIDE","COMPOSE_DIRECTIVE","SCHEMA","INTERFACE_OBJECT","AUTHENTICATED_VERSIONS","REQUIRES_SCOPES_VERSIONS","FEDERATION_VERSIONS","FeatureDefinitions","add","registerKnownFeature"],"sourceRoot":"","sources":["../src/federationSpec.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}