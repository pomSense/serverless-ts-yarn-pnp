{"ast":null,"code":"\"use strict\";\n\nconst url = require('url');\nfunction getPathWithQueryStringParams({\n  event,\n  query = event.multiValueQueryStringParameters,\n  // NOTE: Use `event.pathParameters.proxy` if available ({proxy+}); fall back to `event.path`\n  path = event.pathParameters && event.pathParameters.proxy && `/${event.pathParameters.proxy}` || event.path,\n  // NOTE: Strip base path for custom domains\n  stripBasePath = '',\n  replaceRegex = new RegExp(`^${stripBasePath}`)\n}) {\n  return url.format({\n    pathname: path.replace(replaceRegex, ''),\n    query\n  });\n}\nfunction getEventBody({\n  event,\n  body = event.body,\n  isBase64Encoded = event.isBase64Encoded\n}) {\n  return Buffer.from(body, isBase64Encoded ? 'base64' : 'utf8');\n}\nfunction getRequestValuesFromEvent({\n  event,\n  method = event.httpMethod,\n  path = getPathWithQueryStringParams({\n    event\n  })\n}) {\n  let headers = {};\n  if (event.multiValueHeaders) {\n    headers = getCommaDelimitedHeaders({\n      headersMap: event.multiValueHeaders,\n      lowerCaseKey: true\n    });\n  } else if (event.headers) {\n    headers = event.headers;\n  }\n  let body;\n  if (event.body) {\n    body = getEventBody({\n      event\n    });\n    const {\n      isBase64Encoded\n    } = event;\n    headers['content-length'] = Buffer.byteLength(body, isBase64Encoded ? 'base64' : 'utf8');\n  }\n  const remoteAddress = event && event.requestContext && event.requestContext.identity && event.requestContext.identity.sourceIp || '';\n  return {\n    method,\n    headers,\n    body,\n    remoteAddress,\n    path\n  };\n}\nfunction getMultiValueHeaders({\n  headers\n}) {\n  const multiValueHeaders = {};\n  Object.entries(headers).forEach(([headerKey, headerValue]) => {\n    const headerArray = Array.isArray(headerValue) ? headerValue.map(String) : [String(headerValue)];\n    multiValueHeaders[headerKey.toLowerCase()] = headerArray;\n  });\n  return multiValueHeaders;\n}\nfunction getEventSourceNameBasedOnEvent({\n  event\n}) {\n  if (event.requestContext && event.requestContext.elb) return 'AWS_ALB';\n  if (event.Records) {\n    const eventSource = event.Records[0] ? event.Records[0].EventSource || event.Records[0].eventSource : undefined;\n    if (eventSource === 'aws:sns') {\n      return 'AWS_SNS';\n    }\n    if (eventSource === 'aws:dynamodb') {\n      return 'AWS_DYNAMODB';\n    }\n    if (eventSource === 'aws:sqs') {\n      return 'AWS_SQS';\n    }\n    if (eventSource === 'aws:kinesis') {\n      return 'AWS_KINESIS_DATA_STREAM';\n    }\n    return 'AWS_LAMBDA_EDGE';\n  }\n  if (event.requestContext) {\n    return event.version === '2.0' ? 'AWS_API_GATEWAY_V2' : 'AWS_API_GATEWAY_V1';\n  }\n  if (event.traceContext) {\n    const functionsExtensionVersion = process.env.FUNCTIONS_EXTENSION_VERSION;\n    if (!functionsExtensionVersion) {\n      console.warn('The environment variable \\'FUNCTIONS_EXTENSION_VERSION\\' is not set. Only the function runtime \\'~3\\' is supported.');\n    } else if (functionsExtensionVersion === '~3') {\n      return 'AZURE_HTTP_FUNCTION_V3';\n    } else if (functionsExtensionVersion === '~4') {\n      return 'AZURE_HTTP_FUNCTION_V4';\n    } else {\n      console.warn('The function runtime \\'' + functionsExtensionVersion + '\\' is not supported. Only \\'~3\\' and \\'~4\\' are supported.');\n    }\n  }\n  if (event.version && event.version === '0' && event.id && event['detail-type'] && event.source && event.source.startsWith('aws.') &&\n  // Might need to adjust this for \"Partner Sources\", e.g. Auth0, Datadog, etc\n  event.account && event.time && event.region && event.resources && Array.isArray(event.resources) && event.detail && typeof event.detail === 'object' && !Array.isArray(event.detail)) {\n    // AWS doesn't have a defining Event Source here, so we're being incredibly selective on the structure\n    // Ref: https://docs.aws.amazon.com/lambda/latest/dg/services-cloudwatchevents.html\n    return 'AWS_EVENTBRIDGE';\n  }\n  throw new Error('Unable to determine event source based on event.');\n}\nfunction getCommaDelimitedHeaders({\n  headersMap,\n  separator = ',',\n  lowerCaseKey = false\n}) {\n  const commaDelimitedHeaders = {};\n  Object.entries(headersMap).forEach(([headerKey, headerValue]) => {\n    const newKey = lowerCaseKey ? headerKey.toLowerCase() : headerKey;\n    if (Array.isArray(headerValue)) {\n      commaDelimitedHeaders[newKey] = headerValue.join(separator);\n    } else {\n      commaDelimitedHeaders[newKey] = headerValue;\n    }\n  });\n  return commaDelimitedHeaders;\n}\nconst emptyResponseMapper = () => {};\nconst parseCookie = str => str.split(';').map(v => v.split('=')).reduce((acc, v) => {\n  if (!v[1]) {\n    return acc;\n  }\n  acc[decodeURIComponent(v[0].trim().toLowerCase())] = decodeURIComponent(v[1].trim());\n  return acc;\n}, {});\nmodule.exports = {\n  getPathWithQueryStringParams,\n  getRequestValuesFromEvent,\n  getMultiValueHeaders,\n  getEventSourceNameBasedOnEvent,\n  getEventBody,\n  getCommaDelimitedHeaders,\n  emptyResponseMapper,\n  parseCookie\n};","map":{"version":3,"names":["url","require","getPathWithQueryStringParams","event","query","multiValueQueryStringParameters","path","pathParameters","proxy","stripBasePath","replaceRegex","RegExp","format","pathname","replace","getEventBody","body","isBase64Encoded","Buffer","from","getRequestValuesFromEvent","method","httpMethod","headers","multiValueHeaders","getCommaDelimitedHeaders","headersMap","lowerCaseKey","byteLength","remoteAddress","requestContext","identity","sourceIp","getMultiValueHeaders","Object","entries","forEach","headerKey","headerValue","headerArray","Array","isArray","map","String","toLowerCase","getEventSourceNameBasedOnEvent","elb","Records","eventSource","EventSource","undefined","version","traceContext","functionsExtensionVersion","process","env","FUNCTIONS_EXTENSION_VERSION","console","warn","id","source","startsWith","account","time","region","resources","detail","Error","separator","commaDelimitedHeaders","newKey","join","emptyResponseMapper","parseCookie","str","split","v","reduce","acc","decodeURIComponent","trim","module","exports"],"sources":["/Users/pom/Code/serverless-ts-yarn-pnp/.yarn/cache/@vendia-serverless-express-npm-4.10.4-2e67e59920-f33d3f0f08.zip/node_modules/@vendia/serverless-express/src/event-sources/utils.js"],"sourcesContent":["const url = require('url')\n\nfunction getPathWithQueryStringParams ({\n  event,\n  query = event.multiValueQueryStringParameters,\n  // NOTE: Use `event.pathParameters.proxy` if available ({proxy+}); fall back to `event.path`\n  path = (event.pathParameters && event.pathParameters.proxy && `/${event.pathParameters.proxy}`) || event.path,\n  // NOTE: Strip base path for custom domains\n  stripBasePath = '',\n  replaceRegex = new RegExp(`^${stripBasePath}`)\n}) {\n  return url.format({\n    pathname: path.replace(replaceRegex, ''),\n    query\n  })\n}\n\nfunction getEventBody ({\n  event,\n  body = event.body,\n  isBase64Encoded = event.isBase64Encoded\n}) {\n  return Buffer.from(body, isBase64Encoded ? 'base64' : 'utf8')\n}\n\nfunction getRequestValuesFromEvent ({\n  event,\n  method = event.httpMethod,\n  path = getPathWithQueryStringParams({ event })\n}) {\n  let headers = {}\n\n  if (event.multiValueHeaders) {\n    headers = getCommaDelimitedHeaders({ headersMap: event.multiValueHeaders, lowerCaseKey: true })\n  } else if (event.headers) {\n    headers = event.headers\n  }\n\n  let body\n\n  if (event.body) {\n    body = getEventBody({ event })\n    const { isBase64Encoded } = event\n    headers['content-length'] = Buffer.byteLength(body, isBase64Encoded ? 'base64' : 'utf8')\n  }\n\n  const remoteAddress = (event && event.requestContext && event.requestContext.identity && event.requestContext.identity.sourceIp) || ''\n\n  return {\n    method,\n    headers,\n    body,\n    remoteAddress,\n    path\n  }\n}\n\nfunction getMultiValueHeaders ({ headers }) {\n  const multiValueHeaders = {}\n\n  Object.entries(headers).forEach(([headerKey, headerValue]) => {\n    const headerArray = Array.isArray(headerValue) ? headerValue.map(String) : [String(headerValue)]\n\n    multiValueHeaders[headerKey.toLowerCase()] = headerArray\n  })\n\n  return multiValueHeaders\n}\n\nfunction getEventSourceNameBasedOnEvent ({\n  event\n}) {\n  if (event.requestContext && event.requestContext.elb) return 'AWS_ALB'\n  if (event.Records) {\n    const eventSource = event.Records[0] ? event.Records[0].EventSource || event.Records[0].eventSource : undefined\n    if (eventSource === 'aws:sns') {\n      return 'AWS_SNS'\n    }\n    if (eventSource === 'aws:dynamodb') {\n      return 'AWS_DYNAMODB'\n    }\n    if (eventSource === 'aws:sqs') {\n      return 'AWS_SQS'\n    }\n    if (eventSource === 'aws:kinesis') {\n      return 'AWS_KINESIS_DATA_STREAM'\n    }\n    return 'AWS_LAMBDA_EDGE'\n  }\n  if (event.requestContext) {\n    return event.version === '2.0' ? 'AWS_API_GATEWAY_V2' : 'AWS_API_GATEWAY_V1'\n  }\n  if (event.traceContext) {\n    const functionsExtensionVersion = process.env.FUNCTIONS_EXTENSION_VERSION\n\n    if (!functionsExtensionVersion) {\n      console.warn('The environment variable \\'FUNCTIONS_EXTENSION_VERSION\\' is not set. Only the function runtime \\'~3\\' is supported.')\n    } else if (functionsExtensionVersion === '~3') {\n      return 'AZURE_HTTP_FUNCTION_V3'\n    } else if (functionsExtensionVersion === '~4') {\n      return 'AZURE_HTTP_FUNCTION_V4'\n    } else {\n      console.warn('The function runtime \\'' + functionsExtensionVersion + '\\' is not supported. Only \\'~3\\' and \\'~4\\' are supported.')\n    }\n  }\n  if (\n    event.version &&\n    event.version === '0' &&\n    event.id &&\n    event['detail-type'] &&\n    event.source &&\n    event.source.startsWith('aws.') && // Might need to adjust this for \"Partner Sources\", e.g. Auth0, Datadog, etc\n    event.account &&\n    event.time &&\n    event.region &&\n    event.resources &&\n    Array.isArray(event.resources) &&\n    event.detail &&\n    typeof event.detail === 'object' &&\n    !Array.isArray(event.detail)\n  ) {\n    // AWS doesn't have a defining Event Source here, so we're being incredibly selective on the structure\n    // Ref: https://docs.aws.amazon.com/lambda/latest/dg/services-cloudwatchevents.html\n    return 'AWS_EVENTBRIDGE'\n  }\n\n  throw new Error('Unable to determine event source based on event.')\n}\n\nfunction getCommaDelimitedHeaders ({ headersMap, separator = ',', lowerCaseKey = false }) {\n  const commaDelimitedHeaders = {}\n\n  Object.entries(headersMap)\n    .forEach(([headerKey, headerValue]) => {\n      const newKey = lowerCaseKey ? headerKey.toLowerCase() : headerKey\n      if (Array.isArray(headerValue)) {\n        commaDelimitedHeaders[newKey] = headerValue.join(separator)\n      } else {\n        commaDelimitedHeaders[newKey] = headerValue\n      }\n    })\n\n  return commaDelimitedHeaders\n}\n\nconst emptyResponseMapper = () => {}\n\nconst parseCookie = (str) =>\n  str.split(';')\n    .map((v) => v.split('='))\n    .reduce((acc, v) => {\n      if (!v[1]) {\n        return acc\n      }\n      acc[decodeURIComponent(v[0].trim().toLowerCase())] = decodeURIComponent(v[1].trim())\n      return acc\n    }, {})\n\nmodule.exports = {\n  getPathWithQueryStringParams,\n  getRequestValuesFromEvent,\n  getMultiValueHeaders,\n  getEventSourceNameBasedOnEvent,\n  getEventBody,\n  getCommaDelimitedHeaders,\n  emptyResponseMapper,\n  parseCookie\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}