{"ast":null,"code":"\"use strict\";\n\nvar _subgraph = require(\"@apollo/subgraph\");\nvar _apolloServerCore = require(\"apollo-server-core\");\nvar _apolloServerLambda = require(\"apollo-server-lambda\");\nvar _express = require(\"express\");\nvar _express2 = _interopRequireDefault(_express);\nvar _graphqlMiddleware = require(\"graphql-middleware\");\nvar _resolvers = require(\"./graphql/resolvers\");\nvar _schema = require(\"./graphql/schema\");\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nconsole.log('Loading function1');\nconsole.log('Loading function2');\nconsole.log('Loading function3');\n// import { graphqlUploadExpress } from 'graphql-upload'\n//import { permissions } from './graphql/permission'\nconsole.log('Loading function4');\nconsole.log('Loading function5');\nconsole.log('Loading function6');\nconst typeDefs = _apolloServerLambda.gql`\n  ${_schema.Schema}\n`;\nconst rawSchema = (0, _subgraph.buildSubgraphSchema)([{\n  typeDefs,\n  resolvers: _resolvers.resolvers\n}]);\n// Apply permissions middleware with applyMiddleware\n// Giving any schema (instance of GraphQLSchema)\n\n//const schema = applyMiddleware(rawSchema, permissions)\nconst schema = (0, _graphqlMiddleware.applyMiddleware)(rawSchema);\nconst server = new _apolloServerLambda.ApolloServer({\n  schema,\n  introspection: process.env.ENV_STAGE === 'dev',\n  context: ({\n    event\n  }) => {\n    var _event$requestContext, _event$requestContext2;\n    const {\n      userID = '',\n      workspaceID = ''\n    } = (event === null || event === void 0 ? void 0 : (_event$requestContext = event.requestContext) === null || _event$requestContext === void 0 ? void 0 : _event$requestContext.authorizer) || {};\n    // add the user and workspace details to the context\n    return {\n      headers: event.headers,\n      event,\n      metadata: {\n        userID,\n        workspaceID\n      },\n      authorizer: event === null || event === void 0 ? void 0 : (_event$requestContext2 = event.requestContext) === null || _event$requestContext2 === void 0 ? void 0 : _event$requestContext2.authorizer\n    };\n  },\n  plugins: [(0, _apolloServerCore.ApolloServerPluginLandingPageGraphQLPlayground)({\n    settings: {\n      'schema.polling.enable': false\n    }\n  })]\n});\n\n/**\n * apollo-server-lambda uses apollo-server-express under the hood\n * {@link https://github.com/apollographql/apollo-server/blob/main/packages/apollo-server-lambda/src/ApolloServer.ts}\n */\nconst options = {\n  expressGetMiddlewareOptions: {\n    cors: {\n      origin: '*',\n      methods: 'POST',\n      allowedHeaders: ['Content-Type', 'Origin', 'Accept']\n    }\n  },\n  expressAppFromMiddleware(middleware) {\n    const app = (0, _express2.default)();\n    // app.use(graphqlUploadExpress())\n    app.use(middleware);\n    return app;\n  }\n};\nexports.handler = server.createHandler(options);","map":{"version":3,"names":["_subgraph","require","_apolloServerCore","_apolloServerLambda","_express","_express2","_interopRequireDefault","_graphqlMiddleware","_resolvers","_schema","obj","__esModule","default","console","log","typeDefs","gql","Schema","rawSchema","buildSubgraphSchema","resolvers","schema","applyMiddleware","server","ApolloServer","introspection","process","env","ENV_STAGE","context","event","_event$requestContext","_event$requestContext2","userID","workspaceID","requestContext","authorizer","headers","metadata","plugins","ApolloServerPluginLandingPageGraphQLPlayground","settings","options","expressGetMiddlewareOptions","cors","origin","methods","allowedHeaders","expressAppFromMiddleware","middleware","app","express","use","exports","handler","createHandler"],"sources":["/Users/pom/Code/serverless-ts-yarn-pnp/src/infra/server.ts"],"sourcesContent":["console.log('Loading function1')\n\nimport { buildSubgraphSchema } from '@apollo/subgraph'\nconsole.log('Loading function2')\nimport { ApolloServerPluginLandingPageGraphQLPlayground } from 'apollo-server-core'\nimport { ApolloServer, CreateHandlerOptions, gql } from 'apollo-server-lambda'\nimport { APIGatewayEvent } from 'aws-lambda'\nconsole.log('Loading function3')\nimport express from 'express'\nimport { applyMiddleware } from 'graphql-middleware'\n\n// import { graphqlUploadExpress } from 'graphql-upload'\n//import { permissions } from './graphql/permission'\nconsole.log('Loading function4')\nimport { resolvers } from './graphql/resolvers'\nconsole.log('Loading function5')\nimport { Schema } from './graphql/schema'\nconsole.log('Loading function6')\nexport interface Context {\n  headers: { authorization: string; Authorization: string }\n  metadata: { userID: string; workspaceID: string }\n  context: unknown\n  event: APIGatewayEvent\n}\n\nconst typeDefs = gql`\n  ${Schema}\n`\nconst rawSchema = buildSubgraphSchema([{ typeDefs, resolvers }])\n// Apply permissions middleware with applyMiddleware\n// Giving any schema (instance of GraphQLSchema)\n\n//const schema = applyMiddleware(rawSchema, permissions)\nconst schema = applyMiddleware(rawSchema)\nconst server = new ApolloServer({\n  schema,\n  introspection: process.env.ENV_STAGE === 'dev',\n  context: ({ event }) => {\n    const { userID = '', workspaceID = '' } = event?.requestContext?.authorizer || {}\n    // add the user and workspace details to the context\n    return {\n      headers: event.headers,\n      event,\n      metadata: { userID, workspaceID },\n      authorizer: event?.requestContext?.authorizer\n    }\n  },\n\n  plugins: [ApolloServerPluginLandingPageGraphQLPlayground({ settings: { 'schema.polling.enable': false } })]\n})\n\n/**\n * apollo-server-lambda uses apollo-server-express under the hood\n * {@link https://github.com/apollographql/apollo-server/blob/main/packages/apollo-server-lambda/src/ApolloServer.ts}\n */\nconst options: CreateHandlerOptions = {\n  expressGetMiddlewareOptions: {\n    cors: {\n      origin: '*',\n      methods: 'POST',\n      allowedHeaders: ['Content-Type', 'Origin', 'Accept']\n    }\n  },\n  expressAppFromMiddleware(middleware) {\n    const app = express()\n    // app.use(graphqlUploadExpress())\n    app.use(middleware)\n    return app\n  }\n}\n\nexports.handler = server.createHandler(options)\n"],"mappings":";;AAEA,IAAAA,SAAA,GAAAC,OAAA;AAEA,IAAAC,iBAAA,GAAAD,OAAA;AACA,IAAAE,mBAAA,GAAAF,OAAA;AAGA,IAAAG,QAAA,GAAAH,OAAA;AAA6B,IAAAI,SAAA,GAAAC,sBAAA,CAAAF,QAAA;AAC7B,IAAAG,kBAAA,GAAAN,OAAA;AAKA,IAAAO,UAAA,GAAAP,OAAA;AAEA,IAAAQ,OAAA,GAAAR,OAAA;AAAyC,SAAAK,uBAAAI,GAAA,WAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA,KAAAE,OAAA,EAAAF,GAAA;AAhBzCG,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;AAGhCD,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;AAIhCD,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;AAIhC;AACA;AACAD,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;AAEhCD,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;AAEhCD,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;AAQhC,MAAMC,QAAQ,GAAGC,uBAAI;AACrB,IAAIC,cAAO;AACX,CAAC;AACD,MAAMC,SAAS,GAAG,IAAAC,6BAAmB,EAAC,CAAC;EAAEJ,QAAQ;EAAEK,SAAS,EAATA;AAAU,CAAC,CAAC,CAAC;AAChE;AACA;;AAEA;AACA,MAAMC,MAAM,GAAG,IAAAC,kCAAe,EAACJ,SAAS,CAAC;AACzC,MAAMK,MAAM,GAAG,IAAIC,gCAAY,CAAC;EAC9BH,MAAM;EACNI,aAAa,EAAEC,OAAO,CAACC,GAAG,CAACC,SAAS,KAAK,KAAK;EAC9CC,OAAO,EAAEA,CAAC;IAAEC;EAAM,CAAC,KAAK;IAAA,IAAAC,qBAAA,EAAAC,sBAAA;IACtB,MAAM;MAAEC,MAAM,GAAG,EAAE;MAAEC,WAAW,GAAG;IAAG,CAAC,GAAG,CAAAJ,KAAK,aAALA,KAAK,wBAAAC,qBAAA,GAALD,KAAK,CAAEK,cAAc,cAAAJ,qBAAA,uBAArBA,qBAAA,CAAuBK,UAAU,KAAI,CAAC,CAAC;IACjF;IACA,OAAO;MACLC,OAAO,EAAEP,KAAK,CAACO,OAAO;MACtBP,KAAK;MACLQ,QAAQ,EAAE;QAAEL,MAAM;QAAEC;MAAY,CAAC;MACjCE,UAAU,EAAEN,KAAK,aAALA,KAAK,wBAAAE,sBAAA,GAALF,KAAK,CAAEK,cAAc,cAAAH,sBAAA,uBAArBA,sBAAA,CAAuBI;IACrC,CAAC;EACH,CAAC;EAEDG,OAAO,EAAE,CAAC,IAAAC,gEAA8C,EAAC;IAAEC,QAAQ,EAAE;MAAE,uBAAuB,EAAE;IAAM;EAAE,CAAC,CAAC;AAC5G,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA,MAAMC,OAA6B,GAAG;EACpCC,2BAA2B,EAAE;IAC3BC,IAAI,EAAE;MACJC,MAAM,EAAE,GAAG;MACXC,OAAO,EAAE,MAAM;MACfC,cAAc,EAAE,CAAC,cAAc,EAAE,QAAQ,EAAE,QAAQ;IACrD;EACF,CAAC;EACDC,wBAAwBA,CAACC,UAAU,EAAE;IACnC,MAAMC,GAAG,GAAG,IAAAC,iBAAO,EAAC,CAAC;IACrB;IACAD,GAAG,CAACE,GAAG,CAACH,UAAU,CAAC;IACnB,OAAOC,GAAG;EACZ;AACF,CAAC;AAEDG,OAAO,CAACC,OAAO,GAAG/B,MAAM,CAACgC,aAAa,CAACb,OAAO,CAAC"},"metadata":{},"sourceType":"module"}