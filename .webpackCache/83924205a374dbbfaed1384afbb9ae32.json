{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.computeShareables = void 0;\nconst _1 = require(\".\");\nfunction computeShareables(schema) {\n  const metadata = (0, _1.federationMetadata)(schema);\n  (0, _1.assert)(metadata, 'Schema should be a federation subgraph');\n  const keyDirective = metadata.keyDirective();\n  const providesDirective = metadata.providesDirective();\n  const shareableDirective = metadata.isFed2Schema() ? metadata.shareableDirective() : undefined;\n  const shareableFields = new Set();\n  const addKeyFields = type => {\n    for (const key of type.appliedDirectivesOf(keyDirective)) {\n      (0, _1.collectTargetFields)({\n        parentType: type,\n        directive: key,\n        includeInterfaceFieldsImplementations: true,\n        validate: false\n      }).forEach(f => shareableFields.add(f.coordinate));\n    }\n  };\n  for (const type of schema.objectTypes()) {\n    addKeyFields(type);\n    const shareablesOnType = shareableDirective ? type.appliedDirectivesOf(shareableDirective) : [];\n    for (const field of type.fields()) {\n      const fieldIsShareable = shareableDirective && field.hasAppliedDirective(shareableDirective) || shareablesOnType.length > 0 && shareablesOnType.some(d => field.ofExtension() === d.ofExtension());\n      if (fieldIsShareable) {\n        shareableFields.add(field.coordinate);\n      }\n      for (const provides of field.appliedDirectivesOf(providesDirective)) {\n        const parentType = (0, _1.baseType)(field.type);\n        if ((0, _1.isCompositeType)(parentType)) {\n          (0, _1.collectTargetFields)({\n            parentType,\n            directive: provides,\n            includeInterfaceFieldsImplementations: true,\n            validate: false\n          }).forEach(f => {\n            if (metadata.isFieldExternal(f)) {\n              shareableFields.add(f.coordinate);\n            }\n          });\n        }\n      }\n    }\n  }\n  for (const type of schema.interfaceTypes()) {\n    addKeyFields(type);\n  }\n  return field => shareableFields.has(field.coordinate);\n}\nexports.computeShareables = computeShareables;","map":{"version":3,"mappings":";;;;;;AAAA,MAAAA,EAAA,GAAAC,OAAA;AAWA,SAAgBC,iBAAiBA,CAACC,MAAc;EAC9C,MAAMC,QAAQ,GAAG,IAAAJ,EAAA,CAAAK,kBAAkB,EAACF,MAAM,CAAC;EAC3C,IAAAH,EAAA,CAAAM,MAAM,EAACF,QAAQ,EAAE,wCAAwC,CAAC;EAE1D,MAAMG,YAAY,GAAGH,QAAQ,CAACG,YAAY,EAAE;EAC5C,MAAMC,iBAAiB,GAAGJ,QAAQ,CAACI,iBAAiB,EAAE;EAItD,MAAMC,kBAAkB,GAAGL,QAAQ,CAACM,YAAY,EAAE,GAAGN,QAAQ,CAACK,kBAAkB,EAAE,GAAGE,SAAS;EAE9F,MAAMC,eAAe,GAAgB,IAAIC,GAAG,EAAE;EAC9C,MAAMC,YAAY,GAAIC,IAAmB,IAAI;IAC3C,KAAK,MAAMC,GAAG,IAAID,IAAI,CAACE,mBAAmB,CAACV,YAAY,CAAC,EAAE;MACxD,IAAAP,EAAA,CAAAkB,mBAAmB,EAAC;QAClBC,UAAU,EAAEJ,IAAI;QAChBK,SAAS,EAAEJ,GAAG;QACdK,qCAAqC,EAAE,IAAI;QAC3CC,QAAQ,EAAE;OACX,CAAC,CAACC,OAAO,CAAEC,CAAC,IAAKZ,eAAe,CAACa,GAAG,CAACD,CAAC,CAACE,UAAU,CAAC,CAAC;;EAExD,CAAC;EAED,KAAK,MAAMX,IAAI,IAAIZ,MAAM,CAACwB,WAAW,EAAE,EAAE;IACvCb,YAAY,CAACC,IAAI,CAAC;IAClB,MAAMa,gBAAgB,GAAGnB,kBAAkB,GAAGM,IAAI,CAACE,mBAAmB,CAACR,kBAAkB,CAAC,GAAG,EAAE;IAC/F,KAAK,MAAMoB,KAAK,IAAId,IAAI,CAACe,MAAM,EAAE,EAAE;MACjC,MAAMC,gBAAgB,GAAGtB,kBAAkB,IAAIoB,KAAK,CAACG,mBAAmB,CAACvB,kBAAkB,CAAC,IACtFmB,gBAAgB,CAACK,MAAM,GAAG,CAAC,IAAIL,gBAAgB,CAACM,IAAI,CAAEC,CAAC,IAAKN,KAAK,CAACO,WAAW,EAAE,KAAKD,CAAC,CAACC,WAAW,EAAE,CAAE;MAC3G,IAAIL,gBAAgB,EAAE;QACpBnB,eAAe,CAACa,GAAG,CAACI,KAAK,CAACH,UAAU,CAAC;;MAEvC,KAAK,MAAMW,QAAQ,IAAIR,KAAK,CAACZ,mBAAmB,CAACT,iBAAiB,CAAC,EAAE;QACnE,MAAMW,UAAU,GAAG,IAAAnB,EAAA,CAAAsC,QAAQ,EAACT,KAAK,CAACd,IAAK,CAAC;QAGxC,IAAI,IAAAf,EAAA,CAAAuC,eAAe,EAACpB,UAAU,CAAC,EAAE;UAC/B,IAAAnB,EAAA,CAAAkB,mBAAmB,EAAC;YAClBC,UAAU;YACVC,SAAS,EAAEiB,QAAQ;YACnBhB,qCAAqC,EAAE,IAAI;YAC3CC,QAAQ,EAAE;WACX,CAAC,CAACC,OAAO,CAAEC,CAAC,IAAI;YAGf,IAAIpB,QAAQ,CAACoC,eAAe,CAAChB,CAAC,CAAC,EAAE;cAC/BZ,eAAe,CAACa,GAAG,CAACD,CAAC,CAACE,UAAU,CAAC;;UAErC,CAAC,CAAC;;;;;EAMV,KAAK,MAAMX,IAAI,IAAIZ,MAAM,CAACsC,cAAc,EAAE,EAAE;IAC1C3B,YAAY,CAACC,IAAI,CAAC;;EAGpB,OAAQc,KAAK,IAAKjB,eAAe,CAAC8B,GAAG,CAACb,KAAK,CAACH,UAAU,CAAC;AACzD;AA3DAiB,OAAA,CAAAzC,iBAAA,GAAAA,iBAAA","names":["_1","require","computeShareables","schema","metadata","federationMetadata","assert","keyDirective","providesDirective","shareableDirective","isFed2Schema","undefined","shareableFields","Set","addKeyFields","type","key","appliedDirectivesOf","collectTargetFields","parentType","directive","includeInterfaceFieldsImplementations","validate","forEach","f","add","coordinate","objectTypes","shareablesOnType","field","fields","fieldIsShareable","hasAppliedDirective","length","some","d","ofExtension","provides","baseType","isCompositeType","isFieldExternal","interfaceTypes","has","exports"],"sourceRoot":"","sources":["../src/precompute.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}