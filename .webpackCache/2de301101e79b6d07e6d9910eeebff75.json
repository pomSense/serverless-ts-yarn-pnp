{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = undefined && undefined.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.determineApolloConfig = void 0;\nconst createSHA_1 = __importDefault(require(\"./utils/createSHA\"));\nfunction determineApolloConfig(input, logger) {\n  var _a, _b, _c;\n  const apolloConfig = {};\n  const {\n    APOLLO_KEY,\n    APOLLO_GRAPH_REF,\n    APOLLO_GRAPH_ID,\n    APOLLO_GRAPH_VARIANT\n  } = process.env;\n  if (input === null || input === void 0 ? void 0 : input.key) {\n    apolloConfig.key = input.key.trim();\n  } else if (APOLLO_KEY) {\n    apolloConfig.key = APOLLO_KEY.trim();\n  }\n  if (((_a = input === null || input === void 0 ? void 0 : input.key) !== null && _a !== void 0 ? _a : APOLLO_KEY) !== apolloConfig.key) {\n    logger.warn('The provided API key has unexpected leading or trailing whitespace. ' + 'Apollo Server will trim the key value before use.');\n  }\n  if (apolloConfig.key) {\n    assertValidHeaderValue(apolloConfig.key);\n  }\n  if (apolloConfig.key) {\n    apolloConfig.keyHash = (0, createSHA_1.default)('sha512').update(apolloConfig.key).digest('hex');\n  }\n  if (input === null || input === void 0 ? void 0 : input.graphRef) {\n    apolloConfig.graphRef = input.graphRef;\n  } else if (APOLLO_GRAPH_REF) {\n    apolloConfig.graphRef = APOLLO_GRAPH_REF;\n  }\n  const graphId = (_b = input === null || input === void 0 ? void 0 : input.graphId) !== null && _b !== void 0 ? _b : APOLLO_GRAPH_ID;\n  const graphVariant = (_c = input === null || input === void 0 ? void 0 : input.graphVariant) !== null && _c !== void 0 ? _c : APOLLO_GRAPH_VARIANT;\n  if (apolloConfig.graphRef) {\n    if (graphId) {\n      throw new Error('Cannot specify both graph ref and graph ID. Please use ' + '`apollo.graphRef` or `APOLLO_GRAPH_REF` without also setting the graph ID.');\n    }\n    if (graphVariant) {\n      throw new Error('Cannot specify both graph ref and graph variant. Please use ' + '`apollo.graphRef` or `APOLLO_GRAPH_REF` without also setting the graph variant.');\n    }\n  } else if (graphId) {\n    apolloConfig.graphRef = graphVariant ? `${graphId}@${graphVariant}` : graphId;\n  }\n  return apolloConfig;\n}\nexports.determineApolloConfig = determineApolloConfig;\nfunction assertValidHeaderValue(value) {\n  const invalidHeaderCharRegex = /[^\\t\\x20-\\x7e\\x80-\\xff]/g;\n  if (invalidHeaderCharRegex.test(value)) {\n    const invalidChars = value.match(invalidHeaderCharRegex);\n    throw new Error(`The API key provided to Apollo Server contains characters which are invalid as HTTP header values. The following characters found in the key are invalid: ${invalidChars.join(', ')}. Valid header values may only contain ASCII visible characters. If you think there is an issue with your key, please contact Apollo support.`);\n  }\n}","map":{"version":3,"mappings":";;;;;;;;;;;AAKA,MAAAA,WAAA,GAAAC,eAAA,CAAAC,OAAA;AAIA,SAAgBC,qBAAqBA,CACnCC,KAAoC,EACpCC,MAAc;;EAEd,MAAMC,YAAY,GAAiB,EAAE;EAErC,MAAM;IACJC,UAAU;IACVC,gBAAgB;IAChBC,eAAe;IACfC;EAAoB,CACrB,GAAGC,OAAO,CAACC,GAAG;EAGf,IAAIR,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAES,GAAG,EAAE;IACdP,YAAY,CAACO,GAAG,GAAGT,KAAK,CAACS,GAAG,CAACC,IAAI,EAAE;GACpC,MAAM,IAAIP,UAAU,EAAE;IACrBD,YAAY,CAACO,GAAG,GAAGN,UAAU,CAACO,IAAI,EAAE;;EAEtC,IAAI,CAAC,CAAAC,EAAA,GAAAX,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAES,GAAG,cAAAE,EAAA,cAAAA,EAAA,GAAIR,UAAU,MAAMD,YAAY,CAACO,GAAG,EAAE;IACnDR,MAAM,CAACW,IAAI,CACT,sEAAsE,GACpE,mDAAmD,CACtD;;EAKH,IAAIV,YAAY,CAACO,GAAG,EAAE;IACpBI,sBAAsB,CAACX,YAAY,CAACO,GAAG,CAAC;;EAI1C,IAAIP,YAAY,CAACO,GAAG,EAAE;IACpBP,YAAY,CAACY,OAAO,GAAG,IAAAlB,WAAA,CAAAmB,OAAS,EAAC,QAAQ,CAAC,CACvCC,MAAM,CAACd,YAAY,CAACO,GAAG,CAAC,CACxBQ,MAAM,CAAC,KAAK,CAAC;;EAIlB,IAAIjB,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEkB,QAAQ,EAAE;IACnBhB,YAAY,CAACgB,QAAQ,GAAGlB,KAAK,CAACkB,QAAQ;GACvC,MAAM,IAAId,gBAAgB,EAAE;IAC3BF,YAAY,CAACgB,QAAQ,GAAGd,gBAAgB;;EAI1C,MAAMe,OAAO,GAAG,CAAAC,EAAA,GAAApB,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEmB,OAAO,cAAAC,EAAA,cAAAA,EAAA,GAAIf,eAAe;EACjD,MAAMgB,YAAY,GAAG,CAAAC,EAAA,GAAAtB,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEqB,YAAY,cAAAC,EAAA,cAAAA,EAAA,GAAIhB,oBAAoB;EAEhE,IAAIJ,YAAY,CAACgB,QAAQ,EAAE;IACzB,IAAIC,OAAO,EAAE;MACX,MAAM,IAAII,KAAK,CACb,yDAAyD,GACvD,4EAA4E,CAC/E;;IAEH,IAAIF,YAAY,EAAE;MAChB,MAAM,IAAIE,KAAK,CACb,8DAA8D,GAC5D,iFAAiF,CACpF;;GAEJ,MAAM,IAAIJ,OAAO,EAAE;IAKlBjB,YAAY,CAACgB,QAAQ,GAAGG,YAAY,GAChC,GAAGF,OAAO,IAAIE,YAAY,EAAE,GAC5BF,OAAO;;EAGb,OAAOjB,YAAY;AACrB;AA1EAsB,OAAA,CAAAzB,qBAAA,GAAAA,qBAAA;AA4EA,SAASc,sBAAsBA,CAACY,KAAa;EAG3C,MAAMC,sBAAsB,GAAG,0BAA0B;EACzD,IAAIA,sBAAsB,CAACC,IAAI,CAACF,KAAK,CAAC,EAAE;IACtC,MAAMG,YAAY,GAAGH,KAAK,CAACI,KAAK,CAACH,sBAAsB,CAAE;IACzD,MAAM,IAAIH,KAAK,CACb,6JAA6JK,YAAY,CAACE,IAAI,CAC5K,IAAI,CACL,+IAA+I,CACjJ;;AAEL","names":["createSHA_1","__importDefault","require","determineApolloConfig","input","logger","apolloConfig","APOLLO_KEY","APOLLO_GRAPH_REF","APOLLO_GRAPH_ID","APOLLO_GRAPH_VARIANT","process","env","key","trim","_a","warn","assertValidHeaderValue","keyHash","default","update","digest","graphRef","graphId","_b","graphVariant","_c","Error","exports","value","invalidHeaderCharRegex","test","invalidChars","match","join"],"sourceRoot":"","sources":["../src/determineApolloConfig.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}