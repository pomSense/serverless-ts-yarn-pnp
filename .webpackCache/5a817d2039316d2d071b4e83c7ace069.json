{"ast":null,"code":"\"use strict\";\n\nconst usm = require(\"./url-state-machine\");\nexports.implementation = class URLImpl {\n  constructor(constructorArgs) {\n    const url = constructorArgs[0];\n    const base = constructorArgs[1];\n    let parsedBase = null;\n    if (base !== undefined) {\n      parsedBase = usm.basicURLParse(base);\n      if (parsedBase === \"failure\") {\n        throw new TypeError(\"Invalid base URL\");\n      }\n    }\n    const parsedURL = usm.basicURLParse(url, {\n      baseURL: parsedBase\n    });\n    if (parsedURL === \"failure\") {\n      throw new TypeError(\"Invalid URL\");\n    }\n    this._url = parsedURL;\n\n    // TODO: query stuff\n  }\n\n  get href() {\n    return usm.serializeURL(this._url);\n  }\n  set href(v) {\n    const parsedURL = usm.basicURLParse(v);\n    if (parsedURL === \"failure\") {\n      throw new TypeError(\"Invalid URL\");\n    }\n    this._url = parsedURL;\n  }\n  get origin() {\n    return usm.serializeURLOrigin(this._url);\n  }\n  get protocol() {\n    return this._url.scheme + \":\";\n  }\n  set protocol(v) {\n    usm.basicURLParse(v + \":\", {\n      url: this._url,\n      stateOverride: \"scheme start\"\n    });\n  }\n  get username() {\n    return this._url.username;\n  }\n  set username(v) {\n    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n      return;\n    }\n    usm.setTheUsername(this._url, v);\n  }\n  get password() {\n    return this._url.password;\n  }\n  set password(v) {\n    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n      return;\n    }\n    usm.setThePassword(this._url, v);\n  }\n  get host() {\n    const url = this._url;\n    if (url.host === null) {\n      return \"\";\n    }\n    if (url.port === null) {\n      return usm.serializeHost(url.host);\n    }\n    return usm.serializeHost(url.host) + \":\" + usm.serializeInteger(url.port);\n  }\n  set host(v) {\n    if (this._url.cannotBeABaseURL) {\n      return;\n    }\n    usm.basicURLParse(v, {\n      url: this._url,\n      stateOverride: \"host\"\n    });\n  }\n  get hostname() {\n    if (this._url.host === null) {\n      return \"\";\n    }\n    return usm.serializeHost(this._url.host);\n  }\n  set hostname(v) {\n    if (this._url.cannotBeABaseURL) {\n      return;\n    }\n    usm.basicURLParse(v, {\n      url: this._url,\n      stateOverride: \"hostname\"\n    });\n  }\n  get port() {\n    if (this._url.port === null) {\n      return \"\";\n    }\n    return usm.serializeInteger(this._url.port);\n  }\n  set port(v) {\n    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n      return;\n    }\n    if (v === \"\") {\n      this._url.port = null;\n    } else {\n      usm.basicURLParse(v, {\n        url: this._url,\n        stateOverride: \"port\"\n      });\n    }\n  }\n  get pathname() {\n    if (this._url.cannotBeABaseURL) {\n      return this._url.path[0];\n    }\n    if (this._url.path.length === 0) {\n      return \"\";\n    }\n    return \"/\" + this._url.path.join(\"/\");\n  }\n  set pathname(v) {\n    if (this._url.cannotBeABaseURL) {\n      return;\n    }\n    this._url.path = [];\n    usm.basicURLParse(v, {\n      url: this._url,\n      stateOverride: \"path start\"\n    });\n  }\n  get search() {\n    if (this._url.query === null || this._url.query === \"\") {\n      return \"\";\n    }\n    return \"?\" + this._url.query;\n  }\n  set search(v) {\n    // TODO: query stuff\n\n    const url = this._url;\n    if (v === \"\") {\n      url.query = null;\n      return;\n    }\n    const input = v[0] === \"?\" ? v.substring(1) : v;\n    url.query = \"\";\n    usm.basicURLParse(input, {\n      url,\n      stateOverride: \"query\"\n    });\n  }\n  get hash() {\n    if (this._url.fragment === null || this._url.fragment === \"\") {\n      return \"\";\n    }\n    return \"#\" + this._url.fragment;\n  }\n  set hash(v) {\n    if (v === \"\") {\n      this._url.fragment = null;\n      return;\n    }\n    const input = v[0] === \"#\" ? v.substring(1) : v;\n    this._url.fragment = \"\";\n    usm.basicURLParse(input, {\n      url: this._url,\n      stateOverride: \"fragment\"\n    });\n  }\n  toJSON() {\n    return this.href;\n  }\n};","map":{"version":3,"names":["usm","require","exports","implementation","URLImpl","constructor","constructorArgs","url","base","parsedBase","undefined","basicURLParse","TypeError","parsedURL","baseURL","_url","href","serializeURL","v","origin","serializeURLOrigin","protocol","scheme","stateOverride","username","cannotHaveAUsernamePasswordPort","setTheUsername","password","setThePassword","host","port","serializeHost","serializeInteger","cannotBeABaseURL","hostname","pathname","path","length","join","search","query","input","substring","hash","fragment","toJSON"],"sources":["/Users/pom/Code/serverless-ts-yarn-pnp/.yarn/cache/whatwg-url-npm-5.0.0-374fb45e60-b8daed4ad3.zip/node_modules/whatwg-url/lib/URL-impl.js"],"sourcesContent":["\"use strict\";\nconst usm = require(\"./url-state-machine\");\n\nexports.implementation = class URLImpl {\n  constructor(constructorArgs) {\n    const url = constructorArgs[0];\n    const base = constructorArgs[1];\n\n    let parsedBase = null;\n    if (base !== undefined) {\n      parsedBase = usm.basicURLParse(base);\n      if (parsedBase === \"failure\") {\n        throw new TypeError(\"Invalid base URL\");\n      }\n    }\n\n    const parsedURL = usm.basicURLParse(url, { baseURL: parsedBase });\n    if (parsedURL === \"failure\") {\n      throw new TypeError(\"Invalid URL\");\n    }\n\n    this._url = parsedURL;\n\n    // TODO: query stuff\n  }\n\n  get href() {\n    return usm.serializeURL(this._url);\n  }\n\n  set href(v) {\n    const parsedURL = usm.basicURLParse(v);\n    if (parsedURL === \"failure\") {\n      throw new TypeError(\"Invalid URL\");\n    }\n\n    this._url = parsedURL;\n  }\n\n  get origin() {\n    return usm.serializeURLOrigin(this._url);\n  }\n\n  get protocol() {\n    return this._url.scheme + \":\";\n  }\n\n  set protocol(v) {\n    usm.basicURLParse(v + \":\", { url: this._url, stateOverride: \"scheme start\" });\n  }\n\n  get username() {\n    return this._url.username;\n  }\n\n  set username(v) {\n    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n      return;\n    }\n\n    usm.setTheUsername(this._url, v);\n  }\n\n  get password() {\n    return this._url.password;\n  }\n\n  set password(v) {\n    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n      return;\n    }\n\n    usm.setThePassword(this._url, v);\n  }\n\n  get host() {\n    const url = this._url;\n\n    if (url.host === null) {\n      return \"\";\n    }\n\n    if (url.port === null) {\n      return usm.serializeHost(url.host);\n    }\n\n    return usm.serializeHost(url.host) + \":\" + usm.serializeInteger(url.port);\n  }\n\n  set host(v) {\n    if (this._url.cannotBeABaseURL) {\n      return;\n    }\n\n    usm.basicURLParse(v, { url: this._url, stateOverride: \"host\" });\n  }\n\n  get hostname() {\n    if (this._url.host === null) {\n      return \"\";\n    }\n\n    return usm.serializeHost(this._url.host);\n  }\n\n  set hostname(v) {\n    if (this._url.cannotBeABaseURL) {\n      return;\n    }\n\n    usm.basicURLParse(v, { url: this._url, stateOverride: \"hostname\" });\n  }\n\n  get port() {\n    if (this._url.port === null) {\n      return \"\";\n    }\n\n    return usm.serializeInteger(this._url.port);\n  }\n\n  set port(v) {\n    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n      return;\n    }\n\n    if (v === \"\") {\n      this._url.port = null;\n    } else {\n      usm.basicURLParse(v, { url: this._url, stateOverride: \"port\" });\n    }\n  }\n\n  get pathname() {\n    if (this._url.cannotBeABaseURL) {\n      return this._url.path[0];\n    }\n\n    if (this._url.path.length === 0) {\n      return \"\";\n    }\n\n    return \"/\" + this._url.path.join(\"/\");\n  }\n\n  set pathname(v) {\n    if (this._url.cannotBeABaseURL) {\n      return;\n    }\n\n    this._url.path = [];\n    usm.basicURLParse(v, { url: this._url, stateOverride: \"path start\" });\n  }\n\n  get search() {\n    if (this._url.query === null || this._url.query === \"\") {\n      return \"\";\n    }\n\n    return \"?\" + this._url.query;\n  }\n\n  set search(v) {\n    // TODO: query stuff\n\n    const url = this._url;\n\n    if (v === \"\") {\n      url.query = null;\n      return;\n    }\n\n    const input = v[0] === \"?\" ? v.substring(1) : v;\n    url.query = \"\";\n    usm.basicURLParse(input, { url, stateOverride: \"query\" });\n  }\n\n  get hash() {\n    if (this._url.fragment === null || this._url.fragment === \"\") {\n      return \"\";\n    }\n\n    return \"#\" + this._url.fragment;\n  }\n\n  set hash(v) {\n    if (v === \"\") {\n      this._url.fragment = null;\n      return;\n    }\n\n    const input = v[0] === \"#\" ? v.substring(1) : v;\n    this._url.fragment = \"\";\n    usm.basicURLParse(input, { url: this._url, stateOverride: \"fragment\" });\n  }\n\n  toJSON() {\n    return this.href;\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}