{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.directiveDefinitionsAreCompatible = exports.typeIncludesDirective = exports.gatherDirectives = exports.isFederationDirective = exports.federationDirectives = exports.OverrideDirective = exports.InaccessibleDirective = exports.LinkDirective = exports.ShareableDirective = exports.TagDirective = exports.ProvidesDirective = exports.RequiresDirective = exports.ExternalDirective = exports.ExtendsDirective = exports.KeyDirective = void 0;\nconst graphql_1 = require(\"graphql\");\nconst types_1 = require(\"./types\");\nexports.KeyDirective = new graphql_1.GraphQLDirective({\n  name: 'key',\n  locations: [graphql_1.DirectiveLocation.OBJECT, graphql_1.DirectiveLocation.INTERFACE],\n  args: {\n    fields: {\n      type: new graphql_1.GraphQLNonNull(graphql_1.GraphQLString)\n    },\n    resolvable: {\n      type: graphql_1.GraphQLBoolean,\n      defaultValue: true\n    }\n  }\n});\nexports.ExtendsDirective = new graphql_1.GraphQLDirective({\n  name: 'extends',\n  locations: [graphql_1.DirectiveLocation.OBJECT, graphql_1.DirectiveLocation.INTERFACE]\n});\nexports.ExternalDirective = new graphql_1.GraphQLDirective({\n  name: 'external',\n  locations: [graphql_1.DirectiveLocation.OBJECT, graphql_1.DirectiveLocation.FIELD_DEFINITION]\n});\nexports.RequiresDirective = new graphql_1.GraphQLDirective({\n  name: 'requires',\n  locations: [graphql_1.DirectiveLocation.FIELD_DEFINITION],\n  args: {\n    fields: {\n      type: new graphql_1.GraphQLNonNull(graphql_1.GraphQLString)\n    }\n  }\n});\nexports.ProvidesDirective = new graphql_1.GraphQLDirective({\n  name: 'provides',\n  locations: [graphql_1.DirectiveLocation.FIELD_DEFINITION],\n  args: {\n    fields: {\n      type: new graphql_1.GraphQLNonNull(graphql_1.GraphQLString)\n    }\n  }\n});\nexports.TagDirective = new graphql_1.GraphQLDirective({\n  name: 'tag',\n  locations: [graphql_1.DirectiveLocation.FIELD_DEFINITION, graphql_1.DirectiveLocation.OBJECT, graphql_1.DirectiveLocation.INTERFACE, graphql_1.DirectiveLocation.UNION, graphql_1.DirectiveLocation.ARGUMENT_DEFINITION, graphql_1.DirectiveLocation.SCALAR, graphql_1.DirectiveLocation.ENUM, graphql_1.DirectiveLocation.ENUM_VALUE, graphql_1.DirectiveLocation.INPUT_OBJECT, graphql_1.DirectiveLocation.INPUT_FIELD_DEFINITION],\n  isRepeatable: true,\n  args: {\n    name: {\n      type: new graphql_1.GraphQLNonNull(graphql_1.GraphQLString)\n    }\n  }\n});\nexports.ShareableDirective = new graphql_1.GraphQLDirective({\n  name: 'shareable',\n  locations: [graphql_1.DirectiveLocation.FIELD_DEFINITION, graphql_1.DirectiveLocation.OBJECT]\n});\nexports.LinkDirective = new graphql_1.GraphQLDirective({\n  name: 'link',\n  locations: [graphql_1.DirectiveLocation.SCHEMA],\n  args: {\n    url: {\n      type: new graphql_1.GraphQLNonNull(graphql_1.GraphQLString)\n    },\n    import: {\n      type: new graphql_1.GraphQLList(types_1.LinkImportType)\n    }\n  }\n});\nexports.InaccessibleDirective = new graphql_1.GraphQLDirective({\n  name: 'inaccessible',\n  locations: [graphql_1.DirectiveLocation.FIELD_DEFINITION, graphql_1.DirectiveLocation.OBJECT, graphql_1.DirectiveLocation.INTERFACE, graphql_1.DirectiveLocation.UNION, graphql_1.DirectiveLocation.ARGUMENT_DEFINITION, graphql_1.DirectiveLocation.SCALAR, graphql_1.DirectiveLocation.ENUM, graphql_1.DirectiveLocation.ENUM_VALUE, graphql_1.DirectiveLocation.INPUT_OBJECT, graphql_1.DirectiveLocation.INPUT_FIELD_DEFINITION]\n});\nexports.OverrideDirective = new graphql_1.GraphQLDirective({\n  name: 'override',\n  locations: [graphql_1.DirectiveLocation.FIELD_DEFINITION],\n  args: {\n    from: {\n      type: new graphql_1.GraphQLNonNull(graphql_1.GraphQLString)\n    }\n  }\n});\nexports.federationDirectives = [exports.KeyDirective, exports.ExtendsDirective, exports.ExternalDirective, exports.RequiresDirective, exports.ProvidesDirective, exports.ShareableDirective, exports.LinkDirective, exports.TagDirective, exports.InaccessibleDirective, exports.OverrideDirective];\nfunction isFederationDirective(directive) {\n  return exports.federationDirectives.some(({\n    name\n  }) => name === directive.name);\n}\nexports.isFederationDirective = isFederationDirective;\nfunction hasDirectives(node) {\n  return Boolean('directives' in node && node.directives);\n}\nfunction gatherDirectives(element) {\n  const directives = [];\n  if ('extensionASTNodes' in element && element.extensionASTNodes) {\n    for (const node of element.extensionASTNodes) {\n      if (hasDirectives(node)) {\n        directives.push(...node.directives);\n      }\n    }\n  }\n  if (element.astNode && hasDirectives(element.astNode)) directives.push(...element.astNode.directives);\n  return directives;\n}\nexports.gatherDirectives = gatherDirectives;\nfunction typeIncludesDirective(type, directiveName) {\n  const directives = gatherDirectives(type);\n  return directives.some(directive => directive.name.value === directiveName);\n}\nexports.typeIncludesDirective = typeIncludesDirective;\nfunction directiveDefinitionsAreCompatible(baseDefinition, toCompare) {\n  var _a, _b, _c, _d;\n  if (baseDefinition.name.value !== toCompare.name.value) return false;\n  if (((_a = baseDefinition.arguments) === null || _a === void 0 ? void 0 : _a.length) !== ((_b = toCompare.arguments) === null || _b === void 0 ? void 0 : _b.length)) {\n    return false;\n  }\n  for (const arg of (_c = baseDefinition.arguments) !== null && _c !== void 0 ? _c : []) {\n    const toCompareArg = (_d = toCompare.arguments) === null || _d === void 0 ? void 0 : _d.find(a => a.name.value === arg.name.value);\n    if (!toCompareArg) return false;\n    if ((0, graphql_1.print)(stripDescriptions(arg)) !== (0, graphql_1.print)(stripDescriptions(toCompareArg))) {\n      return false;\n    }\n  }\n  if (toCompare.locations.some(location => !baseDefinition.locations.find(baseLocation => baseLocation.value === location.value))) {\n    return false;\n  }\n  return true;\n}\nexports.directiveDefinitionsAreCompatible = directiveDefinitionsAreCompatible;\nfunction stripDescriptions(astNode) {\n  return (0, graphql_1.visit)(astNode, {\n    enter(node) {\n      return 'description' in node ? {\n        ...node,\n        description: undefined\n      } : node;\n    }\n  });\n}","map":{"version":3,"mappings":"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","names":["graphql_1","require","types_1","exports","KeyDirective","GraphQLDirective","name","locations","DirectiveLocation","OBJECT","INTERFACE","args","fields","type","GraphQLNonNull","GraphQLString","resolvable","GraphQLBoolean","defaultValue","ExtendsDirective","ExternalDirective","FIELD_DEFINITION","RequiresDirective","ProvidesDirective","TagDirective","UNION","ARGUMENT_DEFINITION","SCALAR","ENUM","ENUM_VALUE","INPUT_OBJECT","INPUT_FIELD_DEFINITION","isRepeatable","ShareableDirective","LinkDirective","SCHEMA","url","import","GraphQLList","LinkImportType","InaccessibleDirective","OverrideDirective","from","federationDirectives","isFederationDirective","directive","some","hasDirectives","node","Boolean","directives","gatherDirectives","element","extensionASTNodes","push","astNode","typeIncludesDirective","directiveName","value","directiveDefinitionsAreCompatible","baseDefinition","toCompare","_a","arguments","length","_b","arg","_c","toCompareArg","_d","find","a","print","stripDescriptions","location","baseLocation","visit","enter","description","undefined"],"sourceRoot":"","sources":["../src/directives.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}