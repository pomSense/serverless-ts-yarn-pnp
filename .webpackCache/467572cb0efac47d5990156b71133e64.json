{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = undefined && undefined.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.computeCoreSchemaHash = exports.ApolloServerPluginSchemaReporting = void 0;\nconst os_1 = __importDefault(require(\"os\"));\nconst uuid_1 = require(\"uuid\");\nconst graphql_1 = require(\"graphql\");\nconst schemaReporter_1 = require(\"./schemaReporter\");\nconst createSHA_1 = __importDefault(require(\"../../utils/createSHA\"));\nconst schemaIsFederated_1 = require(\"../schemaIsFederated\");\nfunction ApolloServerPluginSchemaReporting({\n  initialDelayMaxMs,\n  overrideReportedSchema,\n  endpointUrl,\n  fetcher\n} = Object.create(null)) {\n  const bootId = (0, uuid_1.v4)();\n  return {\n    __internal_plugin_id__() {\n      return 'SchemaReporting';\n    },\n    async serverWillStart({\n      apollo,\n      schema,\n      logger\n    }) {\n      const {\n        key,\n        graphRef\n      } = apollo;\n      if (!key) {\n        throw Error('To use ApolloServerPluginSchemaReporting, you must provide an Apollo API ' + 'key, via the APOLLO_KEY environment variable or via `new ApolloServer({apollo: {key})`');\n      }\n      if (!graphRef) {\n        throw Error('To use ApolloServerPluginSchemaReporting, you must provide your graph ref (eg, ' + \"'my-graph-id@my-graph-variant'). Try setting the APOLLO_GRAPH_REF environment \" + 'variable or passing `new ApolloServer({apollo: {graphRef}})`.');\n      }\n      if (overrideReportedSchema) {\n        try {\n          const validationErrors = (0, graphql_1.validateSchema)((0, graphql_1.buildSchema)(overrideReportedSchema, {\n            noLocation: true\n          }));\n          if (validationErrors.length) {\n            throw new Error(validationErrors.map(error => error.message).join('\\n'));\n          }\n        } catch (err) {\n          throw new Error('The schema provided to overrideReportedSchema failed to parse or ' + `validate: ${err.message}`);\n        }\n      }\n      if ((0, schemaIsFederated_1.schemaIsFederated)(schema)) {\n        throw Error(['Schema reporting is not yet compatible with federated services.', \"If you're interested in using schema reporting with federated\", 'services, please contact Apollo support. To set up managed federation, see', 'https://go.apollo.dev/s/managed-federation'].join(' '));\n      }\n      if (endpointUrl !== undefined) {\n        logger.info(`Apollo schema reporting: schema reporting URL override: ${endpointUrl}`);\n      }\n      const baseSchemaReport = {\n        bootId,\n        graphRef,\n        platform: process.env.APOLLO_SERVER_PLATFORM || 'local',\n        runtimeVersion: `node ${process.version}`,\n        userVersion: process.env.APOLLO_SERVER_USER_VERSION,\n        serverId: process.env.APOLLO_SERVER_ID || process.env.HOSTNAME || os_1.default.hostname(),\n        libraryVersion: `apollo-server-core@${require('../../../package.json').version}`\n      };\n      let currentSchemaReporter;\n      return {\n        schemaDidLoadOrUpdate({\n          apiSchema,\n          coreSupergraphSdl\n        }) {\n          var _a;\n          if (overrideReportedSchema !== undefined) {\n            if (currentSchemaReporter) {\n              return;\n            } else {\n              logger.info('Apollo schema reporting: schema to report has been overridden');\n            }\n          }\n          const coreSchema = (_a = overrideReportedSchema !== null && overrideReportedSchema !== void 0 ? overrideReportedSchema : coreSupergraphSdl) !== null && _a !== void 0 ? _a : (0, graphql_1.printSchema)(apiSchema);\n          const coreSchemaHash = computeCoreSchemaHash(coreSchema);\n          const schemaReport = {\n            ...baseSchemaReport,\n            coreSchemaHash\n          };\n          currentSchemaReporter === null || currentSchemaReporter === void 0 ? void 0 : currentSchemaReporter.stop();\n          currentSchemaReporter = new schemaReporter_1.SchemaReporter({\n            schemaReport,\n            coreSchema,\n            apiKey: key,\n            endpointUrl,\n            logger,\n            initialReportingDelayInMs: Math.floor(Math.random() * (initialDelayMaxMs !== null && initialDelayMaxMs !== void 0 ? initialDelayMaxMs : 10000)),\n            fallbackReportingDelayInMs: 20000,\n            fetcher\n          });\n          currentSchemaReporter.start();\n          logger.info('Apollo schema reporting: reporting a new schema to Studio! See your graph at ' + `https://studio.apollographql.com/graph/${encodeURI(graphRef)}/ with server info ${JSON.stringify(schemaReport)}`);\n        },\n        async serverWillStop() {\n          currentSchemaReporter === null || currentSchemaReporter === void 0 ? void 0 : currentSchemaReporter.stop();\n        }\n      };\n    }\n  };\n}\nexports.ApolloServerPluginSchemaReporting = ApolloServerPluginSchemaReporting;\nfunction computeCoreSchemaHash(schema) {\n  return (0, createSHA_1.default)('sha256').update(schema).digest('hex');\n}\nexports.computeCoreSchemaHash = computeCoreSchemaHash;","map":{"version":3,"mappings":"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","names":["os_1","__importDefault","require","uuid_1","graphql_1","schemaReporter_1","createSHA_1","schemaIsFederated_1","ApolloServerPluginSchemaReporting","initialDelayMaxMs","overrideReportedSchema","endpointUrl","fetcher","Object","create","bootId","v4","__internal_plugin_id__","serverWillStart","apollo","schema","logger","key","graphRef","Error","validationErrors","validateSchema","buildSchema","noLocation","length","map","error","message","join","err","schemaIsFederated","undefined","info","baseSchemaReport","platform","process","env","APOLLO_SERVER_PLATFORM","runtimeVersion","version","userVersion","APOLLO_SERVER_USER_VERSION","serverId","APOLLO_SERVER_ID","HOSTNAME","default","hostname","libraryVersion","currentSchemaReporter","schemaDidLoadOrUpdate","apiSchema","coreSupergraphSdl","coreSchema","_a","printSchema","coreSchemaHash","computeCoreSchemaHash","schemaReport","stop","SchemaReporter","apiKey","initialReportingDelayInMs","Math","floor","random","fallbackReportingDelayInMs","start","encodeURI","JSON","stringify","serverWillStop","exports","update","digest"],"sourceRoot":"","sources":["../../../src/plugin/schemaReporting/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}