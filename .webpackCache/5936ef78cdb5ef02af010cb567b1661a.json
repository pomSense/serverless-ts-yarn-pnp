{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = undefined && undefined.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DebugLogger = exports.newDebugLogger = void 0;\nconst chalk_1 = __importDefault(require(\"chalk\"));\nconst utils_1 = require(\"./utils\");\nfunction indentString(indentLevel) {\n  let str = \"\";\n  for (let i = 0; i < indentLevel; i++) {\n    str += chalk_1.default.blackBright(\"⎸ \");\n  }\n  return str;\n}\nfunction isEnabled(name) {\n  const v = process.env.APOLLO_FEDERATION_DEBUG;\n  const bool = (0, utils_1.validateStringContainsBoolean)(v);\n  if (bool !== undefined) {\n    return bool;\n  }\n  const enabledNames = v.split(',').map(n => n.trim());\n  return enabledNames.includes(name);\n}\nlet currentIndentLevel = 0;\nlet currentIndentation = '';\nlet maxLoggerNameLength = 0;\nconst createdLoggers = [];\nfunction newDebugLogger(name) {\n  const enabled = isEnabled(name);\n  const created = new DebugLogger(name, enabled);\n  if (enabled) {\n    global.console = require('console');\n    createdLoggers.push(created);\n    maxLoggerNameLength = Math.max(maxLoggerNameLength, name.length);\n    for (const logger of createdLoggers) {\n      DebugLogger.prototype['updateHeader'].call(logger, maxLoggerNameLength);\n    }\n  }\n  return created;\n}\nexports.newDebugLogger = newDebugLogger;\nfunction increaseIndentation() {\n  currentIndentLevel++;\n  currentIndentation = indentString(currentIndentLevel);\n}\nfunction decreaseIndentation() {\n  if (currentIndentLevel > 0) {\n    currentIndentLevel--;\n    currentIndentation = indentString(currentIndentLevel);\n  }\n}\nclass DebugLogger {\n  constructor(name, enabled) {\n    this.name = name;\n    this.enabled = enabled;\n    this.header = chalk_1.default.blackBright(`[${name}] `);\n  }\n  updateHeader(maxLength) {\n    let padding = \"\";\n    if (maxLength > this.name.length) {\n      const toPad = maxLength - this.name.length;\n      for (let i = 0; i < toPad; i++) {\n        padding += \" \";\n      }\n    }\n    this.header = chalk_1.default.blackBright('[' + padding + this.name + '] ');\n  }\n  doLog(str) {\n    const indent = this.header + currentIndentation;\n    const withIndentedNewlines = str.replace(/\\n/g, '\\n' + indent + '  ');\n    console.log(indent + withIndentedNewlines);\n  }\n  log(message, prefix = chalk_1.default.yellow('• ')) {\n    if (!this.enabled) return this;\n    if (typeof message !== 'string') {\n      message = message();\n    }\n    this.doLog(prefix + message);\n    return this;\n  }\n  groupedValues(values, printFn, initialMessage) {\n    if (!this.enabled) return this;\n    this.group(initialMessage);\n    for (const value of values) {\n      this.doLog('- ' + printFn(value));\n    }\n    return this.groupEnd();\n  }\n  groupedEntries(map, keyPrintFn, valuePrintFn) {\n    if (!this.enabled) return this;\n    this.group();\n    for (const [k, v] of map.entries()) {\n      this.doLog('- ' + keyPrintFn(k) + ': ' + valuePrintFn(v));\n    }\n    return this.groupEnd();\n  }\n  group(openingMessage) {\n    if (this.enabled) {\n      if (openingMessage) {\n        this.log(openingMessage, chalk_1.default.blue('‣ '));\n      }\n      increaseIndentation();\n    }\n    return this;\n  }\n  groupEnd(closingMessage) {\n    if (!this.enabled) {\n      return this;\n    }\n    decreaseIndentation();\n    if (closingMessage) {\n      this.log(closingMessage, chalk_1.default.green('⇒ '));\n    }\n    return this;\n  }\n}\nexports.DebugLogger = DebugLogger;","map":{"version":3,"mappings":"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","names":["chalk_1","__importDefault","require","utils_1","indentString","indentLevel","str","i","default","blackBright","isEnabled","name","v","process","env","APOLLO_FEDERATION_DEBUG","bool","validateStringContainsBoolean","undefined","enabledNames","split","map","n","trim","includes","currentIndentLevel","currentIndentation","maxLoggerNameLength","createdLoggers","newDebugLogger","enabled","created","DebugLogger","global","console","push","Math","max","length","logger","prototype","call","exports","increaseIndentation","decreaseIndentation","constructor","header","updateHeader","maxLength","padding","toPad","doLog","indent","withIndentedNewlines","replace","log","message","prefix","yellow","groupedValues","values","printFn","initialMessage","group","value","groupEnd","groupedEntries","keyPrintFn","valuePrintFn","k","entries","openingMessage","blue","closingMessage","green"],"sourceRoot":"","sources":["../src/debug.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}