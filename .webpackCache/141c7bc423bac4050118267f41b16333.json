{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.createSourceEventStream = createSourceEventStream;\nexports.subscribe = subscribe;\nvar _devAssert = require('../jsutils/devAssert.js');\nvar _inspect = require('../jsutils/inspect.js');\nvar _isAsyncIterable = require('../jsutils/isAsyncIterable.js');\nvar _Path = require('../jsutils/Path.js');\nvar _GraphQLError = require('../error/GraphQLError.js');\nvar _locatedError = require('../error/locatedError.js');\nvar _collectFields = require('./collectFields.js');\nvar _execute = require('./execute.js');\nvar _mapAsyncIterator = require('./mapAsyncIterator.js');\nvar _values = require('./values.js');\n\n/**\n * Implements the \"Subscribe\" algorithm described in the GraphQL specification.\n *\n * Returns a Promise which resolves to either an AsyncIterator (if successful)\n * or an ExecutionResult (error). The promise will be rejected if the schema or\n * other arguments to this function are invalid, or if the resolved event stream\n * is not an async iterable.\n *\n * If the client-provided arguments to this function do not result in a\n * compliant subscription, a GraphQL Response (ExecutionResult) with\n * descriptive errors and no data will be returned.\n *\n * If the source stream could not be created due to faulty subscription\n * resolver logic or underlying systems, the promise will resolve to a single\n * ExecutionResult containing `errors` and no `data`.\n *\n * If the operation succeeded, the promise resolves to an AsyncIterator, which\n * yields a stream of ExecutionResults representing the response stream.\n *\n * Accepts either an object with named arguments, or individual arguments.\n */\nasync function subscribe(args) {\n  // Temporary for v15 to v16 migration. Remove in v17\n  arguments.length < 2 || (0, _devAssert.devAssert)(false, 'graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead.');\n  const {\n    schema,\n    document,\n    rootValue,\n    contextValue,\n    variableValues,\n    operationName,\n    fieldResolver,\n    subscribeFieldResolver\n  } = args;\n  const resultOrStream = await createSourceEventStream(schema, document, rootValue, contextValue, variableValues, operationName, subscribeFieldResolver);\n  if (!(0, _isAsyncIterable.isAsyncIterable)(resultOrStream)) {\n    return resultOrStream;\n  } // For each payload yielded from a subscription, map it over the normal\n  // GraphQL `execute` function, with `payload` as the rootValue.\n  // This implements the \"MapSourceToResponseEvent\" algorithm described in\n  // the GraphQL specification. The `execute` function provides the\n  // \"ExecuteSubscriptionEvent\" algorithm, as it is nearly identical to the\n  // \"ExecuteQuery\" algorithm, for which `execute` is also used.\n\n  const mapSourceToResponse = payload => (0, _execute.execute)({\n    schema,\n    document,\n    rootValue: payload,\n    contextValue,\n    variableValues,\n    operationName,\n    fieldResolver\n  }); // Map every source value to a ExecutionResult value as described above.\n\n  return (0, _mapAsyncIterator.mapAsyncIterator)(resultOrStream, mapSourceToResponse);\n}\n/**\n * Implements the \"CreateSourceEventStream\" algorithm described in the\n * GraphQL specification, resolving the subscription source event stream.\n *\n * Returns a Promise which resolves to either an AsyncIterable (if successful)\n * or an ExecutionResult (error). The promise will be rejected if the schema or\n * other arguments to this function are invalid, or if the resolved event stream\n * is not an async iterable.\n *\n * If the client-provided arguments to this function do not result in a\n * compliant subscription, a GraphQL Response (ExecutionResult) with\n * descriptive errors and no data will be returned.\n *\n * If the the source stream could not be created due to faulty subscription\n * resolver logic or underlying systems, the promise will resolve to a single\n * ExecutionResult containing `errors` and no `data`.\n *\n * If the operation succeeded, the promise resolves to the AsyncIterable for the\n * event stream returned by the resolver.\n *\n * A Source Event Stream represents a sequence of events, each of which triggers\n * a GraphQL execution for that event.\n *\n * This may be useful when hosting the stateful subscription service in a\n * different process or machine than the stateless GraphQL execution engine,\n * or otherwise separating these two steps. For more on this, see the\n * \"Supporting Subscriptions at Scale\" information in the GraphQL specification.\n */\n\nasync function createSourceEventStream(schema, document, rootValue, contextValue, variableValues, operationName, subscribeFieldResolver) {\n  // If arguments are missing or incorrectly typed, this is an internal\n  // developer mistake which should throw an early error.\n  (0, _execute.assertValidExecutionArguments)(schema, document, variableValues); // If a valid execution context cannot be created due to incorrect arguments,\n  // a \"Response\" with only errors is returned.\n\n  const exeContext = (0, _execute.buildExecutionContext)({\n    schema,\n    document,\n    rootValue,\n    contextValue,\n    variableValues,\n    operationName,\n    subscribeFieldResolver\n  }); // Return early errors if execution context failed.\n\n  if (!('schema' in exeContext)) {\n    return {\n      errors: exeContext\n    };\n  }\n  try {\n    const eventStream = await executeSubscription(exeContext); // Assert field returned an event stream, otherwise yield an error.\n\n    if (!(0, _isAsyncIterable.isAsyncIterable)(eventStream)) {\n      throw new Error('Subscription field must return Async Iterable. ' + `Received: ${(0, _inspect.inspect)(eventStream)}.`);\n    }\n    return eventStream;\n  } catch (error) {\n    // If it GraphQLError, report it as an ExecutionResult, containing only errors and no data.\n    // Otherwise treat the error as a system-class error and re-throw it.\n    if (error instanceof _GraphQLError.GraphQLError) {\n      return {\n        errors: [error]\n      };\n    }\n    throw error;\n  }\n}\nasync function executeSubscription(exeContext) {\n  const {\n    schema,\n    fragments,\n    operation,\n    variableValues,\n    rootValue\n  } = exeContext;\n  const rootType = schema.getSubscriptionType();\n  if (rootType == null) {\n    throw new _GraphQLError.GraphQLError('Schema is not configured to execute subscription operation.', {\n      nodes: operation\n    });\n  }\n  const rootFields = (0, _collectFields.collectFields)(schema, fragments, variableValues, rootType, operation.selectionSet);\n  const [responseName, fieldNodes] = [...rootFields.entries()][0];\n  const fieldDef = (0, _execute.getFieldDef)(schema, rootType, fieldNodes[0]);\n  if (!fieldDef) {\n    const fieldName = fieldNodes[0].name.value;\n    throw new _GraphQLError.GraphQLError(`The subscription field \"${fieldName}\" is not defined.`, {\n      nodes: fieldNodes\n    });\n  }\n  const path = (0, _Path.addPath)(undefined, responseName, rootType.name);\n  const info = (0, _execute.buildResolveInfo)(exeContext, fieldDef, fieldNodes, rootType, path);\n  try {\n    var _fieldDef$subscribe;\n\n    // Implements the \"ResolveFieldEventStream\" algorithm from GraphQL specification.\n    // It differs from \"ResolveFieldValue\" due to providing a different `resolveFn`.\n    // Build a JS object of arguments from the field.arguments AST, using the\n    // variables scope to fulfill any variable references.\n    const args = (0, _values.getArgumentValues)(fieldDef, fieldNodes[0], variableValues); // The resolve function's optional third argument is a context value that\n    // is provided to every resolve function within an execution. It is commonly\n    // used to represent an authenticated user, or request-specific caches.\n\n    const contextValue = exeContext.contextValue; // Call the `subscribe()` resolver or the default resolver to produce an\n    // AsyncIterable yielding raw payloads.\n\n    const resolveFn = (_fieldDef$subscribe = fieldDef.subscribe) !== null && _fieldDef$subscribe !== void 0 ? _fieldDef$subscribe : exeContext.subscribeFieldResolver;\n    const eventStream = await resolveFn(rootValue, args, contextValue, info);\n    if (eventStream instanceof Error) {\n      throw eventStream;\n    }\n    return eventStream;\n  } catch (error) {\n    throw (0, _locatedError.locatedError)(error, fieldNodes, (0, _Path.pathToArray)(path));\n  }\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","createSourceEventStream","subscribe","_devAssert","require","_inspect","_isAsyncIterable","_Path","_GraphQLError","_locatedError","_collectFields","_execute","_mapAsyncIterator","_values","args","arguments","length","devAssert","schema","document","rootValue","contextValue","variableValues","operationName","fieldResolver","subscribeFieldResolver","resultOrStream","isAsyncIterable","mapSourceToResponse","payload","execute","mapAsyncIterator","assertValidExecutionArguments","exeContext","buildExecutionContext","errors","eventStream","executeSubscription","Error","inspect","error","GraphQLError","fragments","operation","rootType","getSubscriptionType","nodes","rootFields","collectFields","selectionSet","responseName","fieldNodes","entries","fieldDef","getFieldDef","fieldName","name","path","addPath","undefined","info","buildResolveInfo","_fieldDef$subscribe","getArgumentValues","resolveFn","locatedError","pathToArray"],"sources":["/Users/pom/Code/serverless-ts-yarn-pnp/.yarn/cache/graphql-npm-16.5.0-348f68b718-a82a926d08.zip/node_modules/graphql/execution/subscribe.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.createSourceEventStream = createSourceEventStream;\nexports.subscribe = subscribe;\n\nvar _devAssert = require('../jsutils/devAssert.js');\n\nvar _inspect = require('../jsutils/inspect.js');\n\nvar _isAsyncIterable = require('../jsutils/isAsyncIterable.js');\n\nvar _Path = require('../jsutils/Path.js');\n\nvar _GraphQLError = require('../error/GraphQLError.js');\n\nvar _locatedError = require('../error/locatedError.js');\n\nvar _collectFields = require('./collectFields.js');\n\nvar _execute = require('./execute.js');\n\nvar _mapAsyncIterator = require('./mapAsyncIterator.js');\n\nvar _values = require('./values.js');\n\n/**\n * Implements the \"Subscribe\" algorithm described in the GraphQL specification.\n *\n * Returns a Promise which resolves to either an AsyncIterator (if successful)\n * or an ExecutionResult (error). The promise will be rejected if the schema or\n * other arguments to this function are invalid, or if the resolved event stream\n * is not an async iterable.\n *\n * If the client-provided arguments to this function do not result in a\n * compliant subscription, a GraphQL Response (ExecutionResult) with\n * descriptive errors and no data will be returned.\n *\n * If the source stream could not be created due to faulty subscription\n * resolver logic or underlying systems, the promise will resolve to a single\n * ExecutionResult containing `errors` and no `data`.\n *\n * If the operation succeeded, the promise resolves to an AsyncIterator, which\n * yields a stream of ExecutionResults representing the response stream.\n *\n * Accepts either an object with named arguments, or individual arguments.\n */\nasync function subscribe(args) {\n  // Temporary for v15 to v16 migration. Remove in v17\n  arguments.length < 2 ||\n    (0, _devAssert.devAssert)(\n      false,\n      'graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead.',\n    );\n  const {\n    schema,\n    document,\n    rootValue,\n    contextValue,\n    variableValues,\n    operationName,\n    fieldResolver,\n    subscribeFieldResolver,\n  } = args;\n  const resultOrStream = await createSourceEventStream(\n    schema,\n    document,\n    rootValue,\n    contextValue,\n    variableValues,\n    operationName,\n    subscribeFieldResolver,\n  );\n\n  if (!(0, _isAsyncIterable.isAsyncIterable)(resultOrStream)) {\n    return resultOrStream;\n  } // For each payload yielded from a subscription, map it over the normal\n  // GraphQL `execute` function, with `payload` as the rootValue.\n  // This implements the \"MapSourceToResponseEvent\" algorithm described in\n  // the GraphQL specification. The `execute` function provides the\n  // \"ExecuteSubscriptionEvent\" algorithm, as it is nearly identical to the\n  // \"ExecuteQuery\" algorithm, for which `execute` is also used.\n\n  const mapSourceToResponse = (payload) =>\n    (0, _execute.execute)({\n      schema,\n      document,\n      rootValue: payload,\n      contextValue,\n      variableValues,\n      operationName,\n      fieldResolver,\n    }); // Map every source value to a ExecutionResult value as described above.\n\n  return (0, _mapAsyncIterator.mapAsyncIterator)(\n    resultOrStream,\n    mapSourceToResponse,\n  );\n}\n/**\n * Implements the \"CreateSourceEventStream\" algorithm described in the\n * GraphQL specification, resolving the subscription source event stream.\n *\n * Returns a Promise which resolves to either an AsyncIterable (if successful)\n * or an ExecutionResult (error). The promise will be rejected if the schema or\n * other arguments to this function are invalid, or if the resolved event stream\n * is not an async iterable.\n *\n * If the client-provided arguments to this function do not result in a\n * compliant subscription, a GraphQL Response (ExecutionResult) with\n * descriptive errors and no data will be returned.\n *\n * If the the source stream could not be created due to faulty subscription\n * resolver logic or underlying systems, the promise will resolve to a single\n * ExecutionResult containing `errors` and no `data`.\n *\n * If the operation succeeded, the promise resolves to the AsyncIterable for the\n * event stream returned by the resolver.\n *\n * A Source Event Stream represents a sequence of events, each of which triggers\n * a GraphQL execution for that event.\n *\n * This may be useful when hosting the stateful subscription service in a\n * different process or machine than the stateless GraphQL execution engine,\n * or otherwise separating these two steps. For more on this, see the\n * \"Supporting Subscriptions at Scale\" information in the GraphQL specification.\n */\n\nasync function createSourceEventStream(\n  schema,\n  document,\n  rootValue,\n  contextValue,\n  variableValues,\n  operationName,\n  subscribeFieldResolver,\n) {\n  // If arguments are missing or incorrectly typed, this is an internal\n  // developer mistake which should throw an early error.\n  (0, _execute.assertValidExecutionArguments)(schema, document, variableValues); // If a valid execution context cannot be created due to incorrect arguments,\n  // a \"Response\" with only errors is returned.\n\n  const exeContext = (0, _execute.buildExecutionContext)({\n    schema,\n    document,\n    rootValue,\n    contextValue,\n    variableValues,\n    operationName,\n    subscribeFieldResolver,\n  }); // Return early errors if execution context failed.\n\n  if (!('schema' in exeContext)) {\n    return {\n      errors: exeContext,\n    };\n  }\n\n  try {\n    const eventStream = await executeSubscription(exeContext); // Assert field returned an event stream, otherwise yield an error.\n\n    if (!(0, _isAsyncIterable.isAsyncIterable)(eventStream)) {\n      throw new Error(\n        'Subscription field must return Async Iterable. ' +\n          `Received: ${(0, _inspect.inspect)(eventStream)}.`,\n      );\n    }\n\n    return eventStream;\n  } catch (error) {\n    // If it GraphQLError, report it as an ExecutionResult, containing only errors and no data.\n    // Otherwise treat the error as a system-class error and re-throw it.\n    if (error instanceof _GraphQLError.GraphQLError) {\n      return {\n        errors: [error],\n      };\n    }\n\n    throw error;\n  }\n}\n\nasync function executeSubscription(exeContext) {\n  const { schema, fragments, operation, variableValues, rootValue } =\n    exeContext;\n  const rootType = schema.getSubscriptionType();\n\n  if (rootType == null) {\n    throw new _GraphQLError.GraphQLError(\n      'Schema is not configured to execute subscription operation.',\n      {\n        nodes: operation,\n      },\n    );\n  }\n\n  const rootFields = (0, _collectFields.collectFields)(\n    schema,\n    fragments,\n    variableValues,\n    rootType,\n    operation.selectionSet,\n  );\n  const [responseName, fieldNodes] = [...rootFields.entries()][0];\n  const fieldDef = (0, _execute.getFieldDef)(schema, rootType, fieldNodes[0]);\n\n  if (!fieldDef) {\n    const fieldName = fieldNodes[0].name.value;\n    throw new _GraphQLError.GraphQLError(\n      `The subscription field \"${fieldName}\" is not defined.`,\n      {\n        nodes: fieldNodes,\n      },\n    );\n  }\n\n  const path = (0, _Path.addPath)(undefined, responseName, rootType.name);\n  const info = (0, _execute.buildResolveInfo)(\n    exeContext,\n    fieldDef,\n    fieldNodes,\n    rootType,\n    path,\n  );\n\n  try {\n    var _fieldDef$subscribe;\n\n    // Implements the \"ResolveFieldEventStream\" algorithm from GraphQL specification.\n    // It differs from \"ResolveFieldValue\" due to providing a different `resolveFn`.\n    // Build a JS object of arguments from the field.arguments AST, using the\n    // variables scope to fulfill any variable references.\n    const args = (0, _values.getArgumentValues)(\n      fieldDef,\n      fieldNodes[0],\n      variableValues,\n    ); // The resolve function's optional third argument is a context value that\n    // is provided to every resolve function within an execution. It is commonly\n    // used to represent an authenticated user, or request-specific caches.\n\n    const contextValue = exeContext.contextValue; // Call the `subscribe()` resolver or the default resolver to produce an\n    // AsyncIterable yielding raw payloads.\n\n    const resolveFn =\n      (_fieldDef$subscribe = fieldDef.subscribe) !== null &&\n      _fieldDef$subscribe !== void 0\n        ? _fieldDef$subscribe\n        : exeContext.subscribeFieldResolver;\n    const eventStream = await resolveFn(rootValue, args, contextValue, info);\n\n    if (eventStream instanceof Error) {\n      throw eventStream;\n    }\n\n    return eventStream;\n  } catch (error) {\n    throw (0, _locatedError.locatedError)(\n      error,\n      fieldNodes,\n      (0, _Path.pathToArray)(path),\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}