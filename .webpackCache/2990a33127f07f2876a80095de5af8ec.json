{"ast":null,"code":"\"use strict\";\n\n/**\n * DynamoDB Toolbox: A simple set of tools for working with Amazon DynamoDB\n * @author Jeremy Daly <jeremy@jeremydaly.com>\n * @license MIT\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst utils_1 = require(\"./utils\");\n// Performs type validation/coercian\nexports.default = DocumentClient => (mapping, field, value) => {\n  // Evaluate function expressions\n  // TODO: should this happen here?\n  // let value = typeof input === 'function' ? input(data) : input\n  // return if undefined or null\n  if (!utils_1.hasValue(value)) return value;\n  switch (mapping.type) {\n    case 'string':\n      return typeof value === 'string' || mapping.coerce ? String(value) : utils_1.error(`'${field}' must be of type string`);\n    case 'boolean':\n      return typeof value === 'boolean' || mapping.coerce ? utils_1.toBool(value) : utils_1.error(`'${field}' must be of type boolean`);\n    case 'number':\n      return typeof value === 'number' || mapping.coerce ? String(parseInt(value)) === String(value) ? parseInt(value) : String(parseFloat(value)) === String(value) ? parseFloat(value) : utils_1.error(`Could not convert '${value}' to a number for '${field}'`) : utils_1.error(`'${field}' must be of type number`);\n    case 'list':\n      return Array.isArray(value) ? value : mapping.coerce ? String(value).split(',').map(x => x.trim()) : utils_1.error(`'${field}' must be a list (array)`);\n    case 'map':\n      return typeof value === 'object' && !Array.isArray(value) ? value : utils_1.error(`'${field}' must be a map (object)`);\n    case 'set':\n      if (Array.isArray(value)) {\n        if (!DocumentClient) utils_1.error('DocumentClient required for this operation');\n        let set = DocumentClient.createSet(value, {\n          validate: true\n        });\n        return !mapping.setType || mapping.setType === set.type.toLowerCase() ? set : utils_1.error(`'${field}' must be a valid set (array) containing only ${mapping.setType} types`);\n      } else if (mapping.coerce) {\n        if (!DocumentClient) utils_1.error('DocumentClient required for this operation');\n        let set = DocumentClient.createSet(String(value).split(',').map(x => x.trim()));\n        return !mapping.setType || mapping.setType === set.type.toLowerCase() ? set : utils_1.error(`'${field}' must be a valid set (array) of type ${mapping.setType}`);\n      } else {\n        return utils_1.error(`'${field}' must be a valid set (array)`);\n      }\n    default:\n      // TODO: Binary validation\n      return value;\n  }\n}; // end validateTypes","map":{"version":3,"names":["Object","defineProperty","exports","value","utils_1","require","default","DocumentClient","mapping","field","hasValue","type","coerce","String","error","toBool","parseInt","parseFloat","Array","isArray","split","map","x","trim","set","createSet","validate","setType","toLowerCase"],"sources":["/Users/pom/Code/serverless-ts-yarn-pnp/.yarn/cache/dynamodb-toolbox-npm-0.3.5-3ff4bf5328-d75542b529.zip/node_modules/dynamodb-toolbox/dist/lib/validateTypes.js"],"sourcesContent":["\"use strict\";\n/**\n * DynamoDB Toolbox: A simple set of tools for working with Amazon DynamoDB\n * @author Jeremy Daly <jeremy@jeremydaly.com>\n * @license MIT\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"./utils\");\n// Performs type validation/coercian\nexports.default = (DocumentClient) => (mapping, field, value) => {\n    // Evaluate function expressions\n    // TODO: should this happen here?\n    // let value = typeof input === 'function' ? input(data) : input\n    // return if undefined or null\n    if (!utils_1.hasValue(value))\n        return value;\n    switch (mapping.type) {\n        case 'string':\n            return typeof value === 'string' || mapping.coerce ? String(value)\n                : utils_1.error(`'${field}' must be of type string`);\n        case 'boolean':\n            return typeof value === 'boolean' || mapping.coerce ? utils_1.toBool(value)\n                : utils_1.error(`'${field}' must be of type boolean`);\n        case 'number':\n            return typeof value === 'number' || mapping.coerce ?\n                (String(parseInt(value)) === String(value) ? parseInt(value)\n                    : String(parseFloat(value)) === String(value) ? parseFloat(value)\n                        : utils_1.error(`Could not convert '${value}' to a number for '${field}'`))\n                : utils_1.error(`'${field}' must be of type number`);\n        case 'list':\n            return Array.isArray(value) ? value\n                : mapping.coerce ? String(value).split(',').map(x => x.trim())\n                    : utils_1.error(`'${field}' must be a list (array)`);\n        case 'map':\n            return typeof value === 'object' && !Array.isArray(value) ? value\n                : utils_1.error(`'${field}' must be a map (object)`);\n        case 'set':\n            if (Array.isArray(value)) {\n                if (!DocumentClient)\n                    utils_1.error('DocumentClient required for this operation');\n                let set = DocumentClient.createSet(value, { validate: true });\n                return !mapping.setType || mapping.setType === set.type.toLowerCase() ? set\n                    : utils_1.error(`'${field}' must be a valid set (array) containing only ${mapping.setType} types`);\n            }\n            else if (mapping.coerce) {\n                if (!DocumentClient)\n                    utils_1.error('DocumentClient required for this operation');\n                let set = DocumentClient.createSet(String(value).split(',').map(x => x.trim()));\n                return !mapping.setType || mapping.setType === set.type.toLowerCase() ? set\n                    : utils_1.error(`'${field}' must be a valid set (array) of type ${mapping.setType}`);\n            }\n            else {\n                return utils_1.error(`'${field}' must be a valid set (array)`);\n            }\n        default:\n            // TODO: Binary validation\n            return value;\n    }\n}; // end validateTypes\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}