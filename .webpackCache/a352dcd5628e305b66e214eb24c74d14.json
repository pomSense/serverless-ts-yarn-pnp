{"ast":null,"code":"\"use strict\";\n\nvar AWS = require('./core');\nrequire('./http');\nvar inherit = AWS.util.inherit;\nvar getMetadataServiceEndpoint = require('./metadata_service/get_metadata_service_endpoint');\nvar URL = require('url').URL;\n\n/**\n * Represents a metadata service available on EC2 instances. Using the\n * {request} method, you can receieve metadata about any available resource\n * on the metadata service.\n *\n * You can disable the use of the IMDS by setting the AWS_EC2_METADATA_DISABLED\n * environment variable to a truthy value.\n *\n * @!attribute [r] httpOptions\n *   @return [map] a map of options to pass to the underlying HTTP request:\n *\n *     * **timeout** (Number) &mdash; a timeout value in milliseconds to wait\n *       before aborting the connection. Set to 0 for no timeout.\n *\n * @!macro nobrowser\n */\nAWS.MetadataService = inherit({\n  /**\n   * @return [String] the endpoint of the instance metadata service\n   */\n  endpoint: getMetadataServiceEndpoint(),\n  /**\n   * @!ignore\n   */\n\n  /**\n   * Default HTTP options. By default, the metadata service is set to not\n   * timeout on long requests. This means that on non-EC2 machines, this\n   * request will never return. If you are calling this operation from an\n   * environment that may not always run on EC2, set a `timeout` value so\n   * the SDK will abort the request after a given number of milliseconds.\n   */\n  httpOptions: {\n    timeout: 0\n  },\n  /**\n   * when enabled, metadata service will not fetch token\n   */\n  disableFetchToken: false,\n  /**\n   * Creates a new MetadataService object with a given set of options.\n   *\n   * @option options host [String] the hostname of the instance metadata\n   *   service\n   * @option options httpOptions [map] a map of options to pass to the\n   *   underlying HTTP request:\n   *\n   *   * **timeout** (Number) &mdash; a timeout value in milliseconds to wait\n   *     before aborting the connection. Set to 0 for no timeout.\n   * @option options maxRetries [Integer] the maximum number of retries to\n   *   perform for timeout errors\n   * @option options retryDelayOptions [map] A set of options to configure the\n   *   retry delay on retryable errors. See AWS.Config for details.\n   */\n  constructor: function MetadataService(options) {\n    if (options && options.host) {\n      options.endpoint = 'http://' + options.host;\n      delete options.host;\n    }\n    AWS.util.update(this, options);\n  },\n  /**\n   * Sends a request to the instance metadata service for a given resource.\n   *\n   * @param path [String] the path of the resource to get\n   *\n   * @param options [map] an optional map used to make request\n   *\n   *   * **method** (String) &mdash; HTTP request method\n   *\n   *   * **headers** (map<String,String>) &mdash; a map of response header keys and their respective values\n   *\n   * @callback callback function(err, data)\n   *   Called when a response is available from the service.\n   *   @param err [Error, null] if an error occurred, this value will be set\n   *   @param data [String, null] if the request was successful, the body of\n   *     the response\n   */\n  request: function request(path, options, callback) {\n    if (arguments.length === 2) {\n      callback = options;\n      options = {};\n    }\n    if (process.env[AWS.util.imdsDisabledEnv]) {\n      callback(new Error('EC2 Instance Metadata Service access disabled'));\n      return;\n    }\n    path = path || '/';\n\n    // Verify that host is a valid URL\n    if (URL) {\n      new URL(this.endpoint);\n    }\n    var httpRequest = new AWS.HttpRequest(this.endpoint + path);\n    httpRequest.method = options.method || 'GET';\n    if (options.headers) {\n      httpRequest.headers = options.headers;\n    }\n    AWS.util.handleRequestWithRetries(httpRequest, this, callback);\n  },\n  /**\n  * @api private\n  */\n  loadCredentialsCallbacks: [],\n  /**\n   * Fetches metadata token used for getting credentials\n   *\n   * @api private\n   * @callback callback function(err, token)\n   *   Called when token is loaded from the resource\n   */\n  fetchMetadataToken: function fetchMetadataToken(callback) {\n    var self = this;\n    var tokenFetchPath = '/latest/api/token';\n    self.request(tokenFetchPath, {\n      'method': 'PUT',\n      'headers': {\n        'x-aws-ec2-metadata-token-ttl-seconds': '21600'\n      }\n    }, callback);\n  },\n  /**\n   * Fetches credentials\n   *\n   * @api private\n   * @callback cb function(err, creds)\n   *   Called when credentials are loaded from the resource\n   */\n  fetchCredentials: function fetchCredentials(options, cb) {\n    var self = this;\n    var basePath = '/latest/meta-data/iam/security-credentials/';\n    self.request(basePath, options, function (err, roleName) {\n      if (err) {\n        self.disableFetchToken = !(err.statusCode === 401);\n        cb(AWS.util.error(err, {\n          message: 'EC2 Metadata roleName request returned error'\n        }));\n        return;\n      }\n      roleName = roleName.split('\\n')[0]; // grab first (and only) role\n      self.request(basePath + roleName, options, function (credErr, credData) {\n        if (credErr) {\n          self.disableFetchToken = !(credErr.statusCode === 401);\n          cb(AWS.util.error(credErr, {\n            message: 'EC2 Metadata creds request returned error'\n          }));\n          return;\n        }\n        try {\n          var credentials = JSON.parse(credData);\n          cb(null, credentials);\n        } catch (parseError) {\n          cb(parseError);\n        }\n      });\n    });\n  },\n  /**\n   * Loads a set of credentials stored in the instance metadata service\n   *\n   * @api private\n   * @callback callback function(err, credentials)\n   *   Called when credentials are loaded from the resource\n   *   @param err [Error] if an error occurred, this value will be set\n   *   @param credentials [Object] the raw JSON object containing all\n   *     metadata from the credentials resource\n   */\n  loadCredentials: function loadCredentials(callback) {\n    var self = this;\n    self.loadCredentialsCallbacks.push(callback);\n    if (self.loadCredentialsCallbacks.length > 1) {\n      return;\n    }\n    function callbacks(err, creds) {\n      var cb;\n      while ((cb = self.loadCredentialsCallbacks.shift()) !== undefined) {\n        cb(err, creds);\n      }\n    }\n    if (self.disableFetchToken) {\n      self.fetchCredentials({}, callbacks);\n    } else {\n      self.fetchMetadataToken(function (tokenError, token) {\n        if (tokenError) {\n          if (tokenError.code === 'TimeoutError') {\n            self.disableFetchToken = true;\n          } else if (tokenError.retryable === true) {\n            callbacks(AWS.util.error(tokenError, {\n              message: 'EC2 Metadata token request returned error'\n            }));\n            return;\n          } else if (tokenError.statusCode === 400) {\n            callbacks(AWS.util.error(tokenError, {\n              message: 'EC2 Metadata token request returned 400'\n            }));\n            return;\n          }\n        }\n        var options = {};\n        if (token) {\n          options.headers = {\n            'x-aws-ec2-metadata-token': token\n          };\n        }\n        self.fetchCredentials(options, callbacks);\n      });\n    }\n  }\n});\n\n/**\n * @api private\n */\nmodule.exports = AWS.MetadataService;","map":{"version":3,"names":["AWS","require","inherit","util","getMetadataServiceEndpoint","URL","MetadataService","endpoint","httpOptions","timeout","disableFetchToken","constructor","options","host","update","request","path","callback","arguments","length","process","env","imdsDisabledEnv","Error","httpRequest","HttpRequest","method","headers","handleRequestWithRetries","loadCredentialsCallbacks","fetchMetadataToken","self","tokenFetchPath","fetchCredentials","cb","basePath","err","roleName","statusCode","error","message","split","credErr","credData","credentials","JSON","parse","parseError","loadCredentials","push","callbacks","creds","shift","undefined","tokenError","token","code","retryable","module","exports"],"sources":["/Users/pom/Code/serverless-ts-yarn-pnp/.yarn/cache/aws-sdk-npm-2.1460.0-8b7a7b0dbc-36f1210a24.zip/node_modules/aws-sdk/lib/metadata_service.js"],"sourcesContent":["var AWS = require('./core');\nrequire('./http');\nvar inherit = AWS.util.inherit;\nvar getMetadataServiceEndpoint = require('./metadata_service/get_metadata_service_endpoint');\nvar URL = require('url').URL;\n\n/**\n * Represents a metadata service available on EC2 instances. Using the\n * {request} method, you can receieve metadata about any available resource\n * on the metadata service.\n *\n * You can disable the use of the IMDS by setting the AWS_EC2_METADATA_DISABLED\n * environment variable to a truthy value.\n *\n * @!attribute [r] httpOptions\n *   @return [map] a map of options to pass to the underlying HTTP request:\n *\n *     * **timeout** (Number) &mdash; a timeout value in milliseconds to wait\n *       before aborting the connection. Set to 0 for no timeout.\n *\n * @!macro nobrowser\n */\nAWS.MetadataService = inherit({\n  /**\n   * @return [String] the endpoint of the instance metadata service\n   */\n  endpoint: getMetadataServiceEndpoint(),\n\n  /**\n   * @!ignore\n   */\n\n  /**\n   * Default HTTP options. By default, the metadata service is set to not\n   * timeout on long requests. This means that on non-EC2 machines, this\n   * request will never return. If you are calling this operation from an\n   * environment that may not always run on EC2, set a `timeout` value so\n   * the SDK will abort the request after a given number of milliseconds.\n   */\n  httpOptions: { timeout: 0 },\n\n  /**\n   * when enabled, metadata service will not fetch token\n   */\n  disableFetchToken: false,\n\n  /**\n   * Creates a new MetadataService object with a given set of options.\n   *\n   * @option options host [String] the hostname of the instance metadata\n   *   service\n   * @option options httpOptions [map] a map of options to pass to the\n   *   underlying HTTP request:\n   *\n   *   * **timeout** (Number) &mdash; a timeout value in milliseconds to wait\n   *     before aborting the connection. Set to 0 for no timeout.\n   * @option options maxRetries [Integer] the maximum number of retries to\n   *   perform for timeout errors\n   * @option options retryDelayOptions [map] A set of options to configure the\n   *   retry delay on retryable errors. See AWS.Config for details.\n   */\n  constructor: function MetadataService(options) {\n    if (options && options.host) {\n      options.endpoint = 'http://' + options.host;\n      delete options.host;\n    }\n    AWS.util.update(this, options);\n  },\n\n  /**\n   * Sends a request to the instance metadata service for a given resource.\n   *\n   * @param path [String] the path of the resource to get\n   *\n   * @param options [map] an optional map used to make request\n   *\n   *   * **method** (String) &mdash; HTTP request method\n   *\n   *   * **headers** (map<String,String>) &mdash; a map of response header keys and their respective values\n   *\n   * @callback callback function(err, data)\n   *   Called when a response is available from the service.\n   *   @param err [Error, null] if an error occurred, this value will be set\n   *   @param data [String, null] if the request was successful, the body of\n   *     the response\n   */\n  request: function request(path, options, callback) {\n    if (arguments.length === 2) {\n      callback = options;\n      options = {};\n    }\n\n    if (process.env[AWS.util.imdsDisabledEnv]) {\n      callback(new Error('EC2 Instance Metadata Service access disabled'));\n      return;\n    }\n\n    path = path || '/';\n\n    // Verify that host is a valid URL\n    if (URL) { new URL(this.endpoint); }\n\n    var httpRequest = new AWS.HttpRequest(this.endpoint + path);\n    httpRequest.method = options.method || 'GET';\n    if (options.headers) {\n      httpRequest.headers = options.headers;\n    }\n    AWS.util.handleRequestWithRetries(httpRequest, this, callback);\n  },\n\n  /**\n  * @api private\n  */\n  loadCredentialsCallbacks: [],\n\n  /**\n   * Fetches metadata token used for getting credentials\n   *\n   * @api private\n   * @callback callback function(err, token)\n   *   Called when token is loaded from the resource\n   */\n  fetchMetadataToken: function fetchMetadataToken(callback) {\n    var self = this;\n    var tokenFetchPath = '/latest/api/token';\n    self.request(\n      tokenFetchPath,\n      {\n        'method': 'PUT',\n        'headers': {\n          'x-aws-ec2-metadata-token-ttl-seconds': '21600'\n        }\n      },\n      callback\n    );\n  },\n\n  /**\n   * Fetches credentials\n   *\n   * @api private\n   * @callback cb function(err, creds)\n   *   Called when credentials are loaded from the resource\n   */\n  fetchCredentials: function fetchCredentials(options, cb) {\n    var self = this;\n    var basePath = '/latest/meta-data/iam/security-credentials/';\n\n    self.request(basePath, options, function (err, roleName) {\n      if (err) {\n        self.disableFetchToken = !(err.statusCode === 401);\n        cb(AWS.util.error(\n          err,\n          {\n            message: 'EC2 Metadata roleName request returned error'\n          }\n        ));\n        return;\n      }\n      roleName = roleName.split('\\n')[0]; // grab first (and only) role\n      self.request(basePath + roleName, options, function (credErr, credData) {\n        if (credErr) {\n          self.disableFetchToken = !(credErr.statusCode === 401);\n          cb(AWS.util.error(\n            credErr,\n            {\n              message: 'EC2 Metadata creds request returned error'\n            }\n          ));\n          return;\n        }\n        try {\n          var credentials = JSON.parse(credData);\n          cb(null, credentials);\n        } catch (parseError) {\n          cb(parseError);\n        }\n      });\n    });\n  },\n\n  /**\n   * Loads a set of credentials stored in the instance metadata service\n   *\n   * @api private\n   * @callback callback function(err, credentials)\n   *   Called when credentials are loaded from the resource\n   *   @param err [Error] if an error occurred, this value will be set\n   *   @param credentials [Object] the raw JSON object containing all\n   *     metadata from the credentials resource\n   */\n  loadCredentials: function loadCredentials(callback) {\n    var self = this;\n    self.loadCredentialsCallbacks.push(callback);\n    if (self.loadCredentialsCallbacks.length > 1) { return; }\n\n    function callbacks(err, creds) {\n      var cb;\n      while ((cb = self.loadCredentialsCallbacks.shift()) !== undefined) {\n        cb(err, creds);\n      }\n    }\n\n    if (self.disableFetchToken) {\n      self.fetchCredentials({}, callbacks);\n    } else {\n      self.fetchMetadataToken(function(tokenError, token) {\n        if (tokenError) {\n          if (tokenError.code === 'TimeoutError') {\n            self.disableFetchToken = true;\n          } else if (tokenError.retryable === true) {\n            callbacks(AWS.util.error(\n              tokenError,\n              {\n                message: 'EC2 Metadata token request returned error'\n              }\n            ));\n            return;\n          } else if (tokenError.statusCode === 400) {\n            callbacks(AWS.util.error(\n              tokenError,\n              {\n                message: 'EC2 Metadata token request returned 400'\n              }\n            ));\n            return;\n          }\n        }\n        var options = {};\n        if (token) {\n          options.headers = {\n            'x-aws-ec2-metadata-token': token\n          };\n        }\n        self.fetchCredentials(options, callbacks);\n      });\n\n    }\n  }\n});\n\n/**\n * @api private\n */\nmodule.exports = AWS.MetadataService;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}