{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.makeTraceDetails = void 0;\nconst apollo_reporting_protobuf_1 = require(\"apollo-reporting-protobuf\");\nfunction makeTraceDetails(variables, sendVariableValues, operationString) {\n  const details = new apollo_reporting_protobuf_1.Trace.Details();\n  const variablesToRecord = (() => {\n    if (sendVariableValues && 'transform' in sendVariableValues) {\n      const originalKeys = Object.keys(variables);\n      try {\n        const modifiedVariables = sendVariableValues.transform({\n          variables: variables,\n          operationString: operationString\n        });\n        return cleanModifiedVariables(originalKeys, modifiedVariables);\n      } catch (e) {\n        return handleVariableValueTransformError(originalKeys);\n      }\n    } else {\n      return variables;\n    }\n  })();\n  Object.keys(variablesToRecord).forEach(name => {\n    if (!sendVariableValues || 'none' in sendVariableValues && sendVariableValues.none || 'all' in sendVariableValues && !sendVariableValues.all || 'exceptNames' in sendVariableValues && sendVariableValues.exceptNames.includes(name) || 'onlyNames' in sendVariableValues && !sendVariableValues.onlyNames.includes(name)) {\n      details.variablesJson[name] = '';\n    } else {\n      try {\n        details.variablesJson[name] = typeof variablesToRecord[name] === 'undefined' ? '' : JSON.stringify(variablesToRecord[name]);\n      } catch (e) {\n        details.variablesJson[name] = JSON.stringify('[Unable to convert value to JSON]');\n      }\n    }\n  });\n  return details;\n}\nexports.makeTraceDetails = makeTraceDetails;\nfunction handleVariableValueTransformError(variableNames) {\n  const modifiedVariables = Object.create(null);\n  variableNames.forEach(name => {\n    modifiedVariables[name] = '[PREDICATE_FUNCTION_ERROR]';\n  });\n  return modifiedVariables;\n}\nfunction cleanModifiedVariables(originalKeys, modifiedVariables) {\n  const cleanedVariables = Object.create(null);\n  originalKeys.forEach(name => {\n    cleanedVariables[name] = modifiedVariables[name];\n  });\n  return cleanedVariables;\n}","map":{"version":3,"mappings":";;;;;;AAAA,MAAAA,2BAAA,GAAAC,OAAA;AAUA,SAAgBC,gBAAgBA,CAC9BC,SAA8B,EAC9BC,kBAAyC,EACzCC,eAAwB;EAExB,MAAMC,OAAO,GAAG,IAAIN,2BAAA,CAAAO,KAAK,CAACC,OAAO,EAAE;EACnC,MAAMC,iBAAiB,GAAG,CAAC,MAAK;IAC9B,IAAIL,kBAAkB,IAAI,WAAW,IAAIA,kBAAkB,EAAE;MAC3D,MAAMM,YAAY,GAAGC,MAAM,CAACC,IAAI,CAACT,SAAS,CAAC;MAC3C,IAAI;QAEF,MAAMU,iBAAiB,GAAGT,kBAAkB,CAACU,SAAS,CAAC;UACrDX,SAAS,EAAEA,SAAS;UACpBE,eAAe,EAAEA;SAClB,CAAC;QACF,OAAOU,sBAAsB,CAACL,YAAY,EAAEG,iBAAiB,CAAC;OAC/D,CAAC,OAAOG,CAAC,EAAE;QAGV,OAAOC,iCAAiC,CAACP,YAAY,CAAC;;KAEzD,MAAM;MACL,OAAOP,SAAS;;EAEpB,CAAC,EAAC,CAAE;EAOJQ,MAAM,CAACC,IAAI,CAACH,iBAAiB,CAAC,CAACS,OAAO,CAAEC,IAAI,IAAI;IAC9C,IACE,CAACf,kBAAkB,IAClB,MAAM,IAAIA,kBAAkB,IAAIA,kBAAkB,CAACgB,IAAK,IACxD,KAAK,IAAIhB,kBAAkB,IAAI,CAACA,kBAAkB,CAACiB,GAAI,IACvD,aAAa,IAAIjB,kBAAkB,IAIlCA,kBAAkB,CAACkB,WAAW,CAACC,QAAQ,CAACJ,IAAI,CAAE,IAC/C,WAAW,IAAIf,kBAAkB,IAChC,CAACA,kBAAkB,CAACoB,SAAS,CAACD,QAAQ,CAACJ,IAAI,CAAE,EAC/C;MAIAb,OAAO,CAACmB,aAAc,CAACN,IAAI,CAAC,GAAG,EAAE;KAClC,MAAM;MACL,IAAI;QACFb,OAAO,CAACmB,aAAc,CAACN,IAAI,CAAC,GAC1B,OAAOV,iBAAiB,CAACU,IAAI,CAAC,KAAK,WAAW,GAC1C,EAAE,GACFO,IAAI,CAACC,SAAS,CAAClB,iBAAiB,CAACU,IAAI,CAAC,CAAC;OAC9C,CAAC,OAAOH,CAAC,EAAE;QACVV,OAAO,CAACmB,aAAc,CAACN,IAAI,CAAC,GAAGO,IAAI,CAACC,SAAS,CAC3C,mCAAmC,CACpC;;;EAGP,CAAC,CAAC;EACF,OAAOrB,OAAO;AAChB;AA9DAsB,OAAA,CAAA1B,gBAAA,GAAAA,gBAAA;AAgEA,SAASe,iCAAiCA,CACxCY,aAAuB;EAEvB,MAAMhB,iBAAiB,GAAGF,MAAM,CAACmB,MAAM,CAAC,IAAI,CAAC;EAC7CD,aAAa,CAACX,OAAO,CAAEC,IAAI,IAAI;IAC7BN,iBAAiB,CAACM,IAAI,CAAC,GAAG,4BAA4B;EACxD,CAAC,CAAC;EACF,OAAON,iBAAiB;AAC1B;AAIA,SAASE,sBAAsBA,CAC7BL,YAA2B,EAC3BG,iBAAsC;EAEtC,MAAMkB,gBAAgB,GAAwBpB,MAAM,CAACmB,MAAM,CAAC,IAAI,CAAC;EACjEpB,YAAY,CAACQ,OAAO,CAAEC,IAAI,IAAI;IAC5BY,gBAAgB,CAACZ,IAAI,CAAC,GAAGN,iBAAiB,CAACM,IAAI,CAAC;EAClD,CAAC,CAAC;EACF,OAAOY,gBAAgB;AACzB","names":["apollo_reporting_protobuf_1","require","makeTraceDetails","variables","sendVariableValues","operationString","details","Trace","Details","variablesToRecord","originalKeys","Object","keys","modifiedVariables","transform","cleanModifiedVariables","e","handleVariableValueTransformError","forEach","name","none","all","exceptNames","includes","onlyNames","variablesJson","JSON","stringify","exports","variableNames","create","cleanedVariables"],"sourceRoot":"","sources":["../../../src/plugin/usageReporting/traceDetails.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}